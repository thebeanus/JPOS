<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered maxdepth="3"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>jPOS Programmer&#8217;s Guide</title>
<date>2022-09-10</date>
<author>
<personname>
<firstname>jPOS</firstname>
<othername>Software</othername>
<surname>SRL</surname>
</personname>
<email>apr@jpos.org</email>
</author>
<authorinitials>jSS</authorinitials>
<revhistory>
<revision>
<revnumber>2.1.5</revnumber>
<date>2022-09-10</date>
<authorinitials>jSS</authorinitials>
</revision>
</revhistory>
<subtitle>jPOS Programmer's Guide</subtitle>
<releaseinfo>2.1.4</releaseinfo>
<copyright>
  <year>1998-2015</year>
  <holder>Alejandro Revilla / Uruguay</holder>
</copyright>
<legalnotice>
  <para>
    All rights reserved. No part of this document may be reproduced in any
    form or by any electronic or mechanical means, including information
    storage and retrieval systems, without permission in writing from
    jPOS Software SRL (Uruguay).
  </para>
</legalnotice>
<abstract>
  <para>
    jPOS is an ISO-8583 library/framework that can be used to
    implement financial interchanges, protocol converters,
    payment gateways, credit card verification clients and
    servers (merchant/issuer/acquirer roles), etc.
  </para>
  <para>
     This document describes jPOS' design, its internals and shows
     you how to get the most out of it.
  </para>
</abstract>
<authorgroup>
  <author>
    <personname>
      <firstname>Alejandro</firstname>
      <surname>Revilla</surname>
      <othername role="mi">P</othername>
    </personname>
  </author>
</authorgroup>
<othercredit>
  <personname>
    <firstname>Dave</firstname>
    <surname>Bergert</surname>
  </personname>
  <contrib>Extensive review, and multiple corrections</contrib>
</othercredit>
<othercredit>
  <personname>
    <firstname>Alwyn</firstname>
    <surname>Schoeman</surname>
  </personname>
  <contrib>Review, Feedback, Corrections</contrib>
</othercredit>
<othercredit>
  <personname>
    <firstname>Andy</firstname>
    <surname>Orrock</surname>
  </personname>
  <contrib>Extensive feedback and corrections</contrib>
</othercredit>
<othercredit>
  <personname>
    <firstname>Mark</firstname>
    <surname>Salter</surname>
  </personname>
  <contrib>Extensive feedback and corrections</contrib>
</othercredit>
<othercredit>
  <personname>
    <firstname>Murtuza</firstname>
    <surname>Chhil</surname>
  </personname>
  <contrib>Extensive feedback and corrections</contrib>
</othercredit>

</info>
<preface xml:id="copyright_notice">
<title>Copyright notice</title>
<informalexample role="license">
<simpara>Copyright &#169; 1998-2019 by jPOS Software SRL, Uruguay.
All rights reserved. No part of this book may be reproduced in any form or by
any electronic or mechanical means, including information storage and retrieval
systems, without permission in writing from jPOS Software SRL, except by a
reviewer who may quote brief passages  in a review.</simpara>
</informalexample>
</preface>
<preface xml:id="preface">
<title>Preface</title>
<simpara>This document covers <emphasis role="strong">jPOS 2.1.4</emphasis> (and 2.1.5-SNAPSHOT).</simpara>
</preface>
<chapter xml:id="_the_jpos_project">
<title>The jPOS Project</title>
<section xml:id="_about_jpos_org">
<title>About jPOS.org</title>
<simpara>The jPOS project is hosted at <link xl:href="http://jpos.org">http://jpos.org</link>.
In order to stay up-to-date with jPOS news, you may want to visit
the project&#8217;s main page, as well as its blog at <link xl:href="http://jpos.org/blog">http://jpos.org/blog</link>.
For an up to date list of project resources, you can visit the <link xl:href="http://jpos.org/resources">http://jpos.org/resources</link> page.
There&#8217;s also a low traffic <emphasis role="strong">jPOS News</emphasis> mailing list where we post important
announcements, such as a the availability of new versions of this guide. You&#8217;re
encouraged to register by visiting the project&#8217;s main page at <link xl:href="http://jpos.org">http://jpos.org</link>.</simpara>
<simpara>Code is hosted at <link xl:href="http://github.com/jpos/jPOS">http://github.com/jpos/jPOS</link>.</simpara>
<simpara>You may also want to follow us on Twitter, where we keep a list of users who regularly tweet about jPOS at <link xl:href="http://twitter.com/apr/lists/jpos">@apr/lists/jpos</link>.</simpara>
<simpara>In addition, you may want to subscribe to our
<link xl:href="http://groups.google.com/group/jpos-users">users' mailing list (<link xl:href="mailto:jpos-users@googlegroups.com">jpos-users@googlegroups.com</link>)</link>.</simpara>
<simpara>Commit notifications can be tracked by following <link xl:href="http://twitter.com/jposcommits">@jposcommits</link>.</simpara>
<simpara>We are also active on <link xl:href="https://jpos.slack.com">Slack</link>. Please request an invitation via e-mail to <link xl:href="mailto:support@jpos.org">support@jpos.org</link>.</simpara>
<tip>
<simpara>If you happen to tweet about jPOS, please use the hash tag <literal>#jPOS</literal> so we can follow you.</simpara>
</tip>
</section>
<section xml:id="license">
<title>jPOS License</title>
<simpara>jPOS is distributed under the <link linkend="appendix_license">GNU Affero General Public License version 3</link>.</simpara>
<note>
<title>IMPORTANT NOTICE</title>
<simpara>If you don&#8217;t plan to release your jPOS based application under a compatible license
(see <link xl:href="http://www.fsf.org/licensing/licenses/agpl-3.0.html">AGPL 3.0 FAQ</link>
where you can find a license compatibility matrix)
 <emphasis role="strong">you need to buy a commercial license</emphasis>
(you can contact us using the <link xl:href="http://jpos.org/contact?p=CL.Proguide">contact form</link>).</simpara>
</note>
</section>
<section xml:id="iso8583_intro">
<title>About ISO-8583</title>
<simpara>We assume the reader is familiar with the ISO-8583 standard.</simpara>
<simpara>For starters, you can take a look at the Wikipedia
<link xl:href="http://en.wikipedia.org/wiki/ISO_8583">ISO_8583</link> page and the <xref linkend="iso8583"/>
of this document, but for any serious work you need to get a copy
of the standard from <link xl:href="http://www.iso.org">http://www.iso.org</link>.</simpara>
<simpara>This is a high level standard, and vendors have implemented it in slightly
different ways. You also need the protocol specifications for your
particular interchange.</simpara>
<simpara>If you are starting a new payments application and you have full control over
your spec, you may want to consider using the ISO-8583 v2003 based jPOS Common
Message Format described in <link xl:href="http://jpos.org/doc/jPOS-CMF.pdf">http://jpos.org/doc/jPOS-CMF.pdf</link>.</simpara>
<tip>
<simpara>The jPOS-CMF is an open source project, you can get the DocBook sources
in the jPOS Github reporitory at <link xl:href="http://github.com/jPOS/jPOS-CMF">http://github.com/jPOS/jPOS-CMF</link> and
modify it to fit your needs. This is an open spec, we expect institutions
using it to get in touch with us in order to improve it.</simpara>
</tip>
</section>
<section xml:id="_downloading_jpos">
<title>Downloading jPOS</title>
<simpara>The community edition of jPOS can be downloaded from the
<link xl:href="http://jpos.org/download">jPOS Download</link> page.</simpara>
<simpara>A Git repository is hosted at <link xl:href="http://github.com/jpos/jPOS">Github</link>.
The repository has many branches and tags. Unless you are dealing with a
legacy jPOS application, you want to use the <literal>master</literal> branch.</simpara>
<simpara>If you are looking for older jPOS versions, you can
find them in the <link xl:href="http://sourceforge.net/projects/jpos/files/jpos/">SourceForge</link>
repository, but please note all current development activity is taking place in the
<link xl:href="http://github.com/jpos/jPOS">Github</link> repository, though.</simpara>
</section>
<section xml:id="_directory_structure">
<title>Directory structure</title>
<simpara>jPOS uses <link xl:href="http://www.gradle.org/">Gradle</link> with a <emphasis role="strong">multi-module</emphasis> setup.</simpara>
<simpara>The modules are defined in the <literal>settings.gradle</literal> file and listed below:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">jpos</emphasis> : this is the jPOS system</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">compat_1_5_2</emphasis> : compatibility with older versions</simpara>
</listitem>
</itemizedlist>
<simpara>You&#8217;ll find the jPOS sources in the <literal>jpos/src</literal> directory.</simpara>
<screen>|-- COPYRIGHT                                                             <co xml:id="CO1-1"/>
|-- CREDITS
|-- LICENSE
|-- README.md                                                             <co xml:id="CO1-2"/>
|-- build.gradle                                                          <co xml:id="CO1-3"/>
|-- settings.gradle                                                       <co xml:id="CO1-4"/>
...
...

|-- gradlew                                                               <co xml:id="CO1-5"/>
|-- gradlew.bat
|-- gradle
|   `-- wrapper
|       |-- gradle-wrapper.jar
|       `-- gradle-wrapper.properties
...
...
|-- jpos                                                                  <co xml:id="CO1-6"/>
|   |-- build.gradle
|   |-- src
|   |   |-- main
|   |   |   |-- java
|   |   |-- main
|   |   |   |-- resources
|   |   |-- dist                                                          <co xml:id="CO1-7"/>
|   |   |   |-- bin
|   |   |   |   |-- bsh
|   |   |   |   |-- q2
|   |   |   |   |-- start
|   |   |   |   `-- stop
|   |   |   |-- cfg
|   |   |   |   |-- packager
|   |   |   |   |   |-- base1.xml
|   |   |   |   |   |-- base24-eps.xml
|   |   |   |   |   |-- base24.xml
...
...
|   |   |   |-- deploy
|   |   |   |   |-- 00_logger.xml
|   |   |   |   `-- 99_sysmon.xml
|   |   |   `-- log
|   |   |       `-- q2.log
...
...</screen>
<calloutlist>
<callout arearefs="CO1-1">
<para>Copyright notice</para>
</callout>
<callout arearefs="CO1-2">
<para>Readme file in markdown format shown in the <link xl:href="https://github.com/jpos/jPOS">Github</link> repository</para>
</callout>
<callout arearefs="CO1-3">
<para>Main Gradle configuration file</para>
</callout>
<callout arearefs="CO1-4">
<para>Gradle&#8217;s <literal>settings</literal> file, lists the modules to be compiled, in this case, <literal>jpos</literal> and <literal>compat_1_5_2</literal>.</para>
</callout>
<callout arearefs="CO1-5">
<para>It is recommended that you install Gradle locally, but for a quick build, you can use the Gradle wrapper (<literal>gradlew</literal> in Unix, <literal>gradlew.bat</literal> in Windows).</para>
</callout>
<callout arearefs="CO1-6">
<para>Home for the jPOS module</para>
</callout>
<callout arearefs="CO1-7">
<para>Template for a production distribution directory with its deploy, cfg, bin and log directories</para>
</callout>
</calloutlist>
<screen>|-- compat_1_5_2                                                          <co xml:id="CO2-1"/>
|   |-- build.gradle
|   |-- compat_1_5_2.iml
|   |-- src
|   |   `-- main
|   |       `-- java
|   |           `-- org
|   |               `-- jpos
|   |   |   `-- resources
...
...
|-- legal                                                                 <co xml:id="CO2-2"/>
|   |-- cla-template.txt
|   |-- ccla-template.txt
|-- incoming                                                              <co xml:id="CO2-3"/>
...
...</screen>
<calloutlist>
<callout arearefs="CO2-1">
<para>Backward compatibility with version 1.5.2</para>
</callout>
<callout arearefs="CO2-2">
<para>Legal directory with contributor license agreements</para>
</callout>
<callout arearefs="CO2-3">
<para>Contributed files not yet merged into jPOS. Now with Git and pull requests, this directory will be removed at some point.</para>
</callout>
</calloutlist>
<tip>
<simpara>Unless you&#8217;re dealing with a legacy jPOS system, you probably don&#8217;t want to use
the <literal>compat_1_5_2</literal> module.</simpara>
</tip>
</section>
<section xml:id="_using_jpos">
<title>Using jPOS</title>
<simpara>You don&#8217;t have to build jPOS in order to use it in your projects,
although you are welcome to try and build it (see <xref linkend="building"/>) for
learning purposes or if you want to contribute to the project.</simpara>
<simpara>jPOS produces Maven compatible <literal>poms</literal> and regularly publishes releases
to <link xl:href="http://search.maven.org">Maven Central</link>.</simpara>
<simpara>If you want to use it from Maven, you can add this dependency to your <literal>pom</literal>:</simpara>
<simpara>Here is a sample POM</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;org.jpos&lt;/groupId&gt;
    &lt;artifactId&gt;jpos&lt;/artifactId&gt;
    &lt;version&gt;2.1.4&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
<simpara>or Gradle dependency:</simpara>
<screen linenumbering="unnumbered">org.jpos:jpos:2.1.4</screen>
<tip>
<simpara>The stable release is 2.1.4, development release is 2.1.5-SNAPSHOT.</simpara>
</tip>
<simpara>jPOS uses the following dependency not available in Maven central, so you need to add
the following repository</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="http://download.oracle.com/maven">http://download.oracle.com/maven</link> (required by Berkeley DB Java Edition)</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>We publish SNAPSHOT daily builds (i.e. version 2.1.5-SNAPSHOT) to
the <link xl:href="http://jpos.org/maven">jPOS Maven repository</link> and stable releases to Maven Central.
Please note the <emphasis role="strong">compat_1_5_2</emphasis> module is only published to jPOS Maven repo.</simpara>
</note>
<simpara>if you use Gradle, you can configure:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">repositories {
    mavenCentral()
    maven { url 'http://jpos.org/maven' }
    maven { url 'http://download.oracle.com/maven' }
    mavenLocal()
}

dependencies {
    compile org.jpos:jpos:2.1.4
    testCompile 'junit:junit4.8.2'
}</programlisting>
<tip>
<simpara>If you&#8217;re building a jPOS application, the easiest way is to clone the
<link xl:href="http://github.com/jpos/jPOS-template">jPOS Template</link>
project and take it from there.</simpara>
</tip>
</section>
<section xml:id="building">
<title>Building jPOS</title>
<simpara>jPOS uses <link xl:href="http://www.gradle.org/">Gradle</link> as its build system.
For a quick build, you don&#8217;t even need to install Gradle, you
can use the handy <literal>gradlew</literal> (or <literal>gradlew.bat</literal> if you&#8217;re on Windows)
Gradle <emphasis>wrapper</emphasis> that automatically downloads Gradle for you, but
for daily development, it&#8217;s a good idea to install it locally.</simpara>
<note>
<simpara>Whenever we mention the <literal>gradle</literal> command in this guide, you can
either use your locally installed Gradle, or the <literal>gradlew</literal> wrapper
scripts mentioned above.</simpara>
</note>
<tip>
<simpara>Gradle has the ability to run in background, dramatically reducing
the load time. In order to enable that feature, you can use its
<literal>--daemon</literal> parameter or</simpara>
<screen>export GRADLE_OPTS=-Dorg.gradle.daemon=true</screen>
</tip>
<section xml:id="_available_tasks">
<title>Available tasks</title>
<simpara>Running <literal>gradle tasks</literal> provides a list of available tasks.</simpara>
<simpara>Most of them are standard in the Gradle build system and have self-explanatory
names (i.e. <literal>jar</literal> to build the jPOS jar, <literal>javadoc</literal> to build the javadoc
documentation). A few deserve further explanation, though:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><literal>installApp</literal></emphasis> is a handy task defined in the <literal>jpos</literal> module that can
be used to create a runtime environment inside the <literal>build/installs</literal>
directory. That runtime envirnoment copies all the scripts coming from
the <literal>src/dist</literal> directory and it&#8217;s ready to execute the jPOS system
using the <literal>bin/q2</literal> (or <literal>bin\q2.bat</literal>) scripts. The <literal>installApp</literal> task
is similar to running the <literal>dist</literal> task to create a <literal>tar.gz</literal> tarball
and then extracting that tarball into a local directory, ready to run.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><literal>version</literal></emphasis> can be used to build jPOS and run it to query its own version.</simpara>
</listitem>
</itemizedlist>
<note>
<title>Note about releases</title>
<simpara>jPOS stable releases (non SNAPSHOTS) are signed and published to Maven Central.
If you are trying to build a stable release, you&#8217;d have to hack <literal>build.gradle</literal>
to trick the <literal>isSnapshot</literal> variable to be true, otherwise the build will fail
because you don&#8217;t have the PGP private keys required to sign a build.</simpara>
<simpara>If you&#8217;re making some changes to jPOS off a stable release, you should
change the version number to avoid confusion.</simpara>
<simpara>But remember, you don&#8217;t have to build jPOS in order to use it, just add
it to your <emphasis>pom</emphasis> as a dependency.</simpara>
</note>
<tip>
<title>The <emphasis>clean</emphasis> task is your friend</title>
<simpara>Out of all the available tasks, there&#8217;s one that will keep you out
of trouble: <emphasis role="strong">clean</emphasis>. While Gradle is very smart when it comes to figuring
out which dependencies have been modified and need to be rebuilt, there&#8217;s
nothing like the extra confidence that a good old <literal>clean</literal> gives. When
in doubt, <literal>gradle clean</literal>.</simpara>
</tip>
</section>
</section>
<section xml:id="running">
<title>Running jPOS</title>
<simpara>From the <literal>jpos</literal> directory, run <literal>gradle installApp</literal> to create
a working jPOS in the <literal>build/install/jpos</literal> directory.</simpara>
<simpara>Change directory there and you will see a <literal>jpos-x.x.xjar</literal> (i.e <literal>jpos-1.9.9-SNAPSHOT.jar</literal>).</simpara>
<simpara>You can run the jar using <literal>java -jar jpos-1.9.1-SNAPSHOT.jar</literal> or use
the <literal>bin/q2</literal> or <literal>bin/q2.bat</literal> scripts.</simpara>
<simpara>Once started, the output should look like this:</simpara>
<screen>&lt;log realm="org.jpos.q2.qbean.SystemMonitor" at="2016-08-27T22:26:51.720"&gt;
  &lt;info&gt;
               OS: Linux (3.14.35-28.38.amzn1.x86_64)
     process name: 19213@ip-172-30-0-180
             host: ip-172-30-0-180/52.5.73.144
              cwd: /opt/local/jpos
       free space: 133.3 GiB
     usable space: 123.3 GiB
          version: 2.0.7-SNAPSHOT (bdcac3f)
         instance: b1016676-b840-4fb6-916b-37c4b4355c45
           uptime: 00:00:00.691 (0.460000)
       processors: 2
           drift : 0
    memory(t/u/f): 75/14/60
         encoding: UTF-8
         timezone: Etc/UTC (Coordinated Universal Time) Z
    watch service: sun.nio.fs.LinuxWatchService
            clock: 1472336811 2016-08-27T22:26:51.720Z
     thread count: 10
     peak threads: 10
     user threads: 6
            Thread[Reference Handler,10,system]
            Thread[Finalizer,8,system]
            Thread[Signal Dispatcher,9,system]
            Thread[RMI TCP Accept-0,5,system]
            Thread[pool-1-thread-1,5,main]
            Thread[Q2-b1016676-b840-4fb6-916b-37c4b4355c45,5,main]
            Thread[DestroyJavaVM,5,main]
            Thread[Thread-2,5,main]
            Thread[Timer-0,5,main]
            Thread[SystemMonitor,5,main]
    name-registrar:
      Q2: org.jpos.q2.Q2
      logger.Q2: org.jpos.util.Logger
  &lt;/info&gt;
&lt;/log&gt;</screen>
<simpara>You may want to review the content in the <literal>deploy</literal> directory,
that comes from the <literal>src/dist</literal> source tree.</simpara>
</section>
</chapter>
<chapter xml:id="_about_iso_8583">
<title>About ISO-8583</title>
<section xml:id="iso8583">
<title>An ISO-8583 primer</title>
<simpara>This section contains general information about the ISO-8583 International Standard.</simpara>
<section xml:id="_international_standard_iso_8583">
<title>International standard ISO 8583</title>
<simpara><emphasis role="strong">Financial transaction card-originated messages Interchange message specifications</emphasis>.</simpara>
<simpara>You have to read it, period. And you have to read the correct one
(1987/1993/2003) for your particular interchange.  And you also have to read
your vendor-specific interchange specs as well.</simpara>
<simpara>But while you manage to gather all that information, let&#8217;s have a look at this
brief introduction. When talking about ISO-8583, we have to be aware of the difference between:</simpara>
<itemizedlist>
<listitem>
<simpara>message format (its binary representation),</simpara>
</listitem>
<listitem>
<simpara>wire protocol (how a  message is transmitted over the wire), and</simpara>
</listitem>
<listitem>
<simpara>message flow (e.g., send  request for authorization, wait for response, retransmit, reversal, etc.).</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="iso8583_message_structure">
<title>Message format</title>
<simpara>ISO-8583 messages are composed by fields, which are represented in different ways. Basically we have the following structure:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>ISO-8583 message structure</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="83.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Field #</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0 - MTI</simpara></entry>
<entry align="left" valign="top"><simpara>Message Type Indicator</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1 - Bitmap</simpara></entry>
<entry align="left" valign="top"><simpara>64 (or 128) bits indicating presence/absence of other fields</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2 .. 128</simpara></entry>
<entry align="left" valign="top"><simpara>Other fields as specified in bitmap</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<simpara>The bitmaps are encoded in network byte order, with the most significant bit (leftmost bit) of the first
byte indicating presence of a secondary bitmap. Then, the next bit towards the right indicates presence
of field 2, the next one refers to field 3, and so on.</simpara>
</note>
<simpara>So let&#8217;s have a look at a simple example:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sample 0800 message</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="15.3846*"/>
<colspec colname="col_2" colwidth="38.4615*"/>
<colspec colname="col_3" colwidth="23.0769*"/>
<colspec colname="col_4" colwidth="23.077*"/>
<thead>
<row>
<entry align="left" valign="top">#</entry>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Value</entry>
<entry align="left" valign="top">Hex Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>MTI</simpara></entry>
<entry align="left" valign="top"><simpara>0800</simpara></entry>
<entry align="left" valign="top"><simpara>08 00</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>PRIMARY BITMAP</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates presence of fields 3, 11 and 41</simpara></entry>
<entry align="left" valign="top"><simpara>20 20 00 00 00 80 00 00</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>PROCESSING CODE</simpara></entry>
<entry align="left" valign="top"><simpara>000000</simpara></entry>
<entry align="left" valign="top"><simpara>00 00 00</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>11</simpara></entry>
<entry align="left" valign="top"><simpara>SYSTEM TRACE AUDIT NUMBER</simpara></entry>
<entry align="left" valign="top"><simpara>000001</simpara></entry>
<entry align="left" valign="top"><simpara>00 00 01</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>41</simpara></entry>
<entry align="left" valign="top"><simpara>TERMINAL ID</simpara></entry>
<entry align="left" valign="top"><simpara>29110001</simpara></entry>
<entry align="left" valign="top"><simpara>32 39 31 31 30 30 30 31</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Here is the binary representation of our 0800 message:</simpara>
<screen>   080020200000008000000000000000013239313130303031</screen>
<simpara>In the previous example, 0800 is the  <emphasis role="strong">message type indicator (<emphasis>MTI</emphasis>)</emphasis>;
The first position represents ISO-8583 version number:</simpara>
<itemizedlist>
<listitem>
<simpara>0 for version 1987</simpara>
</listitem>
<listitem>
<simpara>1 for version 1993</simpara>
</listitem>
<listitem>
<simpara>2 for version 2003</simpara>
</listitem>
<listitem>
<simpara>3-7 reserved for ISO use</simpara>
</listitem>
<listitem>
<simpara>8 is reserved for national use</simpara>
</listitem>
<listitem>
<simpara>9 is reserved for private use</simpara>
</listitem>
</itemizedlist>
<simpara>The second position represents <emphasis role="strong">message class</emphasis>:</simpara>
<itemizedlist>
<listitem>
<simpara>0 is reserved for ISO use</simpara>
</listitem>
<listitem>
<simpara>1 authorization</simpara>
</listitem>
<listitem>
<simpara>2 financial</simpara>
</listitem>
<listitem>
<simpara>3 file update</simpara>
</listitem>
<listitem>
<simpara>4 reversals and chargebacks</simpara>
</listitem>
<listitem>
<simpara>5 reconciliation</simpara>
</listitem>
<listitem>
<simpara>6 administrative</simpara>
</listitem>
<listitem>
<simpara>7 fee collection</simpara>
</listitem>
<listitem>
<simpara>8 network management</simpara>
</listitem>
<listitem>
<simpara>9 reserved for ISO use</simpara>
</listitem>
</itemizedlist>
<simpara>The third position is the <emphasis role="strong">message function</emphasis>:</simpara>
<itemizedlist>
<listitem>
<simpara>0 request</simpara>
</listitem>
<listitem>
<simpara>1 request response</simpara>
</listitem>
<listitem>
<simpara>2 advice</simpara>
</listitem>
<listitem>
<simpara>3 advice response</simpara>
</listitem>
<listitem>
<simpara>4 notification</simpara>
</listitem>
<listitem>
<simpara>5-9 reserved for ISO use</simpara>
</listitem>
</itemizedlist>
<simpara>And the last position is used to indicate the <emphasis role="strong">transaction originator</emphasis>:</simpara>
<itemizedlist>
<listitem>
<simpara>0 acquirer</simpara>
</listitem>
<listitem>
<simpara>1 acquirer repeat</simpara>
</listitem>
<listitem>
<simpara>2 card issuer</simpara>
</listitem>
<listitem>
<simpara>3 card issuer repeat</simpara>
</listitem>
<listitem>
<simpara>4 other</simpara>
</listitem>
<listitem>
<simpara>5 other repeat</simpara>
</listitem>
<listitem>
<simpara>6-9 reserved for ISO use</simpara>
</listitem>
</itemizedlist>
<simpara>So "0800" is a <emphasis>version 1987 network management request</emphasis>.</simpara>
<simpara>Next we have field 1, the primary bitmap:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Primary Bitmap</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">byte</entry>
<entry align="left" valign="top">hex value</entry>
<entry align="left" valign="top">bit value</entry>
<entry align="left" valign="top">field #</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>20</simpara></entry>
<entry align="left" valign="top"><simpara>0010 0000</simpara></entry>
<entry align="left" valign="top"><simpara>3</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>20</simpara></entry>
<entry align="left" valign="top"><simpara>0010 0000</simpara></entry>
<entry align="left" valign="top"><simpara>11</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>80</simpara></entry>
<entry align="left" valign="top"><simpara>1000 0000</simpara></entry>
<entry align="left" valign="top"><simpara>41</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>6</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>7</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>So now that we&#8217;ve parsed the MTI (0800) and bitmap (2020000000800000),
we know that fields 3, 11 and 41 are present.
So our next field is number 3.</simpara>
<section xml:id="iso8583_fieldtypes">
<title>ISO-8583 fields</title>
<simpara>There are many field types:</simpara>
<itemizedlist>
<listitem>
<simpara>Fixed length</simpara>
<itemizedlist>
<listitem>
<simpara>Numeric</simpara>
</listitem>
<listitem>
<simpara>Alphanumeric</simpara>
</listitem>
<listitem>
<simpara>Binary</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Variable length with a max length 99</simpara>
<itemizedlist>
<listitem>
<simpara>Numeric</simpara>
</listitem>
<listitem>
<simpara>Alphanumeric</simpara>
</listitem>
<listitem>
<simpara>Binary</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Variable length with a max length 999</simpara>
<itemizedlist>
<listitem>
<simpara>Numeric</simpara>
</listitem>
<listitem>
<simpara>Alphanumeric</simpara>
</listitem>
<listitem>
<simpara>Binary</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Variable length with a max length 9999 (available starting in ISO-8583 version 2003)</simpara>
<itemizedlist>
<listitem>
<simpara>Numeric</simpara>
</listitem>
<listitem>
<simpara>Alphanumeric</simpara>
</listitem>
<listitem>
<simpara>Binary</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Nested message</simpara>
</listitem>
</itemizedlist>
<simpara>So far, so good, this is very simple stuff, isn&#8217;t it?
The problem is not complexity but diversity, ISO-8583 is not specific about how
a given field is represented, so you can have a numeric field represented as a
sequence of ASCII characters, EBCDIC characters, BCD, etc.</simpara>
<simpara>Variable length fields have a prefix specifying its length, but how this is represented
is not defined. Different vendors use different representations (e.g., BCD, EBCDIC,
binary value).</simpara>
<simpara>In our example, field #3 is using a BCD representation in network byte order, so a value of "000000"
is represented with just three bytes whose hex values are "00 00 00".
Same goes for field #11 whose value is "000001" - it is represented as "00 00 01".
In our example, field #41 is an eight-byte alphanumeric field represented as eight ASCII characters</simpara>
<screen>     Message: 08002020 00000080 00000000 00000001
              32393131 30303031

         MTI: 0800
      Bitmap: 20200000 00800000
    Field 03: 000000
    Field 11: 000001
    field 41: 3239313130303031 (ASCII for "29110001")</screen>
<simpara>Let&#8217;s have a look at another sample message:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Another 0800 message</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="13.3333*"/>
<colspec colname="col_2" colwidth="26.6666*"/>
<colspec colname="col_3" colwidth="40*"/>
<colspec colname="col_4" colwidth="20.0001*"/>
<thead>
<row>
<entry align="left" valign="top">#</entry>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Value</entry>
<entry align="left" valign="top">Hex Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>MTI</simpara></entry>
<entry align="left" valign="top"><simpara>0800</simpara></entry>
<entry align="left" valign="top"><simpara><literal>08 00</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1.</simpara></entry>
<entry align="left" valign="top"><simpara>PRIMARY BITMAP</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates presence of secondary bitmap plus fields 3, 11, 41 and 60</simpara></entry>
<entry align="left" valign="top"><simpara><literal>A0 20 00 00 00 80 00 10</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>SECONDARY BITMAP</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates presence of field 70</simpara></entry>
<entry align="left" valign="top"><simpara><literal>04 00 00 00 00 00 00 00</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>PROCESSING CODE</simpara></entry>
<entry align="left" valign="top"><simpara>000000</simpara></entry>
<entry align="left" valign="top"><simpara><literal>00 00 00</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>11</simpara></entry>
<entry align="left" valign="top"><simpara>SYSTEM TRACE AUDIT NUMBER</simpara></entry>
<entry align="left" valign="top"><simpara>000001</simpara></entry>
<entry align="left" valign="top"><simpara><literal>00 00 01</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>41</simpara></entry>
<entry align="left" valign="top"><simpara>TERMINAL ID</simpara></entry>
<entry align="left" valign="top"><simpara>29110001</simpara></entry>
<entry align="left" valign="top"><simpara><literal>32 39 31 31 30 30 30 31</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>60</simpara></entry>
<entry align="left" valign="top"><simpara>RESERVED FOR PRIVATE USE</simpara></entry>
<entry align="left" valign="top"><simpara>jPOS 1.9.1</simpara></entry>
<entry align="left" valign="top"><simpara><literal>00 10 6A 50 4F 53 20 31 2E 39 2E 31</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>70</simpara></entry>
<entry align="left" valign="top"><simpara>NETWORK MANAGEMENT INFORMATION CODE</simpara></entry>
<entry align="left" valign="top"><simpara>301</simpara></entry>
<entry align="left" valign="top"><simpara><literal>03 01</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Two new fields are present: #60 and #70. Here is our message representation:</simpara>
<screen>         Message: 0800A020 00000080 00100400 00000000
                  00000000 00000001 32393131 30303031
                  00106A50 4F532031 2E392E31 0301

             MTI: 0800
  Primary bitmap: A0200000 00800010
Secondary bitmap: 04000000 00000000
        Field 03: 000000
        Field 11: 000001
        Field 41: 3239313130303031 (ASCII for "29110001")
        Field 60: 0010 6A504F5320312E392E31 (length=10, value="jPOS 1.9.1") <co xml:id="CO3-1"/>
        Field 70: 0301</screen>
<calloutlist>
<callout arearefs="CO3-1">
<para>In this example, the length prefix in field 60 is expressed as a 2-byte BCD number; therefore, a length of 10 is encoded as 0010 in hexadecimal.</para>
</callout>
</calloutlist>
<simpara>Let&#8217;s break down this bitmap:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Primary Bitmap</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">byte</entry>
<entry align="left" valign="top">hex value</entry>
<entry align="left" valign="top">bit value</entry>
<entry align="left" valign="top">field #</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>A0</simpara></entry>
<entry align="left" valign="top"><simpara>1010 0000</simpara></entry>
<entry align="left" valign="top"><simpara>secondary bitmap present plus #3</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>20</simpara></entry>
<entry align="left" valign="top"><simpara>0010 0000</simpara></entry>
<entry align="left" valign="top"><simpara>11</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>80</simpara></entry>
<entry align="left" valign="top"><simpara>1000 0000</simpara></entry>
<entry align="left" valign="top"><simpara>41</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>6</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>7</simpara></entry>
<entry align="left" valign="top"><simpara>10</simpara></entry>
<entry align="left" valign="top"><simpara>0001 0000</simpara></entry>
<entry align="left" valign="top"><simpara>60</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="all" rowsep="1" colsep="1">
<title>Secondary Bitmap</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">byte</entry>
<entry align="left" valign="top">hex value</entry>
<entry align="left" valign="top">bit value</entry>
<entry align="left" valign="top">field #</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>04</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0100</simpara></entry>
<entry align="left" valign="top"><simpara>70</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>6</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>7</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>0000 0000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>To make things more complex to developers, different vendors choose different padding
styles when handling odd-length BCD fields. So in order to represent "003" one
vendor may use two bytes with the values <literal>"00 03"</literal> while others may use <literal>"00 30"</literal>
or even <literal>"00 3F"</literal>.</simpara>
<simpara>Same goes for variable-length fields: field length as well as field values can
be padded to the left or to the right (that&#8217;s not defined by ISO-8583, it&#8217;s
just a matter of fact of different implementations).</simpara>
<simpara>Then we have nested fields - some implementations use "reserved for private
use" fields to carry other ISO-8583 messages. These messages are usually packed
as variable-length binary fields as seen by the outer message.</simpara>
<tip>
<simpara>You will see that jPOS handles this problem in a very simple way so you
don&#8217;t have to worry about this low-level stuff.</simpara>
</tip>
</section>
</section>
<section xml:id="iso8583_wire_protocol">
<title>Wire protocol</title>
<simpara>Once we have a binary representation of a given ISO-8583 message, we have to
transmit it over the wire using some communication protocol (e.g., TCP/IP,
UDP, X.25, SDLC, SNA, ASYNC, QTP, SSL, HTTP, you name it).</simpara>
<simpara>That communication protocol is not part of the ISO-8583 standard, so different
vendors have chosen different protocols.</simpara>
<simpara>Many implementations (especially the older ones) require support for some kind
of routing information (e.g., a CICS transaction name), so they use different sorts
of <literal>headers</literal>.</simpara>
<simpara>A few of them (especially stream-based ones) require some kind of trailers as well.</simpara>
<simpara>So, the wire protocol is composed by:</simpara>
<itemizedlist>
<listitem>
<simpara>An optional header / message boundary delimiter</simpara>
</listitem>
<listitem>
<simpara>ISO-8583 message data</simpara>
</listitem>
<listitem>
<simpara>An optional trailer (sometimes used as a message boundary delimiter)</simpara>
</listitem>
</itemizedlist>
<simpara>A TCP/IP-based implementation may use a couple of bytes to indicate message
length, so our 0800 example described earlier would be sent as:</simpara>
<screen>  00 46 08 00 A0 20 00 00  00 80 00 10 04 00 00 00
  00 00 00 00 00 00 00 00  00 01 32 39 31 31 30 30
  30 31 00 10 6A 50 4F 53  20 31 2E 34 2E 31 03 01</screen>
<simpara>0046 being the message length expressed in network byte order.</simpara>
<simpara>But this is just one way of specifying message length. Other implementations may choose to send
four ASCII bytes, e.g.:</simpara>
<screen>  30 30 34 36 08 00 A0 20  00 00 00 80 00 10 04 00
  00 00 00 00 00 00 00 00  00 00 00 01 32 39 31 31
  30 30 30 31 00 10 6A 50  4F 53 20 31 2E 34 2E 31
  03 01</screen>
<simpara><literal>30 30 34 36</literal> being the ASCII representation of "0046".</simpara>
<note>
<simpara>Some implementations count the size of the message length indicator&#8201;&#8212;&#8201;in the
previous example the four bytes "0046"&#8201;&#8212;&#8201;so instead of sending "0046" they would
send "0050".</simpara>
</note>
<simpara>A few of them perform odd things with those headers, flagging rejected messages
(e.g., you send a 0100 and instead of receiving a 0110 with a suitable response
code you get back your own 0100 with some proprietary flag in the header
indicating for example a temporarily failure such as destination unreachable).</simpara>
<tip>
<simpara>It&#8217;s very important to read your interchange specification(s)
as early as possible during your development.</simpara>
</tip>
<simpara>jPOS deals with the wire protocol by using a set of classes called
<emphasis role="strong">channels</emphasis> that implement the
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/iso/ISOChannel.html">ISOChannel</link> interface
that hides the wire protocol details.</simpara>
</section>
<section xml:id="iso8583_message_flow">
<title>Message flow</title>
<simpara>Message flow will vary depending on your particular interchange specification.
But let&#8217;s have a look at a simple example:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sample authorization</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Time</entry>
<entry align="left" valign="top">Acquirer</entry>
<entry align="left" valign="top">Issuer</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>t<subscript>0</subscript></simpara></entry>
<entry align="left" valign="top"><simpara>0100 --&gt;</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>authorization request</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>t<subscript>1</subscript></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>&lt;-- 0110</simpara></entry>
<entry align="left" valign="top"><simpara>authorization response</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>While this is the typical case (you send a request, you get a response),
sometimes there are temporary failures, and you don&#8217;t get a response.  You have
to reverse the previously transmitted transaction and then either retry your
authorization request, abort that transaction or get an authorization approval
by other means (e.g., by phone) and send an advice.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Authorization timeout</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Time</entry>
<entry align="left" valign="top">Acquirer</entry>
<entry align="left" valign="top">Issuer</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>t<subscript>0</subscript></simpara></entry>
<entry align="left" valign="top"><simpara>0100 --&gt;</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>authorization request</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>t<subscript>1</subscript></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>no response</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>t<subscript>2</subscript></simpara></entry>
<entry align="left" valign="top"><simpara>0400 --&gt;</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>reverse previous authorization</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>t<subscript>3</subscript></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>&lt;-- 0410</simpara></entry>
<entry align="left" valign="top"><simpara>reverse received</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>t<subscript>4</subscript></simpara></entry>
<entry align="left" valign="top"><simpara>0120 --&gt;</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>authorization advice</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>t<subscript>5</subscript></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>&lt;-- 0130</simpara></entry>
<entry align="left" valign="top"><simpara>advice received</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Depending on your particular implementation, you may be able to send
retransmissions as well (e.g., 0101 after an unanswered 0100). Some
implementations use private messages (e.g., 9600)  to request extended time to
process a transaction. So you can see  it is very important to become familiar
with your interchange specifications and its expected message flow as early
as possible.</simpara>
<simpara>jPOS provides tools to deal with message structure, wire protocol and message
flow, but it&#8217;s the responsibility of your higher-level application to interface
the message flow  with your business logic.</simpara>
<simpara>A real example may help you get the idea of what kind of information is
exchanged during an authorization request and response. See below:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sample authorization request</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="8.3333*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="33.3333*"/>
<colspec colname="col_4" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Fld #</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Value</entry>
<entry align="left" valign="top">Comments</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>MTI</simpara></entry>
<entry align="left" valign="top"><simpara>0100</simpara></entry>
<entry align="left" valign="top"><simpara>Authorization request</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>Primary Account Number</simpara></entry>
<entry align="left" valign="top"><simpara>4321123443211234</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>Processing Code</simpara></entry>
<entry align="left" valign="top"><simpara>000000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>Amount transaction</simpara></entry>
<entry align="left" valign="top"><simpara>000000012300</simpara></entry>
<entry align="left" valign="top"><simpara>e.g., 123.00</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>7</simpara></entry>
<entry align="left" valign="top"><simpara>Transmission data/time</simpara></entry>
<entry align="left" valign="top"><simpara>0304054133</simpara></entry>
<entry align="left" valign="top"><simpara>MMYYHHMMSS</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>11</simpara></entry>
<entry align="left" valign="top"><simpara>System trace audit number</simpara></entry>
<entry align="left" valign="top"><simpara>001205</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>14</simpara></entry>
<entry align="left" valign="top"><simpara>Expiration date</simpara></entry>
<entry align="left" valign="top"><simpara>0205</simpara></entry>
<entry align="left" valign="top"><simpara>YYMM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>18</simpara></entry>
<entry align="left" valign="top"><simpara>Merchant Type</simpara></entry>
<entry align="left" valign="top"><simpara>5399</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>22</simpara></entry>
<entry align="left" valign="top"><simpara>POS Entry Mode</simpara></entry>
<entry align="left" valign="top"><simpara>022</simpara></entry>
<entry align="left" valign="top"><simpara>Swiped Card</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>25</simpara></entry>
<entry align="left" valign="top"><simpara>POS Condition Code</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>35</simpara></entry>
<entry align="left" valign="top"><simpara>Track 2</simpara></entry>
<entry align="left" valign="top"><simpara>4321123443211234=0205..</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>37</simpara></entry>
<entry align="left" valign="top"><simpara>Retrieval Reference Number</simpara></entry>
<entry align="left" valign="top"><simpara>206305000014</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>41</simpara></entry>
<entry align="left" valign="top"><simpara>Terminal ID</simpara></entry>
<entry align="left" valign="top"><simpara>29110001</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>42</simpara></entry>
<entry align="left" valign="top"><simpara>Merchant ID</simpara></entry>
<entry align="left" valign="top"><simpara>1001001</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>49</simpara></entry>
<entry align="left" valign="top"><simpara>Currency</simpara></entry>
<entry align="left" valign="top"><simpara>840</simpara></entry>
<entry align="left" valign="top"><simpara>US Dollars</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="all" rowsep="1" colsep="1">
<title>Sample authorization response</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="8.3333*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="33.3333*"/>
<colspec colname="col_4" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Fld #</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Value</entry>
<entry align="left" valign="top">Comments</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>MTI</simpara></entry>
<entry align="left" valign="top"><simpara>0110</simpara></entry>
<entry align="left" valign="top"><simpara>Authorization response</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>Primary Account Number</simpara></entry>
<entry align="left" valign="top"><simpara>4321123443211234</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>Processing Code</simpara></entry>
<entry align="left" valign="top"><simpara>000000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>Amount transaction</simpara></entry>
<entry align="left" valign="top"><simpara>000000012300</simpara></entry>
<entry align="left" valign="top"><simpara>e.g., 123.00</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>7</simpara></entry>
<entry align="left" valign="top"><simpara>Transmission data/time</simpara></entry>
<entry align="left" valign="top"><simpara>0304054133</simpara></entry>
<entry align="left" valign="top"><simpara>MMYYHHMMSS</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>11</simpara></entry>
<entry align="left" valign="top"><simpara>System trace audit number</simpara></entry>
<entry align="left" valign="top"><simpara>001205</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>14</simpara></entry>
<entry align="left" valign="top"><simpara>Expiration date</simpara></entry>
<entry align="left" valign="top"><simpara>0205</simpara></entry>
<entry align="left" valign="top"><simpara>YYMM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>18</simpara></entry>
<entry align="left" valign="top"><simpara>Merchant Type</simpara></entry>
<entry align="left" valign="top"><simpara>5399</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>22</simpara></entry>
<entry align="left" valign="top"><simpara>POS Entry Mode</simpara></entry>
<entry align="left" valign="top"><simpara>022</simpara></entry>
<entry align="left" valign="top"><simpara>Swiped Card</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>25</simpara></entry>
<entry align="left" valign="top"><simpara>POS Condition Code</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>35</simpara></entry>
<entry align="left" valign="top"><simpara>Track 2</simpara></entry>
<entry align="left" valign="top"><simpara>4321123443211234=0205..</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>37</simpara></entry>
<entry align="left" valign="top"><simpara>Retrieval Reference Number</simpara></entry>
<entry align="left" valign="top"><simpara>206305000014</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>38</simpara></entry>
<entry align="left" valign="top"><simpara>Authorization number</simpara></entry>
<entry align="left" valign="top"><simpara>010305</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>39</simpara></entry>
<entry align="left" valign="top"><simpara>Response code</simpara></entry>
<entry align="left" valign="top"><simpara>00</simpara></entry>
<entry align="left" valign="top"><simpara>Approved</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>41</simpara></entry>
<entry align="left" valign="top"><simpara>Terminal ID</simpara></entry>
<entry align="left" valign="top"><simpara>29110001</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>42</simpara></entry>
<entry align="left" valign="top"><simpara>Merchant ID</simpara></entry>
<entry align="left" valign="top"><simpara>1001001</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>49</simpara></entry>
<entry align="left" valign="top"><simpara>Currency</simpara></entry>
<entry align="left" valign="top"><simpara>840</simpara></entry>
<entry align="left" valign="top"><simpara>US Dollars</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="jposiso">
<title>jPOS approach to ISO-8583</title>
<simpara>This chapter describes how jPOS handles ISO-8583 messages.</simpara>
<section xml:id="_isomsg_co">
<title>ISOMsg &amp; Co.</title>
<simpara>jPOS' internal representation of an ISO-8583 message is usually an ISOMsg
object (or an ISOMsg&#8217;s subclass).</simpara>
<simpara>The ISOMsg class uses the <emphasis role="strong">Composite pattern</emphasis> (see
Design Patterns, elements of Reusable Object-Oriented Software
by Gamma, Helm, Johnson and Vlissides).</simpara>
<simpara>ISOMsg, ISOField, ISOBitMapField, ISOBinaryField and any custom field type
that you may implement are subclasses of ISOComponent.  Let&#8217;s have a look at
ISOComponent&#8217;s methods:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public abstract class ISOComponent implements Cloneable {
        public void set (ISOComponent c) throws ISOException;
        public void unset (int fldno) throws ISOException;
        public ISOComponent getComposite();
        public Object getKey() throws ISOException;
        public Object getValue() throws ISOException;
        public byte[] getBytes() throws ISOException;
        public int getMaxField();
        public Hashtable getChildren();
        public abstract void setFieldNumber (int fieldNumber);
        public abstract void setValue(Object obj) throws ISOException;
        public abstract byte[] pack() throws ISOException;
        public abstract int unpack(byte[] b) throws ISOException;
        public abstract void dump (PrintStream p, String indent);
        public abstract void pack (OutputStream out) throws IOException, ISOException;
        public abstract void unpack (InputStream in) throws IOException, ISOException;
    }</programlisting>
<simpara>This approach has proven to be really useful and maps quite well to the
ISO-8583 message structure.</simpara>
<simpara>There are many situations where some methods are not applicable (i.e.,
getChildren() has no meaning in a leaf field, same goes for methods such as
getMaxField()), but as a general rule, using the same super-class for ISOMsg
and ISOFields has proven to be a good thing. You can easily assign an ISOMsg as
a field of an outer ISOMsg.</simpara>
<simpara>The following diagram shows how some ISOComponents interact with each other.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/isomsg.jpg" contentwidth="400px"/>
</imageobject>
<textobject><phrase>ISOMsg</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The following code can be used to create an internal representation of our 0800
message (described in <link linkend="iso8583">An ISO-8583 primer</link>).</simpara>
<programlisting language="java" linenumbering="unnumbered">   import org.jpos.iso.*;

   ISOMsg m = new ISOMsg();
   m.set (new ISOField (0, "0800"));
   m.set (new ISOField (3, "000000"));
   m.set (new ISOField (11, "000001"));
   m.set (new ISOField (41, "29110001"));
   m.set (new ISOField (60, "jPOS 6"));
   m.set (new ISOField (70, "301"));</programlisting>
<simpara>We are just calling <literal>ISOComponent.set (ISOComponent)</literal> method.</simpara>
<simpara>In order to reduce typing and improve code readability, ISOMsg provides some
handy methods such as</simpara>
<programlisting language="java" linenumbering="unnumbered">ISOMsg.setMTI (String)</programlisting>
<literallayout class="monospaced">and</literallayout>
<programlisting language="java" linenumbering="unnumbered">ISOMsg.set (int fieldNumber, String fieldValue)</programlisting>
<simpara>implemented like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public void set (int fldno, String value) throws ISOException {
        set (new ISOField (fldno, value));
    }
    public void setMTI (String mti) throws ISOException {
	if (isInner())
	    throw new ISOException ("can't setMTI on inner message");
	set (new ISOField (0, mti));
    }</programlisting>
<simpara>So the previous example can be written like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    ISOMsg m = new ISOMsg();
    m.setMTI ("0800");
    m.set (3, "000000");
    m.set (11, "000001");
    m.set (41, "29110001");
    m.set (60, "jPOS 6");
    m.set (70, "301");</programlisting>
<tip>
<simpara>ISOMsg is one of the most used classes in typical ISO-8583-based jPOS applications.
While you can subclass it, you probably won&#8217;t have to. If there&#8217;s a single class in
all jPOS that you want to study in great detail, this is it.</simpara>
<simpara>We recommend you to have a look at its
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/iso/ISOMsg.html">API documentation </link>
and play with its helper methods such as clone, merge, unset, etc.</simpara>
</tip>
</section>
<section xml:id="_packing_and_unpacking">
<title>Packing and unpacking</title>
<simpara>ISOComponents have two useful methods called:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public abstract byte[] pack() throws ISOException;
    public abstract int unpack(byte[] b) throws ISOException;</programlisting>
<simpara><literal>pack</literal> returns a <literal>byte[]</literal> containing the binary representation of a given
component (can be just a field or the whole ISOMsg);
<literal>unpack</literal> does the opposite and also returns the number of consumed
bytes.</simpara>
<simpara>jPOS uses a <emphasis role="strong">Peer pattern</emphasis> that allows a given ISOComponent to be packed and unpacked
by a peer class, <emphasis>plugged</emphasis> at runtime.</simpara>
<simpara>You use</simpara>
<programlisting language="java" linenumbering="unnumbered">    public void setPackager (ISOPackager p);</programlisting>
<simpara>in order to assign a packager to a given <literal>ISOMsg</literal>, e.g.:</simpara>
<programlisting language="java" linenumbering="unnumbered">   ISOPackager customPackager = MyCustomPackager ();
   ISOMsg m = new ISOMsg();
   m.setMTI ("0800");
   m.set (3, "000000");
   m.set (11, "000001");
   m.set (41, "29110001");
   m.set (60, "jPOS 6");
   m.set (70, "301");
   m.setPackager (customPackager);
   byte[] binaryImage = m.pack();</programlisting>
<simpara>In order to unpack this <literal>binaryImage</literal> you may write code like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">   ISOPackager customPackager = MyCustomPackager ();
   ISOMsg m = new ISOMsg();
   m.setPackager (customPackager);
   m.unpack (binaryImage);</programlisting>
<simpara>It is very easy to create protocol converters using jPOS, e.g.:</simpara>
<programlisting language="java" linenumbering="unnumbered">   ISOPackager packagerA = MyCustomPackagerA ();
   ISOPackager packagerB = MyCustomPackagerB ();
   ISOMsg m = new ISOMsg();
   m.setPackager (packagerA);
   m.unpack (binaryImage);
   m.setPackager (packagerB);
   byte[] convertedBinaryImage = m.pack();</programlisting>
<simpara><literal>ISOMsg.pack()</literal> delegates message packing/unpacking operations
to its underlying "peer" ISOPackager. The code looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public byte[] pack() throws ISOException {
        synchronized (this) {
            recalcBitMap();
            return packager.pack(this);
        }
    }</programlisting>
<simpara><literal>packager.pack(ISOComponent)</literal> also delegates its packing/unpacking duties to an
underlying <literal>ISOFieldPackager</literal>. There are <literal>ISOFieldPackager</literal> implementations for many
different ways of representing a field. It is very easy to create your own, if required.</simpara>
<simpara>The following code is used by an <literal>ISOFieldPackager</literal> implementation to pack and unpack
fixed-length alphanumeric fields:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public byte[] pack (ISOComponent c) throws ISOException {
        String s = (String) c.getValue();
        if (s.length() &gt; getLength())
            s = s.substring(0, getLength());
        return (ISOUtil.strpad (s, getLength())).getBytes();
    }
    public int unpack (ISOComponent c, byte[] b, int offset)
        throws ISOException
    {
        c.setValue(new String(b, offset, getLength()));
        return getLength();
    }</programlisting>
<simpara>jPOS comes with many <literal>ISOFieldPackager</literal> implementations so you&#8217;ll probably
never have to write your own. Names chosen are somewhat cryptic, though.</simpara>
<note>
<simpara>Many people are using them for their own custom packagers so we&#8217;ll probably
have to live with those names for a while.</simpara>
</note>
<simpara>As a general rule, all <literal>ISOFieldPackagers</literal> live under package <literal>org.jpos.iso</literal>
and start with the name <emphasis role="strong"><literal>IF</literal></emphasis> which stands for "ISO Field", but that&#8217;s just
an arbitrary naming convention. You can name and place your own ISOFieldPackager
implementations at your will.</simpara>
<simpara>So we have things like this:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>ISOFieldPackagers</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="66.6667*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Purpose</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>IF_CHAR</simpara></entry>
<entry align="left" valign="top"><simpara>Fixed length alphanumeric (ASCII)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IFE_CHAR</simpara></entry>
<entry align="left" valign="top"><simpara>Fixed length alphanumeric (EBCDIC)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IFA_NUMERIC</simpara></entry>
<entry align="left" valign="top"><simpara>Fixed length numeric (ASCII)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IFE_NUMERIC</simpara></entry>
<entry align="left" valign="top"><simpara>Fixed length numeric (EBCDIC)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IFB_NUMERIC</simpara></entry>
<entry align="left" valign="top"><simpara>Fixed length numeric (BCD)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IFB_LLNUM</simpara></entry>
<entry align="left" valign="top"><simpara>Variable length numeric (BCD, maxlength=99)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IFB_LLLNUM</simpara></entry>
<entry align="left" valign="top"><simpara>Variable length numeric (BCD, maxlength=999)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IFB_LLLLNUM</simpara></entry>
<entry align="left" valign="top"><simpara>Variable length numeric (BCD, maxlength=9999)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>&#8230;&#8203;</simpara></entry>
<entry align="left" valign="top"><simpara>&#8230;&#8203;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>&#8230;&#8203;</simpara></entry>
<entry align="left" valign="top"><simpara>&#8230;&#8203;</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="_creating_custom_packagers">
<title>Creating custom packagers</title>
<simpara>jPOS provides the ability to create customized packagers for different kind of
ISO-8583 implementations. Over the last few years, several developers have
contributed their customized ISOPackagers and ISOFieldPackagers, so chances are
good that you can find an implementation suitable for you, or something very
close to what you need as part of jPOS distribution.</simpara>
<tip>
<simpara>Before writing your own packager, have a look at the classes under
<literal>jpos/src/main/java/org/jpos/iso/packager</literal> directory.</simpara>
</tip>
<simpara>Writing a packager is very easy. There&#8217;s a support class called ISOBasePackager
that you can easily extend, e.g.:</simpara>
<screen>public class ISO93APackager extends ISOBasePackager {
    protected ISOFieldPackager fld[] = {
    /*000*/ new IFA_NUMERIC (  4, "Message Type Indicator"),
    /*001*/ new IFA_BITMAP  ( 16, "Bitmap"),
    /*002*/ new IFA_LLNUM   ( 19, "Primary Account number"),
    /*003*/ new IFA_NUMERIC (  6, "Processing Code"),
    /*004*/ new IFA_NUMERIC ( 12, "Amount, Transaction"),
    /*005*/ new IFA_NUMERIC ( 12, "Amount, Reconciliation"),
    ...
    ...
    ...
    public ISO93APackager() {
        super();
        setFieldPackager(fld);
    }
}</screen>
<simpara>So the programmer&#8217;s task (BTW, an easy but boring one) is to verify that  every
single field in your packager configuration matches your interchange
specifications.</simpara>
<simpara>An ISOPackager is not required to extend the supporting class ISOBasePackager,
but we&#8217;ve found it quite convenient for most situations.</simpara>
<tip>
<simpara>while you write your own packager implementation, we recommend you to write a
unit test for it. Have a look at the <literal>jpos/src/test/java/org/jpos/iso/&#8230;&#8203;</literal> directory
to find some sample unit tests that can be used as a starting point.</simpara>
</tip>
<simpara>After adding several packagers to our repository, jPOS developer Eoin Flood
came up with a good idea: a <emphasis>GenericPackager</emphasis>  that one could configure by
means of an XML file. The GenericPackager configuration looks like this:</simpara>
<screen>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE isopackager PUBLIC
        "-//jPOS/jPOS Generic Packager DTD 1.0//EN"
        "http://jpos.org/dtd/generic-packager-1.0.dtd"&gt;

&lt;!-- ISO 8583:1993 (ASCII) field descriptions for GenericPackager --&gt;

&lt;isopackager&gt;
  &lt;isofield
      id="0"
      length="4"
      name="Message Type Indicator"
      class="org.jpos.iso.IFA_NUMERIC"/&gt;
  &lt;isofield
      id="1"
      length="16"
      name="Bitmap"
      class="org.jpos.iso.IFA_BITMAP"/&gt;
  &lt;isofield
      id="2"
      length="19"
      name="Primary Account number"
      class="org.jpos.iso.IFA_LLNUM"/&gt;
  &lt;isofield
      id="3"
      length="6"
      name="Processing Code"
      class="org.jpos.iso.IFA_NUMERIC"/&gt;
  &lt;isofield
      id="4"
      length="12"
      name="Amount, Transaction"
      class="org.jpos.iso.IFA_NUMERIC"/&gt;
  &lt;isofield
      id="5"
      length="12"
      name="Amount, Reconciliation"
      class="org.jpos.iso.IFA_NUMERIC"/&gt;
  &lt;isofield
      id="6"
      length="12"
      name="Amount, Cardholder billing"
      class="org.jpos.iso.IFA_NUMERIC"/&gt;
      ...
      ...
      ...
&lt;/isopackager&gt;</screen>
<simpara>We now have XML configurations for most packagers under the
<literal>org.jpos.iso.packager</literal> package. They are available in the
<literal>jpos/src/main/resources/packager</literal> directory.</simpara>
<tip>
<simpara>If you are to develop a custom packager, we encourage you to use
GenericPackager with a suitable custom configuration file instead.
It will greately simplify your task.</simpara>
<simpara>If you&#8217;re using Q2 to configure your packagers, GenericPackager
uses the "packager-config" property in order to determine its
configuration file.</simpara>
<simpara>The XML based packager configuration can be either placed
in the operating system or inside a jar within the classpath,
GenericPackager has the ability to read it as a resource.</simpara>
</tip>
<note>
<simpara>If you need support for nested messages, you may want to have
a look at <literal>jpos/src/main/resources/org/jpos/iso/packager/genericpackager.dtd</literal>
as well as examples such as <literal>jpos/src/dist/cfg/packager/base1.xml</literal>
(see field 127).</simpara>
</note>
</section>
<section xml:id="_managing_the_wire_protocol_with_isochannel">
<title>Managing the wire protocol with ISOChannel</title>
<simpara>jPOS uses an interface called <literal>ISOChannel</literal> to encapsulate wire protocol details.</simpara>
<simpara><literal>ISOChannel</literal> is used to send and receive <literal>ISOMsg</literal> objects. It leverages the <emphasis role="strong">peer
pattern</emphasis>  where its <emphasis>peer</emphasis> is an <literal>ISOPackager</literal> instance. It has <literal>send</literal> and <literal>receive</literal>
methods as well as means to <literal>set</literal> and <literal>get</literal> a peer packager:</simpara>
<programlisting language="java" linenumbering="unnumbered">    ...
    public void send (ISOMsg m) throws IOException, ISOException;
    public ISOMsg receive() throws IOException, ISOException;
    public void setPackager(ISOPackager p);
    public ISOPackager getPackager();
    ...</programlisting>
<simpara>Although not meaningful under all possible situations, <literal>ISOChannel</literal> has a few
connection-related methods as well:</simpara>
<programlisting language="java" linenumbering="unnumbered">    ...
    public void connect () throws IOException;
    public void disconnect () throws IOException;
    public void reconnect() throws IOException;
    public void setUsable(boolean b);
    public boolean isConnected();
    ...</programlisting>
<simpara>In order for applications to bind jPOS components at runtime, there&#8217;s a
Singleton class called <literal>org.jpos.util.NameRegistrar</literal> where you
can register and get references to Objects. The ISOChannel interface provides
handy methods to access ISOChannels at runtime by their name.</simpara>
<programlisting language="java" linenumbering="unnumbered">    ...
    public void setName (String name);
    public String getName();
    ...</programlisting>
<simpara>ISOChannel extends ISOSource which reads like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface ISOSource {
        public void send (ISOMsg m)
            throws IOException, ISOException, VetoException;
        public boolean isConnected();
    }</programlisting>
<simpara>Different interchanges use different wire protocols. jPOS encapsulates that
functionality in completely isolated ISOChannel implementations. It comes with
many implementations and it&#8217;s easy to write your own, perhaps taking advantage
of the <literal>BaseChannel</literal> as a super class.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sample ISOChannel implementations</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="66.6667*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>ASCIIChannel</simpara></entry>
<entry align="left" valign="top"><simpara>4 bytes message length plus ISO-8583 data</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LogChannel</simpara></entry>
<entry align="left" valign="top"><simpara>Can be used to read jPOS&#8217;s logs and inject messages into other channels</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LoopbackChannel</simpara></entry>
<entry align="left" valign="top"><simpara>Every message sent gets received (possibly applying filters).
 Very useful for testing purposes.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PADChannel</simpara></entry>
<entry align="left" valign="top"><simpara>Used to connect to X.25 packet assembler/dissamblers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>XMLChannel</simpara></entry>
<entry align="left" valign="top"><simpara>jPOS Internal XML representation for ISO-8583 messages</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>&#8230;&#8203;</simpara></entry>
<entry align="left" valign="top"><simpara>&#8230;&#8203;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>&#8230;&#8203;</simpara></entry>
<entry align="left" valign="top"><simpara>&#8230;&#8203;</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<simpara>(see <literal>org.jpos.iso.channel.\*</literal> for a complete list)</simpara>
</tip>
<note>
<simpara>Out of all channel implementations, PADChannel deserves a special note.
Most TCP/IP based ISO-8583 wire protocol implementations use some kind
of indicator to easily detect message bounderies. Most of them use a
packet length header so the receiving implementation can tell apart
a given ISO-8583 packet from the next one.</simpara>
<simpara>On the other hand, implementations that do not use any message boundary
indicator are typically migrations from older packet-based networks such as
X.25 and assume that a given ISO-8583 packet will come in a single TCP/IP
packet, which is <emphasis role="strong">absolutely wrong</emphasis>. Intermediate networks may split packets
(depending on the MTUs involved) or join packets on retransmissions.</simpara>
<simpara>PADChannel use no message boundary indicator, it reads the ISO-8583 message
on-the-fly. It does the right thing. Unfortunately, unless you have another
PADChannel on the other endpoint, you&#8217;ll probably have to deal with the problem
mentioned in the previous paragraph.</simpara>
</note>
<example>
<title>ISOChannel example</title>
<programlisting language="java" linenumbering="unnumbered">    import org.jpos.iso.*;
    import org.jpos.util.*;
    import org.jpos.iso.channel.*;
    import org.jpos.iso.packager.*;

    public class Test {
        public static void main (String[] args) throws Exception {
            Logger logger = new Logger();
            logger.addListener (new SimpleLogListener (System.out));
            ISOChannel channel = new ASCIIChannel (
                "localhost", 7, new ISO87APackager()
            );
            ((LogSource)channel).setLogger (logger, "test-channel");
            channel.connect ();

            ISOMsg m = new ISOMsg ();
            m.setMTI ("0800");
            m.set (3, "000000");
            m.set (41, "00000001");
            m.set (70, "301");
            channel.send (m);
            ISOMsg r = channel.receive ();
            channel.disconnect ();
        }
    }</programlisting>
</example>
<tip>
<simpara>While we&#8217;ll see many examples similar to the previous one throughout this
document, where a simple main() method takes care of instantiating and
configuring several jPOS components, later we&#8217;ll introduce <emphasis role="strong">Q2</emphasis>, jPOS&#8217;s
component assembler. We <emphasis role="strong">strongly recommend</emphasis> to use Q2 to run
jPOS. It will make your life easier.</simpara>
<simpara>Q2 lets you define your jPOS-based application in a very simple, easy to create
and easy to maintain set of XML configuration files.</simpara>
<simpara>We recommend that you wait until we talk about Q2 before diving into coding
your own jPOS-based application. Using code like the previous example is good
to learn jPOS but not to run it in a production environment.</simpara>
<simpara>In addition, you usually don&#8217;t deal directly with a channel using its <literal>send</literal>
and <literal>receive</literal> methods. You typically interact with it via a multiplexer (<literal>MUX</literal>)
or a server (<literal>ISOServer</literal>).</simpara>
</tip>
<simpara>If you have a look at the ISOChannel implementations (most of them live in
org.jpos.iso.channel package) you&#8217;ll notice that many of them extend
<literal>org.jpos.iso.BaseChannel</literal>.</simpara>
<simpara>BaseChannel is an abstract class that provides hooks and default
implementations for several methods that are useful when writing custom
channels. While you don&#8217;t necesarily have to extend BaseChannel to write a
custom channel, you&#8217;ll probably find it very useful.</simpara>
<simpara>Depending on your wire protocol, you&#8217;ll probably only need to extend
BaseChannel and just override a few methods, e.g.:</simpara>
<programlisting language="java" linenumbering="unnumbered">   protected void sendMessageLength(int len) throws IOException;
   protected int getMessageLength() throws IOException, ISOException;</programlisting>
<simpara>(see jpos/src/main/java/org/jpos/iso/channel/CSChannel.java for an example).</simpara>
<simpara>You may also want to have a look at the LoopbackChannel implementation for an
example of an ISOChannel that doesn&#8217;t extend BaseChannel.</simpara>
<section xml:id="isofilter">
<title>Filtered Channels</title>
<simpara>Many ISOChannels implement <literal>FilteredChannel</literal> which looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface FilteredChannel extends ISOChannel {
        public void addIncomingFilter (ISOFilter filter);
        public void addOutgoingFilter (ISOFilter filter);
        public void addFilter (ISOFilter filter);
        public void removeFilter (ISOFilter filter);
        public void removeIncomingFilter (ISOFilter filter);
        public void removeOutgoingFilter (ISOFilter filter);
        public Collection getIncomingFilters();
        public Collection getOutgoingFilters();
        public void setIncomingFilters (Collection filters);
        public void setOutgoingFilters (Collection filters);
    }</programlisting>
<simpara>The <literal>ISOFilter</literal> interface is very simple as well:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface ISOFilter {
        public ISOMsg filter (ISOChannel channel, ISOMsg m, LogEvent evt)
            throws VetoException;
        }
    }</programlisting>
<simpara>Whenever you add a filter (be it incoming, outgoing, or both) to a
FilteredChannel, all messages sent or received by that channel are passed
through that filter.</simpara>
<simpara>Filters give you the opportunity to stop a given message from being sent or
received by that channel, by throwing an ISOFilter.VetoException.</simpara>
<simpara>Let&#8217;s have a look at a very simple filter, DelayFilter:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public class DelayFilter implements ISOFilter, ReConfigurable {
        long delay;
        public DelayFilter() {
            super();
            delay = 0L;
        }
       /**
        * @param delay desired delay, expressed in milliseconds
        */
        public DelayFilter(long delay) {
            super();
            this.delay = delay;
        }
        public void setConfiguration (Configuration cfg) {
            delay = cfg.getInt ("delay");
        }
        public ISOMsg filter (ISOChannel channel, ISOMsg m, LogEvent evt)
        {
            evt.addMessage ("&lt;delay-filter delay=\""+delay+"\"/&gt;");
            if (delay &gt; 0L)
                ISOUtil.sleep(delay);
            return m;
        }
    }</programlisting>
<simpara>DelayFilter simply applies a given delay to all traffic being sent or received
by a given channel. It can be used to simulate remote host delays, a good tool
for testing purposes.</simpara>
<simpara>But the filter method has the ability to modify the <literal>ISOMsg</literal> object or to
just replace it with a new one. A handy <literal>LogEvent</literal> is provided for log/audit
purposes.</simpara>
<tip>
<simpara>The previous code introduces a few classes and interfaces, namely
<literal>Configuration</literal>, <literal>LogEvent</literal>. We&#8217;ll talk about these
important parts of jPOS soon.</simpara>
</tip>
<simpara>jPOS comes with many general purpose filters:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>MD5Filter</literal> can be used to authenticate messages;</simpara>
</listitem>
<listitem>
<simpara><literal>MacroFilter</literal> can be used  to expand internal variables and sequencers; and</simpara>
</listitem>
<listitem>
<simpara><literal>XSLTFilter</literal> can be used to apply XSLT Transformations to ISO-8583 messages.</simpara>
</listitem>
</itemizedlist>
<simpara>There&#8217;s a popular filter called <literal>BSHFilter</literal> that can execute <link xl:href="http://www.beanshell.org">BeanShell</link>
code placed in an external file that can be modified at runtime without restarting
the system, providing an excellent way to make quick changes (which are welcome
during tests and initial rounds of certifications - the BSH code can be easily
migrated to Java later).</simpara>
<caution>
<simpara>We&#8217;ve seen full applications implemented as BSH-based filters.
Those are very difficult to maintain and are significantly slower
than business logic implemented in Java code. We encourage you
to use this handy scripting capability as a tool for hot-fixes
and testing and remember to move the code to Java as soon as
you can.</simpara>
</caution>
</section>
</section>
<section xml:id="isoserver">
<title>Accepting connections with ISOServer</title>
<simpara><literal>ISOServer</literal> listens in a given port for incoming connections and takes care of
accepting them and passing control to an underlying ISOChannel implementation.</simpara>
<simpara>Once a new connection is accepted and an ISOChannel is created, a
ThreadPool-controlled Thread takes care of receiving messages from it.
Those messages are passed to an ISORequestListener implementation.</simpara>
<example>
<title>ISOServer</title>
<screen>import org.jpos.iso.*;
import org.jpos.util.*;
import org.jpos.iso.channel.*;
import org.jpos.iso.packager.*;

public class Test {
    public static void main (String[] args) throws Exception {
        Logger logger = new Logger ();
        logger.addListener (new SimpleLogListener (System.out));
        ServerChannel channel = new XMLChannel (new XMLPackager());
        ((LogSource)channel).setLogger (logger, "channel");
        ISOServer server = new ISOServer (8000, channel, null);
        server.setLogger (logger, "server");
        new Thread (server).start ();
    }
}</screen>
</example>
<tip>
<simpara>The third argument of ISOServer&#8217;s constructor is an optional
ThreadPool. Should you pass a null parameter there, a new ThreadPool
is created for you, which defaults to 100 threads.
(<literal>new ThreadPool (1,100)</literal>)</simpara>
<simpara>Once again, we show this sample code for
educational purposes. In real life applications, you
want to use Q2&#8217;s <literal>QServer</literal> component instead.</simpara>
</tip>
<simpara>In order to test the previous server Test program (which is listening on port
8000), you can use a simple <emphasis>telnet</emphasis> client where you will be able to type an
XML-formatted ISO-8583 message, e.g.:</simpara>
<screen>   $ telnet localhost 8000
   Trying 127.0.0.1...
   Connected to localhost.
   Escape character is '^]'.</screen>
<simpara>Now if you have a look at your running Test program you&#8217;ll see something like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;log realm="server" at="Fri May 17 08:11:34 UYT 2002.824"&gt;
        &lt;iso-server&gt;
            listening on port 8000
        &lt;/iso-server&gt;
    &lt;/log&gt;</programlisting>
<simpara>Back on your telnet session, you can type in an
XML formatted ISO-8583 message like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   &lt;isomsg&gt;
    &lt;field id="0" value="0800"/&gt;
    &lt;field id="3" value="333333"/&gt;
   &lt;/isomsg&gt;</programlisting>
<simpara>(please note XMLChannel expects &lt;isomsg&gt; as well as &lt;/isomsg&gt; to be placed as
the first thing in a line)</simpara>
<simpara>Your test program will then show:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;log realm="server.channel" at="Fri May 17 07:56:58 UYT 2002.407"&gt;
     &lt;receive&gt;
      &lt;isomsg direction="incoming"&gt;
       &lt;field id="0" value="0800"/&gt;
       &lt;field id="3" value="333333"/&gt;
      &lt;/isomsg&gt;
     &lt;/receive&gt;
    &lt;/log&gt;</programlisting>
<simpara>As stated above, you can add an ISORequestListener to your ISOServer that will
take care of actually processing the incoming messages. So let&#8217;s modify our
little Test program to answer our messages. Our Test class has to implement
ISORequestListener, e.g.:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class Test implements ISORequestListener {
    ...
    ...
    public boolean process (ISOSource source, ISOMsg m) {
        try {
            m.setResponseMTI ();
            m.set (39, "00");
            source.send (m);
        } catch (ISOException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }
    ...
    ...
}</programlisting>
<simpara>You have to assign this request listener to your server. You can do  this
assignment with the following instruction:</simpara>
<programlisting language="java" linenumbering="unnumbered">    server.addISORequestListener (new Test ());</programlisting>
<simpara>The full program looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">import java.io.*;
import org.jpos.iso.*;
import org.jpos.util.*;
import org.jpos.iso.channel.*;
import org.jpos.iso.packager.*;

public class Test implements ISORequestListener {
    public Test () {
        super();
    }
    public boolean process (ISOSource source, ISOMsg m) {
        try {
            m.setResponseMTI ();
            m.set (39, "00");
            source.send (m);
        } catch (ISOException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    public static void main (String[] args) throws Exception {
        Logger logger = new Logger ();
        logger.addListener (new SimpleLogListener (System.out));
        ServerChannel channel = new XMLChannel (new XMLPackager());
        ((LogSource)channel).setLogger (logger, "channel");
        ISOServer server = new ISOServer (8000, channel, null);
        server.setLogger (logger, "server");
        server.addISORequestListener (new Test ());
        new Thread (server).start ();
    }
}</programlisting>
<simpara>Now try to telnet to port 8000 and send another XML-formatted ISO-8583 message.
You&#8217;ll get a response, with a result code "00" (field 39), e.g.:</simpara>
<screen>    (you type)
    &lt;isomsg&gt;
     &lt;field id="0" value="0800"/&gt;
     &lt;field id="3" value="333333"/&gt;
    &lt;/isomsg&gt;

    (and you should receive)
    &lt;isomsg direction="outgoing"&gt;
      &lt;field id="0" value="0810"/&gt;
      &lt;field id="3" value="333333"/&gt;
      &lt;field id="39" value="00"/&gt;
    &lt;/isomsg&gt;</screen>
<simpara>ISOServer uses a ThreadPool in order to be able to accept multiple connections
at the same time. Every socket connection is handled by a single thread.  If
your request listener implementation takes too long to reply, new messages
arriving over that session will have to wait for their response.</simpara>
<simpara>To solve this problem, your ISORequestListener implementation should run in its
own thread pool so that its process(&#8230;&#8203;) method will just queue requests to be
processed by a peer thread.</simpara>
<tip>
<simpara>Before worrying too much about handling simultaneous transactions, you&#8217;ll be
happy to know that jPOS has a <literal>TransactionManager</literal> that deals with that.
We&#8217;ll cover it very soon, keep reading.</simpara>
</tip>
<simpara>ISOServer uses ISOChannel implementations to pull ISOMsgs from the wire.  These
ISOChannels can, of course, have associated filters as described earlier.</simpara>
<note>
<simpara>In modern jPOS applications ISOServer is usually managed by the
QServer service (see QServer).
The ISORequestListener is usually a thin implementation
that forwards the request to the TransactionManager.</simpara>
</note>
</section>
<section xml:id="multiplexing_with_mux">
<title>Multiplexing an ISOChannel with a MUX</title>
<simpara>Imagine an acquirer implementation that receives several requests at a time
from several POS terminals and has to route them to an issuer institution by
means of an ISOChannel.</simpara>
<simpara>While you can establish one socket connection per transaction, it is common use
to setup just one socket connection (handled by an ISOChannel instance) and
multiplex it.</simpara>
<simpara>So a MUX is basically a <emphasis role="strong">channel multiplexer</emphasis>.
Once you have instantiated a MUX, you just send a request and wait for the response.</simpara>
<simpara>Originally, the MUX interface look like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface MUX {
        public ISOMsg request (ISOMsg m, long timeout) throws ISOException;
        public boolean isConnected();
    }</programlisting>
<itemizedlist>
<listitem>
<simpara>The <literal>ISOMsg request(ISOMsg, long)</literal> method queues
a request to be sent by the underlying ISOChannel(s) and waits for
the response up to the timeout specified in milliseconds. It either
returns a response or null.</simpara>
</listitem>
<listitem>
<simpara><literal>isConnected()</literal> is self explanatory, it returns
true if the underlying channel(s) are connected.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>MUX is an interface that can have many different implementations.
Depending on the implementation and the configuration the
value returned by <literal>isConnected()</literal> might not
be reliable (it could return true even on an unconnected channel).</simpara>
</note>
<simpara>Recently <footnote><simpara>jPOS 1.6.1</simpara></footnote> we&#8217;ve added the ability to asynchronously queue requests,
the new MUX interface has another <literal>request</literal> method that returns immediately and calls
an ISOResponseListener (with an optional handBack Object).</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface MUX {
        ...
        ...
        public void request
            (ISOMsg m, long timeout, ISOResponseListener r, Object handBack)
        throws ISOException;
    }</programlisting>
<note>
<simpara>This new asynchronous way of calling the MUX is available in the
<literal>QMUX</literal> implementation of the <literal>MUX</literal> interface but it has not been
back-ported to the <literal>ISOMUX</literal> implementation which is going to be
deprecated in future versions of jPOS.
ISOMUX has a <literal>queue</literal> method that can be used to achieve a similar asynchronous
behavior.</simpara>
</note>
<simpara>In order to send responses to the appropriate sending thread, a <literal>MUX</literal>
implementation uses selected fields from the original <literal>ISOMsg</literal> request
expected to be present in the <literal>ISOMsg</literal> response. Although not part of the
<literal>MUX</literal> interface, implementations such as QMUX (the new one) and ISOMUX
(the old one) have a protected method called <literal>String getKey(ISOMsg m)</literal> that
returns a matching key based on the <literal>ISOMsg</literal> content.</simpara>
<simpara>QMUX reads an XML file that honors a <literal>&lt;key&gt;nn,nn,nn&lt;/key&gt;</literal> child element
and can be used to easily set the appropriate matching key.</simpara>
<simpara>The default implementation uses fields such as 41 (Terminal ID) plus field 11
(Serial Trace Audit Number) to create an unique key. You can override
<literal>getKey()</literal> in order to use other fields.</simpara>
<example>
<title>MUX example</title>
<programlisting language="java" linenumbering="unnumbered">    ...
    ...
    MUX mux = (MUX) NameRegister.get ("mux.mymultiplexer");
    ...
    ...</programlisting>
<programlisting language="java" linenumbering="unnumbered">    ISOMsg m = new ISOMsg();
    m.setMTI ("0800");
    m.set (11, "000001");
    m.set (41, "00000001");
    ISOMsg response = mux.request (m, 30000);
    if (response != null) {
        // you've got a response
    } else {
        // request has timed out
        // you may want to reverse or retransmit
    }</programlisting>
</example>
<simpara>When a message arrives to MUX&#8217;s underlying ISOChannel, the MUX implementation
checks to see if that message&#8217;s <emphasis>key</emphasis> is registered as a pending request.</simpara>
<simpara>Should that key match a pending request, the response is handed to the waiting
thread. If the key was registered as a request, or the response comes in too
late then that response is (depending on the configuration) ignored, forwarded
to an ISORequestListener or to a well defined Space queue. (see QMUX for
details).</simpara>
<simpara>Under many situations, the same channel that a client application may use to
send requests and wait for responses may also receive requests coming from the
remote server.</simpara>
<simpara>Those <emphasis>unmatched requests</emphasis> coming from the remote server are delegated to an
<literal>ISORequestListener</literal> (or a well defined "unhandled" Space queue).</simpara>
<simpara>Let&#8217;s have a look at the ISORequestListener interface:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface ISORequestListener {
        public boolean process (ISOSource source, ISOMsg m);
    }</programlisting>
<simpara>Imagine we want to answer the 0800 echo requests arriving to our MUX.
We can write the following implementation:</simpara>
<programlisting language="java" linenumbering="unnumbered">   public class EchoHandler extends Log
        implements ISORequestListener
   {
        public boolean process (ISOSource source, ISOMsg m) {
            try {
                if ("0800".equals (m.getMTI())) {
                    m.setResponseMTI ();
                    m.set (39, "00");
                    source.send (m);
                }
            } catch (Exception e) {
                warn ("echo-handler", e);
            }
            return true;
        }
   }</programlisting>
</section>
</section>
<section xml:id="incoming_filter">
<title>IncomingListener</title>
<simpara>As of jPOS 2.1.0, there&#8217;s a new general purpose <literal>ISORequestListener</literal>
called <literal>org.jpos.iso.IncomingListener</literal> that forwards all incoming
transactions to a space queue, to be picked up by the TransactionManager.</simpara>
<simpara>It honors the following configuration properties:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>IncomingListener Configuration Properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>queue</simpara></entry>
<entry align="left" valign="top"><simpara>Transaction Manager&#8217;s queue</simpara></entry>
<entry align="left" valign="top"><simpara>no default, this property is required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>timeout</simpara></entry>
<entry align="left" valign="top"><simpara>Source Based Timeout</simpara></entry>
<entry align="left" valign="top"><simpara>15000ms, set to 0 to disable</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>source</simpara></entry>
<entry align="left" valign="top"><simpara>Places <literal>ISOSource</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>SOURCE</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>request</simpara></entry>
<entry align="left" valign="top"><simpara>Places <literal>ISOMsg</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>REQUEST</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>timestamp</simpara></entry>
<entry align="left" valign="top"><simpara>Context creation timestamp</simpara></entry>
<entry align="left" valign="top"><simpara><literal>TIMESTAMP</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>space</simpara></entry>
<entry align="left" valign="top"><simpara>Spaces to use when queuing transaction</simpara></entry>
<entry align="left" valign="top"><simpara>"" (default space)</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>In addition to the previous configuration properties, <literal>IncomingListener</literal> places
in the context any additional optional property starting with the prefix <literal>ctx.</literal>,
so for example, if a server or mux uses a request listener configured to handle
transactions from a given endpoing "XYZ", a property called <literal>ctx.XYZ</literal> can be
added to the configuration and will be available to the transaction participants,
i.e.:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;mux class="org.jpos.q2.iso.QMUX" logger="Q2" name="postilion"&gt;
  &lt;in&gt;receive&lt;/in&gt;
  &lt;out&gt;send&lt;/out&gt;
  &lt;readychannel.ready&lt;/ready&gt;

  &lt;request-listener class="org.jpos.iso.IncomingListener" logger="Q2"
     realm="incoming-listener"&gt;
   &lt;property name="queue"   value="JPTS.TXN" /&gt;
   &lt;property name="ctx.STATION" value="SS_XYZ" /&gt;
   &lt;property name="ctx.PORT" value="1234" /&gt;
  &lt;/request-listener&gt;
&lt;/mux&gt;</programlisting>
<simpara>The <literal>Context</literal> queued to the <literal>JPTS.TXN</literal> queue would have the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>STATION</literal> with a value of <literal>SS_XYZ</literal></simpara>
</listitem>
<listitem>
<simpara><literal>PORT</literal> with a value of <literal>1234</literal></simpara>
</listitem>
</itemizedlist>
<simpara>as well as the entries <literal>SOURCE</literal>, <literal>REQUEST</literal>, <literal>TIMESTAMP</literal> and also a fresh <literal>PROFILER</literal>.</simpara>
</section>
</chapter>
<chapter xml:id="_support_classes">
<title>Support classes</title>
<section xml:id="logger">
<title>jPOS' Logger</title>
<simpara>Yet another Logger subsystem?</simpara>
<simpara>You may wonder why we&#8217;ve chosen to develop our own Logger subsystem. The
answer is very simple: when we wrote it, there were no other suitable logger
subsystems available. Log4j was just a tiny library hosted in IBM alphaWorks.</simpara>
<simpara>You may wonder why we don&#8217;t deprecate it now that there are other options
available. The main difference between our logger sub-system and other logger
sub-systems out there is that we deal with <emphasis role="strong">live objects</emphasis>. A LogEvent holds
live objects that can be handled by the LogListeners, for example to protect
sensitive information (PCI requirement) or to act on special conditions (i.e.
e-mailing an Operator on an Exception without having to parse the serialized
message).</simpara>
<note>
<simpara>While other logger subsystems are mostly "line oriented", jPOS' is mostly
"transaction oriented". A jPOS LogEvent is likely to carry information for the
whole transaction making it very suitable for audit and debugging purposes.</simpara>
</note>
<tip>
<simpara>In order to avoid the initial desire to get rid of the jPOS Logger and
use your the logger you&#8217;re used to use, you may want to consider jPOS'
as an <emphasis role="strong">Event Logger</emphasis>, or <emphasis role="strong">Audit Log</emphasis>. We don&#8217;t use it to add debug or
trace statements in applications, we use it to log business related data.</simpara>
<simpara>You can still use your preferred logger subsystem as part of your business
logic.</simpara>
</tip>
<simpara>jPOS&#8217;s logger subsystem is very easy to extend, so one can easily plug in other
logger engines (such as Log4j, commons logging or the new JDK&#8217;s 1.4 logging
stuff), but that has little use. One of the benefit of our logger is the
fact that it produce easy to read (very lightweight) and easy to parse
XML output. The <literal>LogChannel</literal> for example can read a jPOS log file and parse
ISO-8583 messages from it. If you plug another layer of logging on top of it,
the output is likely to add per-line timestamps that will render the file
difficult to parse.</simpara>
<simpara>Our logger is implemented by the following main classes:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Logger&#8217;s main classes</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<thead>
<row>
<entry align="left" valign="top">Class</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Logger</simpara></entry>
<entry align="left" valign="top"><simpara>Main logger class</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LogListener</simpara></entry>
<entry align="left" valign="top"><simpara>Listens to log events</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LogSource</simpara></entry>
<entry align="left" valign="top"><simpara>A log event producer has to implement LogSource</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LogEvent</simpara></entry>
<entry align="left" valign="top"><simpara>The Log Event</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The <literal>Logger</literal> class has the following important methods:</simpara>
<programlisting language="java" linenumbering="unnumbered">   public class Logger {
      public static void log (LogEvent ev);
      ...
      public void addListener (LogListener l);
      public void removeListener (LogListener l);
      public boolean hasListeners();
      ...
      ...
   }</programlisting>
<simpara><literal>LogSource</literal> looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">   public interface LogSource {
      public void setLogger (Logger logger, String realm);
      public String getRealm ();
      public Logger getLogger ();
   }</programlisting>
<simpara>And <literal>LogEvent</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public class LogEvent {
       public LogEvent (LogSource source, String tag);
       ...
       ...
       public void addMessage (Object msg);
       ...
    }</programlisting>
<simpara>(please take a look at
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/util/LogEvent.html">jPOS&#8217;s javadoc</link>
or source code for a full description)</simpara>
<simpara>Here is a simple way to create a Logger:</simpara>
<programlisting language="java" linenumbering="unnumbered">   Logger logger = new Logger();
   logger.addListener (new SimpleLogListener (System.out));</programlisting>
<simpara>Now you can easily attach that logger to any jPOS component implementing
LogSource such as channels, packagers, multiplexers, etc. You can easily call:</simpara>
<programlisting language="java" linenumbering="unnumbered">   component.setLogger (logger, "some-component-description");</programlisting>
<simpara>You can use jPOS&#8217;s logger subsystem to log events of your own. In those cases,
you have to either implement LogSource or extend or use the the <literal>org.jpos.util.SimpleLogSource</literal>
class or better yet, use the newer <literal>org.jpos.util.Log</literal> class.</simpara>
<simpara>Then you can write code like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">   LogEvent evt = new LogEvent (yourLogSource, "my-event");
   evt.addMessage ("A String message");
   evt.addMessage (anyLoggeableObject);
   Logger.log (evt);</programlisting>
<simpara>The <literal>Loggeable</literal> interface is a very simple way of letting an object render itself:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface Loggeable {
       public void dump (PrintStream p, String indent);
    }</programlisting>
<simpara>Most of jPOS&#8217;s components already implement the <literal>Loggeable</literal> interface, but you
can easily  wrap any given object with a Loggeable class that holds the former
object as its payload, e.g.:</simpara>
<programlisting language="java" linenumbering="unnumbered">package net.swini.util;

import java.io.PrintStream;
import org.jpos.util.Loggeable;

public abstract class LoggeableBase implements Loggeable {
    protected String toXML (String tag, String value, String indent) {
        StringBuffer sb = new StringBuffer (indent);
        sb.append ('&lt;');
        sb.append (tag);
        sb.append ('&gt;');
        sb.append (value);
        sb.append ("&lt;/");
        sb.append (tag);
        sb.append ('&gt;');
        return sb.toString ();
    }
    public abstract void dump (PrintStream p, String indent);
}

package net.swini.util;

import java.io.PrintStream;
import net.jini.core.lookup.ServiceItem;
import net.jini.lookup.entry.ServiceInfo;

public class LoggeableServiceItem extends LoggeableBase {
    String tag;
    ServiceItem item;
    public LoggeableServiceItem (String tag, ServiceItem item) {
        super();
        this.tag  = tag;
        this.item = item;
    }
    public void dump (PrintStream p, String indent) {
        String inner = indent + "   ";
        p.println (indent + "&lt;" + tag + "&gt;");

        if (item.service != null) {
            p.println (toXML ("class", item.service.getClass().getName(), inner));
        } else {
            p.println (inner + "null item.service - (check http server)");
        }
        p.println (toXML ("id", item.serviceID.toString(), inner));

        for (int i=0 ; i&lt;item.attributeSets.length ; i++) {
            if (item.attributeSets[i] instanceof ServiceInfo) {
                ServiceInfo info = (ServiceInfo) item.attributeSets[i];
                p.println (toXML ("name", info.name, inner));
                p.println (toXML ("manufacturer", info.manufacturer, inner));
                p.println (toXML ("vendor", info.vendor, inner));
                p.println (toXML ("version", info.version, inner));
                p.println (toXML ("model", info.model, inner));
                p.println (toXML ("serial", info.serialNumber, inner));
            }
            else {
                p.println (inner + "&lt;attr&gt;");
                p.println (inner + "  "+item.attributeSets[i].toString());
                p.println (inner + "&lt;/attr&gt;");
            }
        }
        p.println (indent + "&lt;/" + tag + "&gt;");
    }
}</programlisting>
<simpara>There&#8217;s a general purpose Loggeable class called <literal>SimpleMsg</literal> which has an
overloaded constructor for several commonly used Java types. You can easily add
a <literal>SimpleMsg</literal> to your log stream with code like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    ...
    ...
    evt.addMessage (new SimpleMsg ("demo", "boolean", true));
    evt.addMessage (new SimpleMsg ("demo", "time", System.currentTimeMillis()));
    evt.addMessage (new SimpleMsg ("demo", "dump", "TEST".getBytes()));
    ...
    ...</programlisting>
<simpara>jPOS comes with several <literal>LogListener</literal> implementations and it&#8217;s very easy to write your own.
The ready available ones include:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>LogListener</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="66.6667*"/>
<thead>
<row>
<entry align="left" valign="top">Class</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>SimpleLogListener</simpara></entry>
<entry align="left" valign="top"><simpara>Dumps log events to a PrintStream (such as System.out)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>RotateLogListener</simpara></entry>
<entry align="left" valign="top"><simpara>Automatically rotate logs based on file size and time window</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>DailyLogListener</simpara></entry>
<entry align="left" valign="top"><simpara>Automatically rotate logs daily. Has the ability to compress old log files</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OperatorLogListener</simpara></entry>
<entry align="left" valign="top"><simpara>Applies some filtering and e-mails log-events to an operator, not longer included in jPOS core, it&#8217;s part of the jPOS-EE mail module</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ProtectedLogListener</simpara></entry>
<entry align="left" valign="top"><simpara>Protect sensitive data from ISOMsgs in LogEvents for PCI compliance</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>FSDProtectedLogListener</simpara></entry>
<entry align="left" valign="top"><simpara>Same as <literal>ProtectedLogListeer</literal> for <literal>FSDMsg</literal> and <literal>FSDISOMsg</literal> instances.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>SysLogListener</simpara></entry>
<entry align="left" valign="top"><simpara>Forward log events to the operating system syslog.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>RealmLogFilter</simpara></entry>
<entry align="left" valign="top"><simpara>Filter log events by their realm. Enabled or disabled realms can be defined.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<simpara>In the jPOS-EE code base you can find some additional logger
implementations such as IRCLogListener that forwards LogEVents
to an irc channel. In addition, there&#8217;s a LogBack adaptor that
let us capture other loggers output (i.e. log4j, commons-logging,
etc.) into jPOS' log stream. This allows you to use your preferred
logger API in your code while getting the output in a centralized
jPOS file.</simpara>
</tip>
<simpara>LogListeners are called synchronously, so one listener has the chance to modify a given
LogEvent; for example, <literal>ProtectedLogListener</literal> analyzes  received <literal>LogEvents</literal> and <emphasis role="strong">protects</emphasis>
important information (such as track-2 data).</simpara>
</section>
<section xml:id="nameregistrar">
<title>NameRegistrar</title>
<simpara><emphasis role="strong">org.jpos.util.NameRegistrar</emphasis> is a very simple <emphasis role="strong">singleton</emphasis> class that can be
used to register and locate jPOS components.</simpara>
<simpara>It&#8217;s nothing but a simple, well-known Map where one can easily find components
by an arbitrary name.</simpara>
<simpara>NameRegistrar has the following static methods:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public static void register (String key, Object value);
    public static void unregister (String key);
    public static Object get (String key)
        throws NameRegistrar.NotFoundException;
    public static Object getIfExists (String key);</programlisting>
<simpara>So you can write code like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">   ...
   ...
   ISOMUX mux = new ISOMUX (...);
   NameRegistrar.register ("myMUX", mux);
   ...
   ...</programlisting>
<simpara>and elsewhere in your application you can get a reference to your MUX with code like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">     try {
        ISOMUX mux = (ISOMUX) NameRegistrar.get ("myMUX");
     } catch (NameRegistrar.NotFoundeException e) {
        ...
        ...
     }</programlisting>
<literallayout class="monospaced">or</literallayout>
<programlisting language="java" linenumbering="unnumbered">    ISOMUX mux = (ISOMUX) NameRegistrar.getIfExists ("myMUX");
    if (mux != null) {
        ...
        ...
    }</programlisting>
<simpara>Although we can use NameRegistrar in order to register jPOS components,
sometimes it&#8217;s better to use the component&#8217;s setName(String name) method when
available.</simpara>
<simpara>Most components have a setName (String name) method implemented like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public class ISOMUX {
        ...
        ...
        public void setName (String name) {
            this.name = name;
            NameRegistrar.register ("mux."+name, this);
        }
        ...
        ...</programlisting>
<simpara>The prefix <literal>"mux."</literal> is used here in order to avoid a clash of names in the
registrar between different classes of components using the same name  (e.g.
<literal>"mux.institutionABC"</literal>  and  <literal>"channel.institutionABC"</literal>).</simpara>
<simpara>Different components use different prefixes as shown in the following table:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>NameRegistrar&#8217;s prefix</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Component</entry>
<entry align="left" valign="top">Prefix</entry>
<entry align="left" valign="top">Getter</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>ConnectionPool</simpara></entry>
<entry align="left" valign="top"><simpara>"connection.pool."</simpara></entry>
<entry align="left" valign="top"><simpara>N/A</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ControlPanel</simpara></entry>
<entry align="left" valign="top"><simpara>"panel."</simpara></entry>
<entry align="left" valign="top"><simpara>N/A</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>DirPoll</simpara></entry>
<entry align="left" valign="top"><simpara>"qsp.dirpoll."</simpara></entry>
<entry align="left" valign="top"><simpara>N/A</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>BaseChannel</simpara></entry>
<entry align="left" valign="top"><simpara>"channel."</simpara></entry>
<entry align="left" valign="top"><simpara>BaseChannel.getChannel</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ISOMUX</simpara></entry>
<entry align="left" valign="top"><simpara>"mux."</simpara></entry>
<entry align="left" valign="top"><simpara>ISOMUX.getMUX</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QMUX</simpara></entry>
<entry align="left" valign="top"><simpara>"mux."</simpara></entry>
<entry align="left" valign="top"><simpara>QMUX.getMUX</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ISOServer</simpara></entry>
<entry align="left" valign="top"><simpara>"server."</simpara></entry>
<entry align="left" valign="top"><simpara>ISOServer.getServer</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>KeyStore</simpara></entry>
<entry align="left" valign="top"><simpara>"keystore."</simpara></entry>
<entry align="left" valign="top"><simpara>N/A</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Logger</simpara></entry>
<entry align="left" valign="top"><simpara>"logger."</simpara></entry>
<entry align="left" valign="top"><simpara>Logger.getLogger</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LogListener</simpara></entry>
<entry align="left" valign="top"><simpara>"log-listener."</simpara></entry>
<entry align="left" valign="top"><simpara>N/A</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PersistentEngine</simpara></entry>
<entry align="left" valign="top"><simpara>"persistent.engine."</simpara></entry>
<entry align="left" valign="top"><simpara>N/A</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>SMAdapter</simpara></entry>
<entry align="left" valign="top"><simpara>"s-m-adapter."</simpara></entry>
<entry align="left" valign="top"><simpara>BaseSMAdapter.getSMAdapter</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<simpara>While we try to keep the previous prefix table up to date, we suggest that
you double-check it against the source code if you have problems getting
references to your components.</simpara>
</tip>
<simpara>Using the getter (when available) lets us write code like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">     try {
        ISOMUX mux = ISOMUX.get ("myMUX");
     } catch (NameRegistrar.NotFoundeException e) {
        ...
        ...
     }</programlisting>
<simpara>that will in turn call <literal>NameRegistrar.get ("mux.myMUX")</literal>. Later, we&#8217;ll see that
NameRegistrar is extensively used by jPOS' Q2 applications. Q2 takes care of
configuring several jPOS components for you, but your code will have to locate
them by a given name. That&#8217;s where <literal>NameRegistrar</literal> comes in to play.</simpara>
<warning>
<simpara>Singletons are usually an illusion, you think there&#8217;s just one, but there might be
more than one. If you have multiple classloaders in your application you may end up with
multiple copies of a singleton, such as the NameRegistrar.</simpara>
<simpara>This problem does not exist if you run Q2 as a stand-alone application.</simpara>
</warning>
<tip>
<simpara>The <literal>NameRegistrar</literal> is a <literal>Loggeable</literal> object (see <xref linkend="logger"/>) so its instance
(<literal>NameRegistrar.getInstance()</literal>) can be added to a <literal>LogEvent</literal> in order to assist
you during debugging sessions.</simpara>
<simpara>When running in a <emphasis role="strong">Q2</emphasis> environment we recommend to deploy a <literal>sysmon</literal> service in
order to regularly view the NameRegistrar&#8217;s content.</simpara>
</tip>
</section>
<section xml:id="configuration">
<title>Configuration</title>
<simpara><emphasis role="strong">org.jpos.core.Configuration</emphasis> is a general purpose property container
extensively used by jPOS components.</simpara>
<simpara>The Configuration interface looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">   package org.jpos.core;

   public interface Configuration {
     public void put (String name, Object value);
     public String get (String propertyName);
     public String get (String propertyName, String defaultValue);
     public String[] getAll  (String propertyName);
     public int[] getInts  (String propertyName);
     public long[] getLongs (String propertyName);
     public double[] getDoubles (String propertyName);
     public boolean[] getBooleans (String propertyName);
     public int getInt (String propertyName);
     public int getInt (String propertyName, int defaultValue);
     public long getLong (String propertyName);
     public long getLong (String propertyName, long defaultValue);
     public double getDouble (String propertyName);
     public double getDouble (String propertyName, double defaultValue);
     public boolean getBoolean (String propertyName);
     public boolean getBoolean (String propertyName, boolean defaultValue);
   }</programlisting>
<simpara>Having our own Configuration interface lets us implement it in different ways.
We have a very little class called SimpleConfiguration backed by a
java.util.Properties, but nothing prevents us from creating a more
sophisticated Configuration object capable of providing dynamic data (such as
an SQLConfiguration, JavaSpacesConfiguration and the like).</simpara>
<simpara>jPOS-EE implements a SysConfigConfiguration that reads objects from its <literal>sysconfig</literal> SQL table.</simpara>
<simpara>We also have a very simple interface called Configurable:</simpara>
<programlisting language="java" linenumbering="unnumbered">   package org.jpos.core;

   public interface Configurable {
     public void setConfiguration (Configuration cfg)
        throws ConfigurationException;
   }</programlisting>
<simpara>Later, while looking at the Q2 application we&#8217;ll see that Q2 pushes a
configuration object by calling the <literal>setConfiguration</literal> method on
<literal>Configurable</literal> objects.</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;object name="myObject" class="com.mycompany.MyObject"&gt;
      &lt;property name="myProperty" value="any Value" /&gt;
      &lt;property file="cfg/myprops.yml" /&gt;
    &lt;/object&gt;</programlisting>
<simpara>Should <literal>com.mycompany.MyObject</literal> implement <literal>Configurable</literal>, Q2 would call its  <literal>setConfiguration()</literal> method
providing access to the underlying <literal>myProperty</literal> property.</simpara>
<simpara>It&#8217;s interesting to note that Q2 provides the ability to have array of
properties under the same name, e.g.:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;object name="myObject" class="com.mycompany.MyObject"&gt;
     &lt;property name="myProperty" value="Value A" /&gt;
     &lt;property name="myProperty" value="Value B" /&gt;
     &lt;property name="myProperty" value="Value C" /&gt;
    &lt;/object&gt;</programlisting>
<simpara>where one can call handy methods like  <literal>String[] getAll(String)</literal>.</simpara>
<simpara><literal>setConfiguration(Configuration cfg)</literal> can check the Configuration object and might
throw a <literal>ConfigurationException</literal> in case a required property is not present or
is invalid.</simpara>
<tip>
<simpara>SimpleConfiguration recognizes and de-references properties with the
format: <literal>${xxx}</literal> and searches for a system property, or operating system
environment variable under the <literal>xxx</literal> name.
As a fallback mechanism of last resort, the property can be resolved from an <emphasis>environment file</emphasis>, in
YAML or <emphasis>properties</emphasis> file syntax, found in the <literal>cfg</literal> directory (default filename <literal>default.yml</literal>
or <literal>default.cfg</literal>, which can be overridden by the <literal>jpos.env</literal> system property).</simpara>
<simpara>You can add a default value within the expression itself, using the <literal>:</literal> (colon) separator.
For example <literal>${xxx:def_value}</literal>. If the property is not found, the default value will be used.</simpara>
<simpara>The format <literal>$sys{xxx}</literal> de-references just from system properties,
<literal>$env{xxx}</literal> just from the operating system environment, and <literal>$cfg{xxx}</literal> just from the environment file (the.</simpara>
<simpara>In the rare case where a value with the format <literal>${...}</literal> is required, the
<literal>$verb{${...}}</literal> format (verbatim) can be used.</simpara>
<simpara>In addition, a property named <literal>xx.yy.zz</literal> can be overridden by the environment
variable <literal>XX_YY_ZZ</literal> (note that dots are replaced by underscore, and property
name is converted to uppercase.</simpara>
</tip>
<simpara>The jPOS <literal>Environment</literal> has a ServiceLoader based plugin mechanism that support
<literal>EnvironmentProviders</literal>. jPOS comes with two stock providers:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>FileEnvironmentProvider</literal> (prefix <literal>file::</literal>).</simpara>
</listitem>
<listitem>
<simpara><literal>ObfEnvironmentProvider</literal> (prefix <literal>obf::</literal>).</simpara>
</listitem>
</itemizedlist>
<simpara>A YAML file (i.e. <literal>cfg/default.yml</literal>) containing an entry like this:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">db:
    pass: file::/var/secure/dbpass.txt</programlisting>
<simpara>Would obtain the value of the <literal>${db.pass}</literal> property from the <literal>/var/secure/dbpass.txt</literal> file.</simpara>
<simpara>Likewise, an obfuscated entry like this:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">db:
    pass: obf::Ir8LYtvCYsaXANchMMrBqq5Gs2DnMEstYAAAAA</programlisting>
<simpara>would de-obfuscate the base64 encoded secret.</simpara>
<warning>
<simpara>Obfuscation is that, just obfuscation, not encryption.
It&#8217;s used to prevent secrets from leaking to ocassional observers and
to demonstrate the use of the EnvironmentProviders. For production
deployments, HSM based EnvironmentProvider should be used instead.</simpara>
</warning>
<tip>
<simpara>The <literal>obf</literal> CLI command can be used to create these obfuscated entries.</simpara>
</tip>
<simpara>Since version 2.1.7, jPOS supports the <literal>@Config</literal> annotation that pushes configuration properties (String, int, Integer, long, Long) down to classes
instanciated through QFactory (Qbeans, Transaction Participants, etc.), i.e:</simpara>
<programlisting language="java" linenumbering="unnumbered">  public class MyClass {
      @Config("port") int port;
  }</programlisting>
<simpara>The <emphasis>port</emphasis> variable would be picked from:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  ...
     &lt;property name="port" value="1234" /&gt;
  ...</programlisting>
<simpara>from the QBean or participant configuration.</simpara>
<tip>
<simpara>When using multiple environments (i.e. <literal>-Eprod -Enode1</literal>) you can specify</simpara>
<simpara><literal>&lt;property file="cfg/myconfig.yml" env="true" /&gt;</literal></simpara>
<simpara>and the system will load the files <literal>myconfig.yml</literal>, <literal>myconfig-prod.yml</literal> and <literal>myconfig-node1.yml</literal>.</simpara>
</tip>
</section>
<section xml:id="SystemMonitor">
<title>SystemMonitor</title>
<simpara><emphasis role="strong">org.jpos.util.SystemMonitor</emphasis>  is a very simple class that periodically
logs useful information such as the number of running threads, memory
usage, etc.</simpara>
<simpara>Its constructor looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">     public SystemMonitor (int sleepTime, Logger logger, String realm)</programlisting>
<note>
<simpara>See
   <link xl:href="http://jpos.org/doc/javadoc/org/jpos/util/SystemMonitor.html">javadocs</link>
for details.</simpara>
</note>
<simpara>Using SystemMonitor is very easy. You simply have to instantiate it with code
like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">     ...
     ...
     new SystemMonitor (60*60*1000L, yourLogger, "system-monitor"); // dumps every hour
     ...
     ...</programlisting>
<simpara>and it will dump info to your log every hour (60*60*1000 milliseconds).
The output looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;info&gt;
               OS: Mac OS X
             host: Macintosh-2.local/192.168.2.20
          version: 1.9.3-SNAPSHOT (d3c9ac3)
         instance: 38d512f6-f812-4d85-8520-cb96de2654a0
           uptime: 00:00:00.234
       processors: 2
           drift : 0
    memory(t/u/f): 85/7/78
          threads: 4
            Thread[Reference Handler,10,system]
            Thread[Finalizer,8,system]
            Thread[Signal Dispatcher,9,system]
            Thread[RMI TCP Accept-0,5,system]
            Thread[Q2-38d512f6-f812-4d85-8520-cb96de2654a0,5,main]
            Thread[DestroyJavaVM,5,main]
            Thread[Timer-0,5,main]
            Thread[SystemMonitor,5,main]
    name-registrar:
      logger.Q2.buffered: org.jpos.util.BufferedLogListener
      logger.Q2: org.jpos.util.Logger
  &lt;/info&gt;</programlisting>
<simpara>Most output is self-explanatory, with some abbreviations, e.g., memory <emphasis>t/u/f</emphasis>
stands for <emphasis>total</emphasis>, <emphasis>used</emphasis> and <emphasis>free</emphasis>. But there&#8217;s one, <emphasis role="strong">drift</emphasis>, that deserves
some explanation.</simpara>
<simpara>In the old days of the initial JVM 1.02, where Threads were not native
operating system threads (they were called <emphasis>green threads</emphasis>), it was very easy
for a thread to interfere with other threads in the same JVM, so calls to set
the thread priority, and even calls to <literal>Thread.yield()</literal> here and there in tight
loops where necessary.</simpara>
<simpara>In order to detect situations where something was really wrong we devised a
simple approach: the system monitor is supposed to sleep for a given period
of time, and then wake up. If we sleep for say 3600 seconds, we should be
waked up exactly 3600 later, right? When threads were cooperating that was
kind of true, we wake up just a few milliseconds later which is reasonable,
but when some threads were hogging the CPU, that wake up happens several
hundred and sometimes thousand milliseconds later. That was an indication
that one or more threads were running in a tight loop consuming too
much CPU resources and needed further investigation.</simpara>
<simpara>Green Threads are over, we now have great support for native threads, but
we left that <emphasis>drift</emphasis> indicator in the SystemMonitor and interesting enough,
it&#8217;s still very useful. When the system is running under heavy load, or on
overloaded and poorly monitored virtualized environments, the drift goes
up, to several seconds.</simpara>
<tip>
<simpara>If we have a report for a slow jPOS application, we suggest to immediately take
a look at that drift, if it looks weird, you know you need to start looking
at the whole system performance instead of just your jPOS based application.</simpara>
</tip>
<note>
<simpara>If you&#8217;re using Q2, the default configuration deploys a <literal>SystemMonitor</literal>
for you.</simpara>
<simpara>See <literal>deploy/99_sysmon.xml</literal></simpara>
</note>
</section>
<section xml:id="profiler">
<title>Profiler</title>
<simpara><emphasis role="strong">org.jpos.util.Profiler</emphasis> is a very simple and easy to use user-space Profiler.
It leverages the Logger subsystem to provide accurate information about processing times.</simpara>
<simpara>These are Profiler&#8217;s public methods:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public void reset();
    public void checkPoint (String detail);
    public long getElapsed();
    public long getParcial();</programlisting>
<simpara>See <link xl:href="http://www.jpos.org/doc/javadoc/org/jpos/util/Profiler.html"> javadocs </link> for details.</simpara>
<simpara>Profiler implements Loggeable, so you can easily add a Profiler Object to a LogEvent
to produce convenient profiling information.</simpara>
<example>
<title>Profiler</title>
<programlisting language="java" linenumbering="unnumbered">    Profiler prof = new Profiler();
    LogEvent evt = new LogEvent (this, "any-transaction", prof);

    // initialize message
    ISOMsg m = new ISOMsg ();
    m.setMTI ("1200");
    ...
    ...
    prof.checkPoint ("initialization");

    // send message to remote host
    ...
    ...
    ISORequest req = new ISORequest (m);
    mux.queue (req);
    ISOMsg response = req.getResponse (60000);
    prof.checkPoint ("authorization");

    // capture data in local database
    ...
    ...
    prof.checkPoint ("capture");
    ...
    ...
    Logger.log (evt);</programlisting>
</example>
<tip>
<simpara>The "end" checkPoint is automatically computed at output time (that&#8217;s when
Logger calls its log listeners).</simpara>
</tip>
<simpara>The profiler output looks like this:</simpara>
<screen>      prepare: org.jpos.jcard.PrepareContext [0.2/0.2]      <co xml:id="CO4-1"/>
      prepare: org.jpos.jcard.CheckVersion [0.1/0.3]        <co xml:id="CO4-2"/>
      prepare: org.jpos.transaction.Open [1.0/1.3]
      prepare: org.jpos.jcard.Switch [0.1/1.5]
      prepare: org.jpos.jcard.NotSupported [0.1/1.7]
      prepare: org.jpos.jcard.PrepareResponse [11.2/13.0]
      prepare: org.jpos.transaction.Close [0.2/13.2]
      prepare: org.jpos.jcard.SendResponse [0.0/13.3]
      prepare: org.jpos.jcard.ProtectDebugInfo [0.1/13.4]
      prepare: org.jpos.transaction.Debug [0.0/13.5]
       commit: org.jpos.transaction.Close [1.8/15.4]
       commit: org.jpos.jcard.SendResponse [2.2/17.6]
       commit: org.jpos.jcard.ProtectDebugInfo [0.3/17.9]
       commit: org.jpos.transaction.Debug [3.9/21.9]        <co xml:id="CO4-3"/>
      end [1.9/23.9]                                        <co xml:id="CO4-4"/></screen>
<calloutlist>
<callout arearefs="CO4-1">
<para>Partial 0.2 milliseconds, total so far, 0.2 milliseconds.</para>
</callout>
<callout arearefs="CO4-2">
<para>CheckVersion took 0.1 milliseconds, so the total so far is 0.3 milliseconds.</para>
</callout>
<callout arearefs="CO4-3">
<para>Total so far, 21.9ms.</para>
</callout>
<callout arearefs="CO4-4">
<para>1.9ms is the time between the last checkPoint and the log time.</para>
</callout>
</calloutlist>
</section>
<section xml:id="dirpoll">
<title>DirPoll</title>
<simpara>Some jPOS-based applications have to interact with third-party legacy software
(e.g., batch files coming from acquirers, retail applications, etc). Most of
the time one can be lucky enough to deal with legacy applications capable of
sending transactions over decent protocols but sometimes you are not
that lucky and the best thing you can get is a disk-based interchange, i.e.,
they place a request in a given directory, you process that request and provide
a response.</simpara>
<simpara><emphasis role="strong">org.jpos.util.DirPoll</emphasis> uses the following directory structure (whose names are
self explanatory):</simpara>
<screen>     ..../archive
     ..../request
     ..../response
     ..../tmp
     ..../run
     ..../bad</screen>
<simpara>and defines the following inner interfaces:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface Processor {
        public byte[] process(String name, byte[] request)
            throws DirPollException;
    }
    public interface FileProcessor {
        public void process (File name)
            throws DirPollException;
    }</programlisting>
<simpara>You can either create a Processor or a FileProcessor to handle incoming traffic.</simpara>
<simpara>Whenever a legacy application places a file in the <literal>request</literal> directory, your
Processor (or FileProcessor) gets called, giving you a chance to process the
given request and provide a response (if you&#8217;re using a Processor, the response
will be placed in the <literal>response</literal> directory).</simpara>
<example>
<title>DirPoll Processor</title>
<programlisting language="java" linenumbering="unnumbered">    public class DirPollProcessor implements DirPoll.Processor {
        DirPollProcessor () {
            super ();
            DirPoll dp = new DirPoll ();
            dp.setLogger (logger, "dir-poll");
            dp.setPath ("/tmp/dirpoll");
            dp.createDirs ();
            dp.setProcessor (this);
            new Thread (dp).start ();
        }
        public byte[] process (String name, byte[] b) {
            return ("request: " + name + " content="+ new String (b)).getBytes();
        }
    }</programlisting>
</example>
<simpara>DirPoll has provisions to handle different kind of messages with different
priority based on its file extension, so you can call:</simpara>
<programlisting language="java" linenumbering="unnumbered">    ...
    ...
    dp.addPriority (".A");
    dp.addPriority (".B");
    dp.addPriority (".C");
    ...
    ...</programlisting>
<simpara>in order to raise ".A" priority over ".B" and ".C" requests (you can use any extension name).</simpara>
<simpara>Before processing a given request, <literal>DirPoll</literal> moves it to the <literal>run</literal> directory,
and then either to the <literal>response</literal> directory or to the <literal>bad</literal>  directory (in
case something goes wrong and a <literal>DirPollException</literal> has  been thrown).</simpara>
<note>
<simpara>If your application crashes, you have to take care of possible requests
left sitting in the <literal>run</literal> directory. It is very important that your
application writes the requests in the <literal>tmp</literal> directory (or any other
temporary directory in the same file system) and then moves them (after a
proper operating system close operation) to the <literal>request</literal> directory in order
to guarantee that once a request is present in the <literal>request</literal> directory, it
is ready for DirPoll to process.</simpara>
</note>
<warning>
<simpara>Don&#8217;t trust your legacy application programmer. Please double check that the
previous note has been taken into account.</simpara>
</warning>
</section>
<section xml:id="threadpool">
<title>ThreadPool</title>
<note>
<simpara>This class is going to be deprecated. Do not use in new code.</simpara>
<simpara>The ThreadPool is used by several jPOS components, such as the ISOServer, and it was a
good helper class 10 years ago. We will replace it by components of the Java Executors
Framework at some point.</simpara>
</note>
<simpara><emphasis role="strong">org.jpos.util.ThreadPool</emphasis>, takes care of managing a pool of threads.</simpara>
<simpara>Its constructor looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public ThreadPool (int initialPoolSize, int maxPoolSize)</programlisting>
<simpara>(See  <link xl:href="http://jpos.org/doc/javadoc/org/jpos/util/ThreadPool.html">javadocs</link> for details).</simpara>
<simpara>It&#8217;s very useful to process short-lived threads, such as processing an
authorization transaction. Instead of creating a new thread per transaction,
you can create a ThreadPool at initialization time and then call its
<literal>execute(Runnable r)</literal> method.</simpara>
<simpara>The thread will be returned to the pool when your <literal>run()</literal> method ends, so it is
not a good idea to have long-running threads (e.g., a <literal>for (;;) { &#8230;&#8203; }</literal> loop) in
your Runnable.</simpara>
<simpara>There&#8217;s an inner interface called ThreadPool.Supervised that your Runnable can
optionally implement:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public class ThreadPool {
        public interface Supervised {
            public boolean expired ();
        }
    }</programlisting>
<simpara>In this case, ThreadPool will call your <literal>expired()</literal> method, and - if true -
will attempt to interrupt the expired thread. Note that while this does not
guarantee that your thread will gracefully end, it gives you a chance to get
out of a possible problem.</simpara>
<tip>
<simpara>You can write some <emphasis>self-healing</emphasis> code in your <literal>expired()</literal> implementation, but
please make sure your code won&#8217;t block for too long. Use only if you know
what you&#8217;re doing.</simpara>
</tip>
<simpara>ThreadPool implements ThreadPoolMBean, which exposes the following read-only
properties:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public int getJobCount ();
    public int getPoolSize ();
    public int getMaxPoolSize ();
    public int getIdleCount();
    public int getPendingCount ();</programlisting>
</section>
</chapter>
<chapter xml:id="_packagers">
<title>Packagers</title>
<section xml:id="packagerimpl">
<title>Implementing Custom Packagers</title>
<simpara>jPOS comes with several ISOPackager and ISOFieldPackager implementations that
can be used either out-of-the-box or as a reference to encode (pack) and decode
(unpack) messages that are built on the ISO-8583 standard.</simpara>
<tip>
<simpara>For a list of out-of-the-box packagers you may want to have a
look at the following directories:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>jpos/src/main/java/org/jpos/iso/packager</literal> (Java based packagers)</simpara>
</listitem>
<listitem>
<simpara><literal>jpos/src/main/resources/packager</literal> (GenericPackager configurations accessible as a resource)</simpara>
</listitem>
<listitem>
<simpara><literal>jpos/src/dist/cfg/packager</literal> (GenericPackager configurations accessible as external files)</simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Although not required, most ISOPackager implementations extend the supporting
class ISOBasePackager. This approach makes writing a custom packager a very
simple task. It&#8217;s basically just a matter of calling its
<literal>public void setFieldPackager (ISOFieldPackager[] fld)</literal>
method with a suitable array of ISOFieldPackagers.</simpara>
<simpara>Let&#8217;s look at a sample implementation:</simpara>
<example>
<title>ISO-8583 version 1993 packager implementation</title>
<programlisting language="java" linenumbering="unnumbered">public class ISO93BPackager extends ISOBasePackager {
    private static final boolean pad = false;
    protected ISOFieldPackager fld[] = {
    /*000*/ new IFB_NUMERIC (  4, "Message Type Indicator", pad),
    /*001*/ new IFB_BITMAP  ( 16, "Bitmap"),
    /*002*/ new IFB_LLNUM   ( 19, "Primary Account number", pad),
    /*003*/ new IFB_NUMERIC (  6, "Processing Code", pad),
    /*004*/ new IFB_NUMERIC ( 12, "Amount, Transaction", pad),
    /*005*/ new IFB_NUMERIC ( 12, "Amount, Reconciliation", pad),
    /*006*/ new IFB_NUMERIC ( 12, "Amount, Cardholder billing", pad),
    /*007*/ new IFB_NUMERIC ( 10, "Date and time, transmission", pad),
    /*008*/ new IFB_NUMERIC (  8, "Amount, Cardholder billing fee", pad),
    /*009*/ new IFB_NUMERIC (  8, "Conversion rate, Reconciliation", pad),
    /*010*/ new IFB_NUMERIC (  8, "Conversion rate, Cardholder billing", pad),
    ...
    ...
    ...
    /*123*/ new IFB_LLLCHAR (999, "Reserved for private use"),
    /*124*/ new IFB_LLLCHAR (999, "Reserved for private use"),
    /*125*/ new IFB_LLLCHAR (999, "Reserved for private use"),
    /*126*/ new IFB_LLLCHAR (999, "Reserved for private use"),
    /*127*/ new IFB_LLLCHAR (999, "Reserved for private use"),
    /*128*/ new IFB_BINARY  (  8, "Message authentication code field")
    };
    public ISO93BPackager() {
        super();
        setFieldPackager(fld);
    }
}</programlisting>
</example>
<simpara>We hope you see the key idea: writing a custom packager involves diving into
your interchange specification and setting up a suitable kind of field packager
for every possible field.</simpara>
</section>
<section xml:id="GenericPackager">
<title>GenericPackager</title>
<simpara>After writing multiple ISOFieldPackager implementations, jPOS developer Eoin
Flood came up with a nice idea: writing a GenericPackager that would read an
XML configuration file and instantiate an ISOFieldPackager on-the-fly.</simpara>
<note>
<simpara>Because packagers are usually instantiated once during the life time of an
application, there&#8217;s no performance impact between a packager implemented
in pure Java or the GenericPackager that reads an XML only at initialization
time.</simpara>
</note>
<simpara>Using this approach, the same packager we&#8217;ve seen in the previous example can
be easily configured using <literal>GenericPackager</literal> and a simple XML file like this:</simpara>
<example>
<title>ISO-8583 version 1993 packager configuration</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE isopackager PUBLIC
        "-//jPOS/jPOS Generic Packager DTD 1.0//EN"
        "http://jpos.org/dtd/generic-packager-1.0.dtd"&gt;

&lt;!-- ISO 8583:1993 (BINARY) field descriptions for GenericPackager --&gt;

&lt;isopackager&gt;
  &lt;isofield
      id="0"
      length="4"
      name="Message Type Indicator"
      pad="false"
      class="org.jpos.iso.IFB_NUMERIC"/&gt;
  &lt;isofield
      id="1"
      length="16"
      name="Bitmap"
      class="org.jpos.iso.IFB_BITMAP"/&gt;
  &lt;isofield
      id="2"
      length="19"
      name="Primary Account number"
      pad="false"
      class="org.jpos.iso.IFB_LLNUM"/&gt;
  &lt;isofield
      id="3"
      length="6"
      name="Processing Code"
      pad="false"
      class="org.jpos.iso.IFB_NUMERIC"/&gt;
  &lt;isofield
      id="4"
      length="12"
      name="Amount, Transaction"
      pad="false"
      class="org.jpos.iso.IFB_NUMERIC"/&gt;
   ...
   ...
   ...
  &lt;isofield
      id="126"
      length="999"
      name="Reserved for private use"
      class="org.jpos.iso.IFB_LLLCHAR"/&gt;
  &lt;isofield
      id="127"
      length="999"
      name="Reserved for private use"
      class="org.jpos.iso.IFB_LLLCHAR"/&gt;
  &lt;isofield
      id="128"
      length="8"
      name="Message authentication code field"
      class="org.jpos.iso.IFB_BINARY"/&gt;
&lt;/isopackager&gt;</programlisting>
</example>
<simpara>GenericPackager uses a DTD defined in <literal>jpos/src/main/resources/org/jpos/iso/packager/genericpackager.dtd</literal>
that looks like this:</simpara>
<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!ELEMENT isopackager (isofield+,isofieldpackager*)*&gt;
&lt;!ATTLIST isopackager maxValidField CDATA        #IMPLIED&gt;
&lt;!ATTLIST isopackager bitmapField   CDATA        #IMPLIED&gt;
&lt;!ATTLIST isopackager firstField    CDATA        #IMPLIED&gt;
&lt;!ATTLIST isopackager emitBitmap    (true|false) #IMPLIED&gt;
&lt;!ATTLIST isopackager headerLength  CDATA        #IMPLIED&gt;

&lt;!-- isofield --&gt;
&lt;!ELEMENT isofield (#PCDATA)&gt;
&lt;!ATTLIST isofield id     CDATA        #REQUIRED&gt;
&lt;!ATTLIST isofield length CDATA        #REQUIRED&gt;
&lt;!ATTLIST isofield name   CDATA        #REQUIRED&gt;
&lt;!ATTLIST isofield class  NMTOKEN      #REQUIRED&gt;
&lt;!ATTLIST isofield token  CDATA        #IMPLIED&gt;
&lt;!ATTLIST isofield pad    (true|false) #IMPLIED&gt;

&lt;!-- isofieldpackager --&gt;
&lt;!ELEMENT isofieldpackager (isofield+,isofieldpackager*)*&gt;
&lt;!ATTLIST isofieldpackager id       CDATA        #REQUIRED&gt;
&lt;!ATTLIST isofieldpackager name     CDATA        #REQUIRED&gt;
&lt;!ATTLIST isofieldpackager length   CDATA        #REQUIRED&gt;
&lt;!ATTLIST isofieldpackager class    NMTOKEN      #REQUIRED&gt;
&lt;!ATTLIST isofieldpackager token    CDATA        #IMPLIED&gt;
&lt;!ATTLIST isofieldpackager pad      (true|false) #IMPLIED&gt;
&lt;!ATTLIST isofieldpackager packager NMTOKEN      #REQUIRED&gt;
&lt;!ATTLIST isofieldpackager emitBitmap (true|false) #IMPLIED&gt;
&lt;!ATTLIST isofieldpackager maxValidField CDATA        #IMPLIED&gt;
&lt;!ATTLIST isofieldpackager bitmapField CDATA        #IMPLIED&gt;
&lt;!ATTLIST isofieldpackager firstField  CDATA        #IMPLIED&gt;
&lt;!ATTLIST isofieldpackager headerLength  CDATA        #IMPLIED&gt;</screen>
<simpara>GenericPackager&#8217;s DTD eases the configuration of nested messages
(an ISO-8583 field that is a full ISO-8583 message itself), e.g.:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   ...
   ...
  &lt;isofieldpackager
      id="127"
      length="255"
      name="FILE RECORS(S) ACTION/DATA"
      class="org.jpos.iso.IFB_LLHBINARY"
      packager="org.jpos.iso.packager.GenericSubFieldPackager"&gt;
      &lt;isofield
          id="0"
          length="1"
          name="FILE UPDATE COD"
          class="org.jpos.iso.IFE_CHAR"/&gt;
      &lt;isofield
          id="1"
          length="19"
          name="ACCOUNT NUMBER"
          pad="true"
          class="org.jpos.iso.IFB_LLHNUM"/&gt;
      &lt;isofield
          id="2"
          length="4"
          name="PURGE DATE"
          pad="true"
          class="org.jpos.iso.IFB_NUMERIC"/&gt;
      ...
      ...
      ...
  &lt;/isofieldpackager&gt;</programlisting>
<note>
<simpara>The <literal>GenericPackager</literal> uses an entity resolver that recognizes the PUBLIC DTD
in order to avoid loading it over the internet. This is particularly important
when you run your system in a DMZ with limited access to the outside world.</simpara>
<simpara>In order to take advantage of the entity resolver, you need to make sure
that your packager configuration starts with the following preamble:</simpara>
<screen>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE isopackager PUBLIC
        "-//jPOS/jPOS Generic Packager DTD 1.0//EN"
        "http://jpos.org/dtd/generic-packager-1.0.dtd"&gt;</screen>
</note>
</section>
</chapter>
<chapter xml:id="_channels">
<title>Channels</title>
<simpara>jPOS comes with several channel implementations, most of which
are available in the <literal>src/main/java/org/jpos/iso/channel</literal> directory.</simpara>
<section xml:id="_tcpip_socket_based_channels">
<title>TCP/IP Socket-based channels</title>
<simpara>Most TCP/IP-based channel implementations extend
<literal>org.jpos.iso.BaseChannel</literal> and just override the
<literal>sendMessageLength</literal> and <literal>getMessageLength</literal> methods.</simpara>
<simpara>Let&#8217;s have a look at <literal>org.jpos.iso.channel.CSChannel</literal>:
it uses a two-byte message length header sent in network
byte order (nbo) plus two bytes reserved for future use:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class CSChannel extends BaseChannel {
    ...
    ...
    protected void sendMessageLength(int len) throws IOException {
        serverOut.write (len &gt;&gt; 8);
        serverOut.write (len);
        serverOut.write (0);
        serverOut.write (0);
    }
    ...
    ...
    protected int getMessageLength() throws IOException, ISOException {
        int l = 0;
        byte[] b = new byte[4];
        while (l == 0) {
            serverIn.readFully(b,0,4);
            l = ((((int)b[0])&amp;0xFF) &lt;&lt; 8) | (((int)b[1])&amp;0xFF);
            if (l == 0) {
                serverOut.write(b);
                serverOut.flush();
            }
        }
        return l;
    }
}</programlisting>
<simpara>Here is a partial list of current channel implementations
(for a complete list, have a look at <literal>jpos/src/main/java/org/jpos/iso/channel</literal>):</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<thead>
<row>
<entry align="left" valign="top">Class name</entry>
<entry align="left" valign="top">Wire protocol</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>CSChannel</simpara></entry>
<entry align="left" valign="top"><simpara>LL LL 00 00 [header] ISO-DATA
LL LL represents the [header+] ISO-DATA length in network byte order
00 00 reserved for future use
The header is optional
ISO-DATA: ISO-8583 image</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>NACChannel</simpara></entry>
<entry align="left" valign="top"><simpara>LL LL [TPDU] ISO-DATA
LL LL represents the TPDU+ISO-DATA length  in network byte order
Optional TPDU (transport protocol data unit)
ISO-DATA: ISO-8583 image</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>NCCChannel</simpara></entry>
<entry align="left" valign="top"><simpara>LL LL [TPDU] ISO-DATA
LL LL represents the TPDU+ISO-DATA length  in BCD (binary coded decimal)
Optional TPDU (transport protocol data unit)
ISO-DATA: ISO-8583 image</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ASCIIChannel</simpara></entry>
<entry align="left" valign="top"><simpara>LLLL [header] ISO-DATA
      LLLL four bytes ASCII [header+] ISO-DATA length
Optional header
ISO-DATA: ISO-8583 image</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>RawChannel</simpara></entry>
<entry align="left" valign="top"><simpara>LL LL LL LL [header]  ISO-DATA
LL LL LL LL is [header+] ISO-DATA length  in network byte order</simpara><simpara>ISO-DATA: ISO-8583 image</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>VAPChannel</simpara></entry>
<entry align="left" valign="top"><simpara>LL LL 00 00 header ISO-DATA
LL LL represents the header+ISO-DATA length  in network byte order
00 00 reserved for future use
VAP-specific header
ISO-DATA: ISO-8583 image</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PADChannel</simpara></entry>
<entry align="left" valign="top"><simpara>[header] ISO-DATA
Stream-based channel reads messages on-the-fly without using any kind of message boundary indicator.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>X25Channel</simpara></entry>
<entry align="left" valign="top"><simpara>X25 is similar to PADChannel but uses a slightly different
 strategy. Instead of pulling an ISO-8583 from a stream, unpacking
it on the fly, X25Channel attempts to read full TCP/IP packets
by specifying a small timeout value. Whenever possible, PADChannel
seems like a better solution; however, certain X.25 packet
assembler/disassemblers sometimes send garbage over the wire
(i.e. ETXs) which might confuse PADChannel.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>XMLChannel</simpara></entry>
<entry align="left" valign="top"><simpara>Send/Receive messages in jPOS&#8217;s internal XML message representation</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LogChannel</simpara></entry>
<entry align="left" valign="top"><simpara>Similar to XMLChannel, but you can feed it a jPOS Log,
which is suitable to replay sessions</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_ssl_channels">
<title>SSL Channels</title>
<simpara>SocketFactories (like <literal>ISOServer</literal>), as well as most channels that inherit
from <literal>BaseChannel</literal> can delegate socket creation to an optional socket factory.</simpara>
<simpara>We have two kinds of socket factories:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>ISOClientSocketFactory</literal></simpara>
</listitem>
<listitem>
<simpara><literal>ISOServerSocketFactory</literal></simpara>
</listitem>
</itemizedlist>
<programlisting language="java" linenumbering="unnumbered">public interface ISOClientSocketFactory {
    public Socket createSocket(String host, int port)
        throws IOException, ISOException;
}

public interface ISOServerSocketFactory {
    public ServerSocket createServerSocket(int port)
        throws IOException, ISOException;
}</programlisting>
<simpara>as well as a provider that implements both of them: <literal>org.jpos.iso.GenericSSLSocketFactory</literal></simpara>
<simpara>The ChannelAdaptor accepts an optional <emphasis>socketFactory</emphasis> property in the
channel configuration, and the QServer accepts a <emphasis>server-socket-factory</emphasis>
child element.</simpara>
<example>
<title>SocketFactory configuration in a ChannelAdaptor</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;channel-adaptor name='sslclient'
    class="org.jpos.q2.iso.ChannelAdaptor" logger="Q2"&gt;
 &lt;channel class="org.jpos.iso.channel.NACChannel" logger="Q2"
       packager="org.jpos.iso.packager.ISO87BPackager"&gt;

  &lt;property name="host" value="127.0.0.1" /&gt;
  &lt;property name="port" value="10000" /&gt;
  &lt;property name="timeout" value="360000" /&gt;
  &lt;property name="socketFactory" value="org.jpos.iso.GenericSSLSocketFactory" /&gt;
 &lt;/channel&gt;
 &lt;in&gt;sslsend&lt;/in&gt;
 &lt;out&gt;sslreceive&lt;/out&gt;
 &lt;reconnect-delay&gt;10000&lt;/reconnect-delay&gt;
&lt;/channel-adaptor&gt;</programlisting>
</example>
<example>
<title>SocketFactory configuration in a QServer</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;server name="server"
    class="org.jpos.q2.iso.QServer" logger="Q2"&gt;
   &lt;attr name="port" type="java.lang.Integer"&gt;5000&lt;/attr&gt;
   &lt;server-socket-factory class="org.jpos.iso.GenericSSLSocketFactory" /&gt;
   &lt;channel class="org.jpos.iso.channel.NACChannel" logger="Q2"
      packager="org.jpos.iso.packager.ISO87BPackager"&gt;
   &lt;/channel&gt;
&lt;/server&gt;</programlisting>
</example>
<note>
<simpara>For backward compatibility, we also have a <literal>SunJSSESocketFactory</literal> implementation
that uses <literal>com.sun.net.ssl.internal.ssl.Provider</literal>.</simpara>
</note>
<tip>
<simpara><literal>GenericSSLSocketFactory</literal> honors two very important properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>addEnabledCipherSuite</literal> and</simpara>
</listitem>
<listitem>
<simpara><literal>addEnabledProtocol</literal></simpara>
</listitem>
</itemizedlist>
<simpara>For PCI compliance, you want to make sure which protocols and ciphersuites you
want to enable. If these properties are not configured, all protocols and ciphersuites
available to the JVM will be enabled, something you probably don&#8217;t want.</simpara>
</tip>
</section>
<section xml:id="_loopbackchannel">
<title>LoopbackChannel</title>
<simpara>Loopback channel bounces all received messages using a blocking queue. It can
be used for simulation purposes. When using in combination with a suitable
ISOFilter, you can modify the outgoing or incoming (bounced) message so it
can easily simulate a response.</simpara>
<programlisting language="java" linenumbering="unnumbered">package loopback;

import java.io.IOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.ISOFilter;
import org.jpos.iso.ISOChannel;
import org.jpos.iso.ISOException;
import org.jpos.iso.channel.LoopbackChannel;
import org.jpos.util.LogEvent;

public class Test implements ISOFilter {
    public static void main (String[] args) {
        try {
            new Test().run();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void run () throws ISOException, IOException {
        LoopbackChannel channel = new LoopbackChannel ();
        channel.addIncomingFilter (this);
        ISOMsg request  = createRequest();
        request.dump (System.out, "request&gt;  ");
        channel.send (request);
        ISOMsg response = channel.receive();
        response.dump (System.out, "response&gt; ");
    }

    private ISOMsg createRequest () throws ISOException {
        ISOMsg m = new ISOMsg ("0800");
        m.set (11, "000001");
        m.set (41, "29110001");
        m.set (70, "301");
        return m;
    }
    public ISOMsg filter (ISOChannel channel, ISOMsg m, LogEvent evt) {
        try {
            m.setResponseMTI ();
            m.set (39, "00");
        } catch (ISOException e) {
            e.printStackTrace();
        }
        return m;
    }
}</programlisting>
<simpara>The previous program produces the following output:</simpara>
<screen>request&gt;  &lt;isomsg&gt;
request&gt;    &lt;field id="0" value="0800"/&gt;
request&gt;    &lt;field id="11" value="000001"/&gt;
request&gt;    &lt;field id="41" value="29110001"/&gt;
request&gt;    &lt;field id="70" value="301"/&gt;
request&gt;  &lt;/isomsg&gt;
response&gt; &lt;isomsg direction="incoming"&gt;
response&gt;   &lt;field id="0" value="0810"/&gt;
response&gt;   &lt;field id="11" value="000001"/&gt;
response&gt;   &lt;field id="39" value="00"/&gt;
response&gt;   &lt;field id="41" value="29110001"/&gt;
response&gt;   &lt;field id="70" value="301"/&gt;
response&gt; &lt;/isomsg&gt;</screen>
<tip>
<simpara>For a better way to simulate a remote host, you can have a look at the
<emphasis role="strong">serversimulator</emphasis> module in the jPOS-EE distribution.</simpara>
</tip>
</section>
<section xml:id="_channelpool">
<title>ChannelPool</title>
<simpara>ChannelPool is an ISOChannel implementation that delegates channel operations
to its children channels.</simpara>
<simpara>It can handle several children channels, making it suitable to implement transparent failover.</simpara>
<simpara>By using its <literal>addChannel</literal> and <literal>removeChannel</literal> methods, you can react to network
problems on-the-fly without affecting higher-level layers of your application.</simpara>
<tip>
<simpara>As an alternative to the <literal>ChannelPool</literal>,
Q2 applications can use multiple <literal>ChannelAdaptors</literal>
configured with the same set of Space queues (in/out).
In addition, there&#8217;s a <literal>MUXPool</literal> that provides failover as
well as round-robin load balancing at the MUX level.</simpara>
</tip>
</section>
<section xml:id="_channel_filters">
<title>Channel Filters</title>
<simpara>Filters give the ability to alter an incoming or outgoing message.</simpara>
<simpara>jPOS comes with a few stock filters, mostly provided as proof-of-concept.</simpara>
<section xml:id="_md5filter">
<title>MD5Filter</title>
<simpara>On outgoing messages, the MD5Filter computes an MD5 hash of a key plus the
content of a selected number of fields from the ISOMsg and places the hash
in fields 64 (first half) and 128 (second half).</simpara>
<simpara>On incoming messages, it computes the same MD5 hash and verifies they match
the one coming in fields 64 and 128.</simpara>
<note>
<simpara>Mentioning MD5 would probably guarantee your QSA to go ballistic. While using
MD5 is better than no message authentication at all, please consider this
filter as an example to implement MAC filters.</simpara>
</note>
</section>
<section xml:id="_channelinfofilter">
<title>ChannelInfoFilter</title>
<simpara>In a Q2 environment where components are totally decoupled via multiplexers (MUX),
and sometimes multiplexer pools (MUXPool), a client calling <literal>MUX.request(...)</literal>
may not know which channel was actually used to send the message, or from which
channel a response came. <literal>ChannelInfoFilter</literal> can place the channel name, and
socket information in two customized fields.</simpara>
<simpara>Interesting enough, while ISO-8583 uses fields up to 128, you can internally use
fields beyond that (any arbitrary number greater than 128 would do) to store that
information, so you can configure your filter like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;channel class="org.jpos.iso.channel.NACChannel" logger="Q2"
       packager="org.jpos.iso.packager.GenericPackager"&gt;

  &lt;property name="packager-config" value="jar:packager/iso87ascii.xml" /&gt;
  &lt;property name="host" value="127.0.0.1" /&gt;
  &lt;property name="port" value="9001" /&gt;
  &lt;property name="timeout" value="360000" /&gt;
  &lt;filter class='org.jpos.iso.filter.ChannelInfoFilter' direction='both'&gt;
    &lt;property name='channel-name' value='1000' /&gt;
    &lt;property name='socket-info'  value='1001' /&gt;
  &lt;/filter&gt;
 &lt;/channel&gt;</programlisting>
<simpara>The log would show something like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;isomsg&gt;
      ...
      ...
      &lt;field id="1000" value="selftest-adaptor"/&gt;
      &lt;field id="1001" value="127.0.0.1:51865 127.0.0.1:9001"/&gt;
    &lt;/isomsg&gt;</programlisting>
</section>
<section xml:id="_delayfilter">
<title>DelayFilter</title>
<simpara>The DelayFilter is a demo filter that honors a <literal>delay</literal> property and can
be useful to delay messages as they come and go, useful for debugging/simulation
purposes.</simpara>
</section>
<section xml:id="_debugfilter">
<title>DebugFilter</title>
<simpara>The DebugFilter adds to the log an hex representation of the binary message as
it comes and go through the wire. It&#8217;s very useful in situations where you
want to capture a message that is not properly unpacking without having to
revert to <literal>tcpdump</literal> or <literal>nc</literal>. This filter is of course a no-no in a production
environment (per PCI requirements).</simpara>
</section>
<section xml:id="_throughputcontrolfilter">
<title>ThroughputControlFilter</title>
<simpara>The ThroughputControlFilter honors two properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>transactions</literal> and</simpara>
</listitem>
<listitem>
<simpara><literal>period</literal> (in milliseconds).</simpara>
</listitem>
</itemizedlist>
<simpara>and can be used to apply back pressure to a channel sending a large number of transactions.
We can configure for example a maximum of 100 messages in a 1000 milliseconds period in
order to make sure that this particular channel won&#8217;t load the system with more than 100 TPS.</simpara>
</section>
<section xml:id="_bshfilter">
<title>BSHFilter</title>
<simpara>The BSHFilter is one of the most useful, and one of the most abused filters. It allows you to
run a <link xl:href="http://beanshell.org">BeanShell</link> script that can be modified on the fly. It&#8217;s extremely
useful in situations where you need to add a field or two, or change the content of a given
field, e.g., while testing on a tight certification window.</simpara>
<simpara>It is not intended to be used as a way to implement your business logic, BSH code is great, but
tend to become brittle, difficult to refactor, test, you don&#8217;t have IDE support, etc.</simpara>
<simpara>The configuration might look like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;channel ...&gt;
     &lt;filter class="org.jpos.bsh.BSHFilter" direction="outgoing" &gt;
        &lt;property name="source" value="cfg/myfilter.bsh" /&gt;
     &lt;/filter&gt;
     ...
     ...
    &lt;/channel&gt;</programlisting>
<simpara>Your <literal>bsh</literal> file will have access to the following variables:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>message</literal> - the ISOMsg to be filtered</simpara>
</listitem>
<listitem>
<simpara><literal>channel</literal> - a reference to the ISOChannel associated with this filter</simpara>
</listitem>
<listitem>
<simpara><literal>header</literal>  - if a header is present (on received messages)</simpara>
</listitem>
<listitem>
<simpara><literal>image</literal>   - the binary image of the message (on received messages)</simpara>
</listitem>
<listitem>
<simpara><literal>evt</literal>     - a LogEvent that you can use to add information to the Log</simpara>
</listitem>
<listitem>
<simpara><literal>cfg</literal>     - a reference to the configuration object</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_additional_filters">
<title>Additional filters</title>
<simpara>Take a look at <link xl:href="https://github.com/jpos/jPOS/tree/master/jpos/src/main/java/org/jpos/iso/filter">Github repository</link>
for additional samples.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_jpos_space">
<title>jPOS Space</title>
<simpara>The jPOS Space is a general-purpose coordination component inspired
after <emphasis role="strong">The Linda Coordination Language.</emphasis> <footnote><simpara>See <link xl:href="http://www.cs.yale.edu/Linda/linda-lang.html">http://www.cs.yale.edu/Linda/linda-lang.html</link></simpara></footnote></simpara>
<simpara>While jPOS&#8217;s Space <emphasis role="strong">is not</emphasis> a Linda implementation, we highly recommend learning about
<emphasis role="strong">Linda</emphasis> in order to better understand our Space component and motivation.</simpara>
<simpara>You can think about jPOS&#8217;s Space component as being like a Map where its
entries are lists of objects and its operations are fully synchronized.</simpara>
<simpara>There are three basic operations:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>void out (Object key, Object value)</literal> Puts an object into the space. If an
object under the given key already exists, the object is queued at the end of
a list under that name.</simpara>
</listitem>
<listitem>
<simpara><literal>Object rd (Object key)</literal>
Reads an object from the space under the given key. Blocks until an entry is present.</simpara>
</listitem>
<listitem>
<simpara><literal>Object in (Object key)</literal>
Take the object off the queue. Block until the object under the given key is present.</simpara>
</listitem>
</itemizedlist>
<tip>
<simpara>We picked those cryptic operation names after the Linda Coordination Language
basic operations, but could have used easier to remember names such as:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">write</emphasis> instead of <emphasis>out</emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">read</emphasis> instead of just <emphasis>rd</emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">take</emphasis> instead of <emphasis>in</emphasis></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>After two consecutive <emphasis>out</emphasis> operations using the same <emphasis>key</emphasis> value, the
Space would look like this (first entry is printed as a blue circle while
the second one is red):</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/space-out.jpg" contentwidth="500px"/>
</imageobject>
<textobject><phrase>SpaceOut</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Then an <emphasis>rd</emphasis> operation would return the first entry (the blue one), without
removing it from the space. The space remains with two entries for that particular
key.
<inlinemediaobject>
<imageobject>
<imagedata fileref="images/space-rd.jpg" contentwidth="400px"/>
</imageobject>
<textobject><phrase>SpaceOut</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The <emphasis>in</emphasis> operation on the other hand, takes the first entry (the blue one) off the
Space, leaving the red one.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/space-in.jpg" contentwidth="400px"/>
</imageobject>
<textobject><phrase>SpaceOut</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>At this point, a new <emphasis>rd</emphasis> operation will return the second entry (the red one)
and an <emphasis>in</emphasis> operation would return the red one as well, leaving the space empty
(further <emphasis>rd</emphasis> or <emphasis>in</emphasis> operations on that particular key will block.</simpara>
<section xml:id="space_interface">
<title>Space interface</title>
<simpara>In addition to those three basic operations, <literal>org.jpos.space.Space</literal> adds a few
handy methods:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>void out (K key, V value, long timeout)</literal>
Place an object into the space using an expiration timeout.
The entry is automatically removed upon expiration.</simpara>
</listitem>
<listitem>
<simpara><literal>V rd (K key, long timeout)</literal>
Wait a maximum of <literal>timeout</literal> milliseconds for a given entry; otherwise, return null.</simpara>
</listitem>
<listitem>
<simpara><literal>V in (K key, long timeout)</literal>
Wait a maximum of <literal>timeout</literal> milliseconds for a given entry, and takes it; otherwise, return null.</simpara>
</listitem>
<listitem>
<simpara><literal>V rdp (K key)</literal>
Read an entry if it exists (<emphasis>p</emphasis> for <emphasis>probe</emphasis>).</simpara>
</listitem>
<listitem>
<simpara><literal>V inp (K key)</literal>
Take an entry if it exists (again, <emphasis>p</emphasis> for <emphasis>probe</emphasis>).</simpara>
</listitem>
<listitem>
<simpara><literal>void nrd (K key)</literal>
Block while key is present in the space. The operation name comes after <emphasis>not read</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><literal>V nrd (K key, long timeout)</literal>
Block up to timeout milliseconds while key is present in the space.
If timeout is reached and key is still present, returns its value (as in <emphasis>rdp</emphasis>).</simpara>
</listitem>
<listitem>
<simpara><literal>void push (K key, V value)</literal>
Same as <literal>out</literal> but the entry is placed at the head of the queue (like a Stack&#8217;s push operation).</simpara>
</listitem>
<listitem>
<simpara><literal>void push (K key, V value, long timeout)</literal>
Same as the previous <literal>push</literal> operation with a timeout in millis.</simpara>
</listitem>
<listitem>
<simpara><literal>public void put (K key, V value)</literal>
Like a <literal>Map.put</literal> operation, a <literal>Space.put</literal> wipes all entries that may exist under a given
key and puts just this one.</simpara>
</listitem>
<listitem>
<simpara><literal>public void put (K key, V value, long timeout)</literal>
Same as previous one, but with a timeout.</simpara>
</listitem>
</itemizedlist>
<simpara>See <link xl:href="http://jpos.org/doc/javadoc/org/jpos/space/Space.html">Javadoc</link> for full details and
additional helper methods (such as the handy <literal>existAny(K[] keys</literal>).</simpara>
<note>
<simpara>While <literal>org.jpos.space.Space</literal> supports <quote>generics</quote>, current implementations
does not guarantee object type.
Use with care as an unexpected <literal>ClassCastException</literal> can occurr.</simpara>
</note>
<simpara>The Space interface is small enough to show here:</simpara>
<programlisting language="java" linenumbering="unnumbered">package org.jpos.space;

public interface Space&lt;K,V&gt; {
    public void out (K key, V value);
    public void out (K key, V value, long timeout);
    public V in  (Object key);
    public V rd  (Object key);
    public V in  (Object key, long timeout);
    public V rd  (Object key, long timeout);
    public V inp (Object key);
    public V rdp (Object key);
    public void push (K key, V value);
    public void push (K key, V value, long timeout);
    public boolean existAny (K[] keys);
    public boolean existAny (K[] keys, long timeout);
    public void put (K key, V value);
    public void put (K key, V value, long timeout);
}</programlisting>
</section>
<section xml:id="local_space_interface">
<title>Local Space interface</title>
<simpara>The <literal>Space</literal> implementation is designed to be easy to implement under
different scenarios, such as persistent spaces, remote spaces, replicated
spaces.</simpara>
<simpara>The <literal>LocalSpace</literal> interface enhances the <literal>Space</literal> interface in situations where
the implementation runs in a single JVM, such as the <literal>TSpace</literal> implementation.</simpara>
<simpara>The additional methods include:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface LocalSpace {
    public void addListener (Object key, SpaceListener listener);
    public void addListener (Object key, SpaceListener listener, long timeout);
    public void removeListener (Object key, SpaceListener listener);
}</programlisting>
<simpara>as well as some miscellaneous methods that could be expensive to transmit over the wire and were left out in the base <literal>Space</literal> implementation.</simpara>
<programlisting language="java" linenumbering="unnumbered">    public Set getKeySet ();
    public int size (Object key);</programlisting>
<simpara>The <literal>SpaceListener</literal> implementation looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface SpaceListener {
    public void notify (Object key, Object value);
}</programlisting>
<note>
<simpara>With the <literal>LocalSpace</literal> we can create event-driven consumers that allows us to
reduce the number of threads. A good example is the thread-less lightweight
<literal>QMUX</literal> implementation.</simpara>
</note>
</section>
<section xml:id="space_factory">
<title>Space Factory</title>
<simpara>jPOS comes with several space implementations:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">TSpace</emphasis> : An in-memory space <footnote><simpara>TSpace implements LocalSpace</simpara></footnote></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">JDBMSpace</emphasis> : a persistent JDBM based space implementation</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">JESpace</emphasis> : a persistent Berkeley DB Java Edition based implementation</simpara>
</listitem>
</itemizedlist>
<simpara>that can be instantiated using the SpaceFactory.</simpara>
<simpara>Although most Space implementations have either public constructors or factory
methods that can be used to create instances of their respective classes, we
highly recommend using the  <literal>SpaceFactory</literal> as the entry point for space
creation or to obtain references to spaces that were previously created.</simpara>
<example>
<title>Using the SpaceFactory</title>
<programlisting language="java" linenumbering="unnumbered">   import org.jpos.space.Space;
   import org.jpos.space.SpaceFactory;

   Space sp = SpaceFactory.getSpace();</programlisting>
</example>
<simpara>The previous example returns a reference to the default space, which happens to
be a TSpace implementation registered with the name <literal>default</literal>. It&#8217;s the same as
calling:</simpara>
<programlisting language="java" linenumbering="unnumbered">   Space sp = SpaceFactory.getSpace("tspace");</programlisting>
<simpara>&#8230;&#8203;which is also the same as calling:</simpara>
<programlisting language="java" linenumbering="unnumbered">   Space sp = SpaceFactory.getSpace("tspace:default");</programlisting>
<simpara>SpaceFactory decodes a space name based on the space implementation type,
followed by an optional name and optional parameter(s):
<literal>spacetype\[:spacename\[:spaceparam}}</literal></simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Space Names</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<thead>
<row>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Implementation</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>tspace</simpara></entry>
<entry align="left" valign="top"><simpara>Creates or returns a reference to a previously-created instance of <literal>TSpace</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>jdbm</simpara></entry>
<entry align="left" valign="top"><simpara>Creates or returns a reference to a previously-created instance of
<literal>JDBMSpace</literal>. This name accepts an optional
parameter (after the Space name) which is a path to the persistent
store, e.g., <literal>jdbm:myspace:/tmp/myspace</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>je</simpara></entry>
<entry align="left" valign="top"><simpara>Creates or returns a reference to a previously-created instance of
<literal>JESpace</literal>. This name accepts an optional parameter (after the Space name)
which is a path to the persistent store, e.g., <literal>jdbm:myspace:/tmp/myjespace</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spacelet</simpara></entry>
<entry align="left" valign="top"><simpara>Returns a reference to a previously-created instance of <literal>SpaceLet</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<simpara>Some components communicate through a <emphasis role="strong">default space</emphasis> that may change
over time, so it is very important to <literal>SpaceFactory.getSpace()</literal> instead
of instantiating your own. In previous versions, the default space was
<literal>transient:default</literal>, and now is <literal>tspace:default</literal> but this may change
in future versions of jPOS as new Space implementations become available.</simpara>
<simpara>By sticking to <literal>SpaceFactory.getSpace()</literal> jPOS will give you always the
default space for the version you&#8217;re using.</simpara>
</note>
</section>
<section xml:id="tspace">
<title>TSpace</title>
<simpara>TSpace replaces the old <emphasis>TransientSpace</emphasis> as the new default in-memory Space used by jPOS components.</simpara>
<simpara>It&#8217;s the space you get when you call <literal>SpaceFactory.getSpace()</literal> and can be also instantiated using the <literal>tspace:xxx</literal> name (i.e. <literal>SpaceFactory.getSpace("tspace:myspace")</literal>).</simpara>
<simpara>TSpace implements the LocalSpace interface (see next <xref linkend="local_space_interface"/>).</simpara>
<example>
<title>Sample TSpace use</title>
<programlisting language="java" linenumbering="unnumbered">import org.jpos.space.Space;
import org.jpos.space.SpaceFactory;

Space sp = SpaceFactory.getSpace();
sp.out("A", "The quick brown fox jumped over the lazy dog");
System.out.println (sp.rdp ("A"));</programlisting>
</example>
</section>
<section xml:id="jdbm_space">
<title>JDBMSpace</title>
<simpara>JDBMSpace is a persistent space based on the popular <link xl:href="http://jdbm.sourceforge.net/">jDBM</link> key-value lightweight database.</simpara>
<simpara>It uses the SpaceFactory prefix <literal>jdbm</literal> that must be followed by a name, and an optional path, i.e.:</simpara>
<programlisting language="java" linenumbering="unnumbered">Space sp = SpaceFactory.getSpace("jdbm:myspace");</programlisting>
<simpara>or</simpara>
<programlisting language="java" linenumbering="unnumbered">Space sp = SpaceFactory.getSpace("jdbm:myspace:data/myspace");</programlisting>
<tip>
<simpara>JDBMSpace is good and we&#8217;ve used it for a long time in production
systems, but now there&#8217;s a new faster and more reliable implementation,
the <literal>JESpace</literal> (see <xref linkend="je_space"/>) based on Berkeley DB Java Edition.</simpara>
</tip>
</section>
<section xml:id="je_space">
<title>JESpace</title>
<simpara>JESpace is a persistent space based on Berkeley DB Java Edition.</simpara>
<simpara>It uses the SpaceFactory prefix <literal>je</literal> that must be followed by a name, and an optional path, i.e.:</simpara>
<programlisting language="java" linenumbering="unnumbered">Space sp = SpaceFactory("je:myspace");</programlisting>
<simpara>or</simpara>
<programlisting language="java" linenumbering="unnumbered">Space sp = SpaceFactory("je:myspace:data/myspace");</programlisting>
</section>
<section xml:id="space_interceptor">
<title>SpaceInterceptor</title>
<simpara>SpaceInterceptor implements the <literal>Space</literal> interface and can be used to intercept
calls to a given Space without having to extend its implementation
(See <link xl:href="http://jpos.org/doc/javadoc/org/jpos/space/SpaceInterceptor.html">Javadoc</link>
for full details).</simpara>
<simpara>Using a <literal>SpaceInterceptor</literal>, the developer can override specific methods in
order to perform additional tasks.</simpara>
</section>
<section xml:id="space_tap">
<title>SpaceTap</title>
<simpara>SpaceTap is a <literal>SpaceListener</literal> that can be used to monitor a given LocalSpace
for new entries under a given key.</simpara>
<simpara>Once a SpaceTap is created, it register itself as a listener in the
source LocalSpace and copies all new entries to a destination space.</simpara>
<formalpara>
<title>Space Tap</title>
<para><inlinemediaobject>
<imageobject>
<imagedata fileref="images/SpaceTap.jpg" contentwidth="400px"/>
</imageobject>
<textobject><phrase>SpaceTap</phrase></textobject>
</inlinemediaobject></para>
</formalpara>
<simpara>If you have a source LocalSpace <literal>ssp</literal> and a destination LocalSpace <literal>dsp</literal> and
you want to monitor an entry called "ERRORS", we can use code like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">   SpaceTap spt = new SpaceTap (ssp, dsp, "ERRORS", "ERRORS.COPY", 5000L);</programlisting>
<tip>
<simpara>If your "source" space and "destination" space are the same, you can use
the shorter constructor:</simpara>
<programlisting language="java" linenumbering="unnumbered">   SpaceTap (LocalSpace ssp, Object key, Object tapKey, long timeout);</programlisting>
</tip>
<simpara>The SpaceTap can be used for system monitoring purposes as it provides a
non-intrusive way to "tap" any given space queue.</simpara>
</section>
<section xml:id="space_util">
<title>SpaceUtil</title>
<simpara>In <link xl:href="http://jpos.org/doc/javadoc/org/jpos/space/SpaceUtil.html">SpaceUtil</link>
we put together general purpose helper methods that can be used with any
Space implementation.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><literal>inpAll</literal></emphasis>
pulls all entries under a given key and return them in an array.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><literal>wipe</literal></emphasis>
remove all entries under a given key</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><literal>nextLong</literal></emphasis>
When used in combination with a persistent Space (such as <literal>JDBMSpace</literal>
or <literal>JESpace</literal>), this method can be used to easily implement sequencers,
e.g.:</simpara>
</listitem>
</itemizedlist>
<programlisting language="java" linenumbering="unnumbered">import org.jpos.space.*;
Space sp = SpaceFactory.getSpace("je:sequencers");
long l = SpaceUtil.nextLong(sp, "traceno");</programlisting>
<tip>
<simpara>Regularly monitor this class, as we may add new helper methods in the future.</simpara>
</tip>
</section>
</chapter>
<chapter xml:id="_q2">
<title>Q2</title>
<simpara>In jPOS versions earlier than 1.5.0, the <literal>main</literal> for the jPOS application
was a component called <emphasis role="strong">QSP</emphasis>.</simpara>
<note>
<simpara>The term <emphasis role="strong">QSP</emphasis> comes after the hamradio Q-signal codes and
it means "Relay message for free". Because jPOS was used to
<emphasis>relay messages</emphasis>, and it is free software, in the deep nerdy
mind of the author, the term <emphasis role="strong">QSP</emphasis> made sense
<footnote><simpara><link xl:href="http://en.wikipedia.org/wiki/Q_code">http://en.wikipedia.org/wiki/Q_code</link></simpara></footnote>.</simpara>
<simpara>That&#8217;s one of the reasons you&#8217;ll see so many _Q_s in the code
(QServer, QMUX, Q2 &#8230;&#8203;).</simpara>
</note>
<simpara>After deploying QSP in several mission-critical applications, we found that
including all the components in a single [huge] XML configuration file
was not a good idea.</simpara>
<itemizedlist>
<listitem>
<simpara>Although several QSP components supported some limited ReConfiguration,
many others didn&#8217;t. As a result, major changes usually involved restarting
the application (a very costly operation in a 24/7 system).</simpara>
</listitem>
<listitem>
<simpara>If for some reason, the changes involved went beyond just tweaking a
configuration file and required additional changes in a supporting
jar file, the application had to be restarted (QSP didn&#8217;t support
dynamic classloading).</simpara>
</listitem>
<listitem>
<simpara>Having a single big configuration file has proven to be error-prone.
Although initially intended to be accessible to system operators,
changing QSP files on critical systems became an  <emphasis>art</emphasis> reserved for
experienced operators.</simpara>
</listitem>
</itemizedlist>
<simpara>Therefore, we&#8217;ve decided to use a simpler approach: A new container (called Q2,
short for QSP version 2) with a file per component and a very simple lifecycle
to ease the implementation of such components, called <emphasis role="strong">QBeans</emphasis> (Q2 Beans).</simpara>
<note>
<simpara>We use the terms <emphasis role="strong">QBeans</emphasis>
and <emphasis role="strong">Q2 service</emphasis> interchangeable.</simpara>
</note>
<simpara>QBeans are MBeans (see JMX specs) that implement the Q2&#8217;s lifecycle
(init/start/stop/destroy) set of operations. Q2 takes care of
registering them with the system&#8217;s MBeanServer.</simpara>
<section xml:id="running_Q2">
<title>Running Q2</title>
<simpara>Running Q2 is as simple as calling <literal>java -jar jpos.jar</literal>, provided
the jPOS dependencies are available in the <literal>lib</literal> directory.</simpara>
<simpara>The reason why this works without setting a specific CLASSPATH is because
we have configured the build system to produce a suitable MANIFEST.MF
that contains the following relevant parts:</simpara>
<programlisting language="xml" linenumbering="unnumbered">...
...
Main-Class: org.jpos.q2.Q2
Class-Path: lib/jdom-1.1.3.jar lib/jdbm-1.0.jar lib/je-4.1.10.jar lib/
 commons-cli-1.2.jar lib/jline-1.0.jar lib/bsh-2.0b5.jar lib/javatuple
  s-1.2.jar lib/xercesImpl-2.10.0.jar lib/org.osgi.core-4.3.1.jar lib/x
   ml-apis-1.4.01.jar
...
...</programlisting>
<tip>
<simpara>You can of course use the more convenient <literal>bin/q2</literal> script (or <literal>bin\q2.bat</literal> in Windows),
but you don&#8217;t have to worry about setting up a classpath if the <literal>lib</literal> directory relative
to your current working directory has the appropriate support files.</simpara>
</tip>
<simpara>Q2 accepts several command line switches; for a complete list,
use <literal>--help</literal>, e.g.:</simpara>
<screen>bin/q2 --help

usage: Q2
 -C,--config &lt;arg&gt;                 Configuration bundle
 -c,--command &lt;arg&gt;                Command to execute
 -d,--deploydir &lt;arg&gt;              Deployment directory
 -e,--encrypt &lt;arg&gt;                Encrypt configuration bundle
 -h,--help                         Usage information
 -i,--cli                          Command Line Interface
 -n,--name &lt;arg&gt;                   Optional name (defaults to 'Q2')
 -O,--osgi                         Start experimental OSGi framework
                                   server
 -p,--pid-file &lt;arg&gt;               Store project's pid
 -r,--recursive                    Deploy subdirectories recursively
 -s,--ssh                          Enable SSH server
 -sa,--ssh-authorized-keys &lt;arg&gt;   Path to authorized key file (defaults
                                   to 'cfg/authorized_keys')
 -sh,--ssh-host-key-file &lt;arg&gt;     ssh host key file, defaults to
                                   'cfg/hostkeys.ser'
 -sp,--ssh-port &lt;arg&gt;              ssh port (defaults to 2222)
 -su,--ssh-user &lt;arg&gt;              ssh user (defaults to 'admin')
 -v,--version                      Q2's version</screen>
<simpara>Q2 has a reasonable set of defaults so you usually don&#8217;t have to use
any argument when calling it. A simple call to <literal>bin/q2</literal> should look
like this:</simpara>
<screen>&lt;log realm="Q2.system" at="2016-10-16T20:19:41.174"&gt;
  &lt;info&gt;
    Q2 started, deployDir=/Users/apr/git/jpos/jpos/build/install/jpos/deploy
  &lt;/info&gt;
&lt;/log&gt;</screen>
<tip>
<simpara>Please pay attention to the <literal>deployDir</literal> shown in the previous log
message. In this case, it reads
<literal>/home/jpos/git/jpos/jpos/build/install/jpos/deploy</literal></simpara>
<simpara>You can override the default deploy directory using the <literal>--deploydir</literal>
(or just <literal>-d</literal>) option when calling Q2.</simpara>
<simpara>In this particular case, we are running off the <literal>build/install/jpos</literal>
directory, because we called <literal>gradle installApp</literal> which is handy for
local tests.</simpara>
</tip>
<simpara>At start up time, Q2 scans the <literal>deploy</literal> directory looking for
<emphasis role="strong">deployment descriptors</emphasis> (that we also call <emphasis role="strong">QBean descriptors</emphasis>).
Those are tiny XML files that are used to start and configure Q2&#8217;s
services.</simpara>
<simpara>The directory is sorted in alphabetical order, providing an easy way
to start services in an ordered way.</simpara>
<simpara>Q2 needs a logger, so the first thing it looks for is a logger configuration,
which has a well known QBean descriptor name: <emphasis role="strong">00_logger.xml</emphasis>. This is
the only special name used by Q2, and is required to provide some
visibility into the start-up process. If there&#8217;s no <literal>00_logger.xml</literal>
defining the <emphasis role="strong">Q2</emphasis> logger, Q2 creates one on the fly using a
<emphasis role="strong">SimpleLogListener</emphasis> that outputs log events to <literal>stdout</literal>.</simpara>
<simpara>Having no <literal>00_logger.xml</literal> file in the <literal>deploy</literal> directory is similar
to having one with just the following configuration:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;logger name="Q2"&gt;
  &lt;log-listener class="org.jpos.util.SimpleLogListener" /&gt;
&lt;/logger&gt;</programlisting>
<note>
<simpara>The default jPOS distribution has two pre-configured files
in the deploy directory:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>00_logger.xml</literal></simpara>
</listitem>
<listitem>
<simpara><literal>99_sysmon.xml</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Sysmon starts the jPOS <emphasis role="strong">SystemMonitor</emphasis> that outputs useful
system health information every hour which is good to keep handy
in production systems.</simpara>
<simpara>Please note that when using the <literal>--cli</literal> command line option that starts the jPOS
command line interface, the default deploy directory is <literal>deploy-cli</literal> instead of
<literal>deploy</literal>. This is to prevent starting services (such as as logger, system monitor)
typically used in jPOS applications. You can of course use the <literal>--deploydir</literal>
command line option and point it back to the default <literal>deploy</literal> directory.</simpara>
<simpara>The <emphasis role="strong">CLI</emphasis> can also be accessed via SSH using the <literal>--ssh</literal> command line option
(in that case, the default deploy directory doesn&#8217;t change).</simpara>
</note>
<section xml:id="_command_line_options">
<title>Command line options</title>
<simpara>The <literal>--help</literal> command line option is self-explanatory,
it shows the list of available options. Same goes for <literal>--version</literal>
it gives you output like this:</simpara>
<screen>$ bin/q2 --version

jPOS 2.0.9-SNAPSHOT master/1592701 (2016-10-16 20:17:56 ART)
...
...</screen>
<simpara>followed by the jPOS license in use (see <link linkend="appendix_license">license</link> for details).</simpara>
<section xml:id="cli_commands">
<title><literal>--cli</literal></title>
<simpara>CLI stands for jPOS Command Line Interface. When calling <literal>bin/q2 --cli</literal> you
should see a prompt like this:</simpara>
<screen>$ bin/q2 --cli

q2&gt;</screen>
<simpara>Typing <emphasis>tab</emphasis> will give you the list of available commands, e.g.:</simpara>
<screen>clr                echo               help               logger_benchmark
shownr             smconsole          tmmon              version
date               env                install            man
shutdown           sysmon             tzcheck            deploy
exit               license            mem                sleep
tail               uptime</screen>
<simpara>The <emphasis>man</emphasis> command can be used to get information about a given command,
i.e.:</simpara>
<screen>q2&gt; man clr

Clear screen</screen>
<simpara>Commands can be separated by a semi-colon, so you can&#8201;&#8212;&#8201;just for fun&#8201;&#8212;&#8201;type</simpara>
<screen>q2&gt; clr; echo Hello; sleep 5; echo jPOS</screen>
<simpara>CLI commands are very easy to write, they just have
to implement the <link xl:href="http://jpos.org/doc/javadoc/org/jpos/q2/CLICommand.html">CLICommand</link>
interface.</simpara>
<simpara>Just to give you an example, the <literal>sleep</literal> command is implemented like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class SLEEP implements CLICommand {
    public void exec(CLIContext cli, String[] args) throws Exception {
        if (args.length &gt; 1) {
            Thread.sleep(Long.parseLong(args[1]) * 1000);
        }
        else {
            cli.println("Usage: sleep number-of-seconds");
        }
    }
}</programlisting>
<simpara>As mentioned above, when you type <emphasis>tab</emphasis>, jPOS gives you a list of
commands. This may change in the future (as we move to OSGi and perhaps
its console service) but right now, we have an easy way to detect CLI
commands: <emphasis role="strong">they live in the <literal>org.jpos.q2.cli</literal> package</emphasis>.</simpara>
<simpara>If you navigate to
<link xl:href="https://github.com/jpos/jPOS/tree/master/jpos/src/main/java/org/jpos/q2/cli">jpos/src/main/java/org/jpos/q2/cli</link>
you&#8217;ll see files like:</simpara>
<screen>CLR.java
COPYRIGHT.java
DATE.java
ECHO.java
HELP.java
INSTALL.java
LICENSE.java
MAN.java
MEM.java
SHOWNR.java
SHUTDOWN.java
SLEEP.java
SMCONSOLE.java
SYSMON.java
TAIL.java
TMMON.java
UPTIME.java
VERSION.java</screen>
<simpara>The command <literal>HELP</literal> reads the manual pages for a given command from a resource
named after the command and ending with the <emphasis>.man</emphasis> extension, so if you
navigate to
<link xl:href="https://github.com/jpos/jPOS/tree/master/jpos/src/main/resources/org/jpos/q2/cli">resources</link>
directory, you&#8217;ll see files like:</simpara>
<screen>CLR.man
INSTALL.man
MEM.man
SHOWNR.man
SHUTDOWN.man
SMCONSOLE.man
TAIL.man
TMMON.man</screen>
<simpara>Containing the help text for some commands.</simpara>
<note>
<simpara>CLI commands become more interesting when combined with the ability
to "connect" to a JVM running Q2 from a remote location, i.e. using
the <literal>--ssh</literal> command line option.</simpara>
</note>
<tip>
<simpara>CLI commands use <literal>jLine3</literal> that supports tab completion and
basic edit capabilities using the cursor, similar to those
of <literal>readline</literal>. Try to type <emphasis>tab</emphasis> while typing a command,
<literal>jLine</literal> will complete it for you.</simpara>
</tip>
<simpara>Some CLI commands are just little proof-of-concept commands that we wrote
while coding the CLI subsystem in order to test it, but a few deserve
some additional comments:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">shownr</emphasis> will give you a useful dump of the <literal>NameRegistrar</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">sysmon</emphasis> will give you output similar to the <literal>SystemMonitor</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">tail</emphasis>, similar to the Unix command <emphasis>tail</emphasis> allows you to monitor
the output of a jPOS logger in real-time.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">tmmon</emphasis> allows you to monitor the TransactionManager in real-time.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">smconsole</emphasis> is a wrapper around the old jPOS security console that
allows you to call it from the jPOS jar so that you don&#8217;t have to
setup the full classpath.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">install</emphasis> extracts sample QBean descriptors from jars in the classpath
and place them in the <emphasis>deploy</emphasis> directory</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The last command <emphasis>install</emphasis> deserves further comment. In jPOS-EE we
build applications off multiple little <emphasis>modules</emphasis> that are distributed
via a Maven repository. Some of those require some configuration files
that are usually placed in the <literal>META-INF/q2/installs</literal> directory.</simpara>
<simpara>If you look inside the jPOS jar, you&#8217;ll see that the <literal>META-INF/q2/installs</literal>
directory contain sample <literal>deploy/00_logger.xml</literal> and <literal>deploy/99_sysmon.xml</literal>
that could be easily extracted using the aforementioned <literal>install</literal> command.</simpara>
</note>
</section>
<section xml:id="_command_arg">
<title><literal>--command &lt;arg&gt;</literal></title>
<simpara>Can be used to run a CLI command from the command line, e.g.:</simpara>
<screen>bin/q2 --command "install --force"</screen>
</section>
<section xml:id="_deploydir_arg">
<title><literal>--deploydir &lt;arg&gt;</literal></title>
<simpara>If you want to use a deploy directory other than the default <literal>deploy</literal>
you can use this <literal>deploydir</literal> option. This can be useful to run different
environments (i.e. <literal>deploy_prod</literal> versus <literal>deploy_test</literal>).</simpara>
</section>
<section xml:id="_recursive">
<title><literal>--recursive</literal></title>
<simpara>This allows you to put some order and hierarchy into your deploy
directory if it becomes too big. You can create sub directories
to group together deployment descriptors associated with different
subsystems.</simpara>
</section>
<section xml:id="_config_arg">
<title><literal>--config &lt;arg&gt;</literal></title>
<simpara>During the migration from <literal>QSP</literal> to <literal>Q2</literal>, jPOS users were used to
the monolithic <literal>QSP</literal> single XML file and while most users
appreciated the value of the fine grained file-per-service
configuration, a few others requested to keep the ability to run
off a single configuration file.</simpara>
<simpara>To create a single config file, you can concatenate together multiple
Q2 descriptors and wrap them with an outer root XML element. The
name of the outer element is not defined, you can use anything you
like, i.e: <literal>&lt;q2&gt;</literal> or <literal>&lt;bundle&gt;</literal> or any other name.</simpara>
<simpara>Here is a sample config:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;q2&gt;
  &lt;logger name="Q2" class="org.jpos.q2.qbean.LoggerAdaptor"&gt;
    &lt;log-listener class="org.jpos.util.SimpleLogListener" /&gt;
  &lt;/logger&gt;

  &lt;sysmon logger="Q2"&gt;
   &lt;attr name="sleepTime" type="java.lang.Long"&gt;3600000&lt;/attr&gt;
   &lt;attr name="detailRequired" type="java.lang.Boolean"&gt;true&lt;/attr&gt;
  &lt;/sysmon&gt;
&lt;/q2&gt;</programlisting>
<simpara>Running <literal>bin/q2 --config your-config-file.xml</literal> will basically
extract each descriptor out of the config file and place it in
the <literal>deploy</literal> directory before actually starting Q2.</simpara>
</section>
<section xml:id="_encrypt_arg">
<title><literal>--encrypt &lt;arg&gt;</literal></title>
<simpara>There are situations where you want to hide some service
configuration from an occasional lurker. You can encrypt
it using this command. The encryption key can be changed,
but it ultimately is stored inside the program, so this is
not very secure, but it&#8217;s good enough to keep an operator
from looking at your QBean descriptors.</simpara>
<simpara>The technique to encrypt a service is similar to the one used
in the previous command <literal>--config</literal>, you create an XML file
with the services you want to encrypt, wrapped by an outer
XML root element (again, with any name you want) and call
<literal>bin/q2 --encrypt file-to-encrypt.xml</literal></simpara>
<simpara>If we call <literal>bin/q2 --encrypt /tmp/sample.xml</literal> the system will
start, but if you look at the <literal>deploy</literal> directory, you&#8217;ll see
that the files that describe the logger and sysmon QBeans
now look like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;protected-qbean&gt;
  &lt;data&gt;6E6A0A545209A80B4AC2735F3DA72..............
  ....065345C9CC6FEAE4186D1AE8D4D4B2E54FEA1AB4777B3&lt;/data&gt;
&lt;/protected-qbean&gt;</programlisting>
<note>
<simpara>Please consider this a small protection against an occasional observer.</simpara>
</note>
</section>
</section>
</section>
<section xml:id="embedding_Q2">
<title>Embedding Q2</title>
<simpara>While we usually start Q2 from the command line (using the <literal>bin/q2</literal> or
<literal>bin/q2.bat</literal> script), Q2 can be instantiated and started from a Java
application using code like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">import org.jpos.q2.Q2;
...
...
Q2 q2 = new Q2("path/to/your/deploy/directory");
q2.start();
...
...</programlisting>
<simpara>You can stop Q2 by calling <literal>q2.stop()</literal>.</simpara>
</section>
<section xml:id="q2_shutdown">
<title>Shutting down Q2</title>
<simpara>If we recall <xref linkend="writing_first_script"/>, we have a <literal>QFactory.properties</literal> file
with some mappings, including a <literal>shutdown</literal> mapping:</simpara>
<screen>shutdown=org.jpos.q2.qbean.Shutdown</screen>
<simpara>So shutting down Q2 is as easy as deploying a QBean&#8201;&#8212;&#8201;let&#8217;s call it
<literal>shutdown.xml</literal>&#8201;&#8212;&#8201;with content like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;shutdown /&gt;</programlisting>
<note>
<simpara>The name <literal>shutdown.xml</literal> can of course be any other name you want.</simpara>
</note>
<simpara>The shutdown QBean is implemented like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    package org.jpos.q2.qbean;
    import org.jpos.q2.QBeanSupport;
    public class Shutdown extends QBeanSupport {
        public void startService() {
            getServer().shutdown ();                                 <co xml:id="CO5-1"/>
        }
    }</programlisting>
<calloutlist>
<callout arearefs="CO5-1">
<para>This <literal>getServer()</literal> method gives us a reference to the Q2 server.
It works because <literal>Shutdown</literal> extends <literal>QBeanSupport</literal> which in turn
implements the method <literal>setServer(Q2)</literal> called by <literal>Q2</literal> via
reflection as described in <xref linkend="qbean_support"/>.</para>
</callout>
</calloutlist>
<simpara>By deploying the <literal>shutdown</literal> QBean you have a clean way to stop a given
Q2 instance without knowing its process ID.</simpara>
<simpara>jPOS provides a <literal>bin/stop</literal> script implemented like this:</simpara>
<screen>#!/bin/sh

echo Stopping Q2
echo '&lt;shutdown/&gt;' &gt; `dirname $0`/../deploy/shutdown.xml</screen>
<tip>
<simpara><literal>bin/start</literal> which in turn calls <literal>bin/q2</literal> removes <literal>deploy/shutdown.xml</literal>
before starting. If you use this shutdown technique using a shutdown name
other than <literal>shutdown.xml</literal> and your find yourself in a situation where Q2
starts and then immediately stops, check the <literal>deploy</literal> directory for services
deploying the Shutdown service.</simpara>
</tip>
</section>
<section xml:id="writing_first_script">
<title>Writing your first Q2 Script</title>
<simpara>Once you have your Q2 running and checking the <literal>deploy</literal> directory for new
QBean descriptors (XML files) as well as the <literal>deploy/lib</literal> directory for new
<literal>jars</literal>, you can try to deploy a QBean.</simpara>
<simpara>Just to test the waters, we&#8217;ll show you how to deploy a <literal>BeanShell</literal>
<footnote><simpara><link xl:href="http://beanshell.org/">http://beanshell.org/</link></simpara></footnote> based QBean.</simpara>
<simpara>Use your preferred text editor to write an XML file like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;script&gt;
  log.info ("Hello jPOS!");
&lt;/script&gt;</programlisting>
<simpara>Let&#8217;s call it <literal>90_hello_jpos.xml</literal> and save it in a temporary directory.</simpara>
<simpara>Now copy that file to your <literal>deploy</literal> directory and you should see output
like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;log realm="Q2.system" at="Sat Oct 19 20:15:48 UYST 2013.237" lifespan="150ms"&gt;
  &lt;info&gt;
    deploy: /home/jpos/jpos/build/install/jpos/deploy/90_hello_jpos.xml
  &lt;/info&gt;
&lt;/log&gt;
&lt;log realm="script" at="Sat Oct 19 20:15:48 UYST 2013.244"&gt;
  &lt;info&gt;
    Hello jPOS!
  &lt;/info&gt;
&lt;/log&gt;</programlisting>
<simpara>That little script is equivalent to:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qbean name='script' class='org.jpos.q2.qbean.BSH' logger='Q2'&gt;
  log.info ("Hello jPOS!");
&lt;/qbean&gt;</programlisting>
<simpara>The reasons this works without specifying the class name, logger name are:</simpara>
<itemizedlist>
<listitem>
<simpara>If there&#8217;s no <literal>name</literal> attribute, Q2 uses the root XML element name as
the bean name, in this case <emphasis>script</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>If there&#8217;s no <literal>logger</literal> attribute, Q2 assigns the default logger name <literal>Q2</literal>.</simpara>
</listitem>
<listitem>
<simpara>If there&#8217;s no <literal>class</literal> attribute, the root element name is used to find
a resource with the mapping. The resource is placed in the
<link xl:href="https://github.com/jpos/jPOS/blob/master/jpos/src/main/resources/org/jpos/q2/QFactory.properties#L3"><literal>QFactory.properties</literal></link></simpara>
</listitem>
</itemizedlist>
<simpara>As of this writing mapping, <literal>QFactory.properties</literal> looks like this:</simpara>
<screen>logger=org.jpos.q2.qbean.LoggerAdaptor
shutdown=org.jpos.q2.qbean.Shutdown
script=org.jpos.q2.qbean.BSH
jython=org.jpos.q2.qbean.Jython
spacelet=org.jpos.q2.qbean.SpaceLet
sysmon=org.jpos.q2.qbean.SystemMonitor
txnmgr=org.jpos.transaction.TransactionManager
transaction-manager=org.jpos.transaction.TransactionManager
qmux=org.jpos.q2.iso.QMUX
channel-adaptor=org.jpos.q2.iso.ChannelAdaptor
qexec=org.jpos.q2.qbean.QExec</screen>
<simpara>that explains the reason why you can write <literal>&lt;txnmgr&gt;&#8230;&#8203;&lt;/txnmgr&gt;</literal> or
<literal>&lt;qmux&gt;&#8230;&#8203;&lt;/qmux&gt;</literal> without specifying a <literal>class</literal> attribute.</simpara>
<simpara>The previous BeanShell based QBean is very useful to run quick tests or
hot fixes to a running jPOS system. Sometimes the Java code written
inside the <literal>&lt;script&gt;&#8230;&#8203;&lt;/script&gt;</literal> XML elements need to use some XML
reserved characters (like <emphasis>&lt;</emphasis> or <emphasis>&gt;</emphasis>). The easiest way to achieve that
is to use a <literal>CDATA</literal> block, like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qbean name='script' class='org.jpos.q2.qbean.BSH' logger='Q2'&gt;&lt;![CDATA[ <co xml:id="CO6-1"/>
  log.info ("Hello jPOS!");
]]&gt;&lt;/qbean&gt;                                                              <co xml:id="CO6-2"/></programlisting>
<calloutlist>
<callout arearefs="CO6-1">
<para>Note the <literal>&lt;![CDATA[ start</literal></para>
</callout>
<callout arearefs="CO6-2">
<para>And its end <literal>]]&gt;</literal></para>
</callout>
</calloutlist>
</section>
<section xml:id="qtest">
<title>QTest - a sample QBean</title>
<simpara>Here is sample code for a simple test QBean. We&#8217;ll call it <literal>QTest</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">package org.jpos.qtest;

import org.jpos.iso.ISOUtil;
import org.jpos.q2.Q2;
import org.jpos.q2.QBean;
import org.jpos.util.Log;

public class QTest implements QBean, Runnable {
    volatile int state;
    long tickInterval = 1000;                                <co xml:id="CO7-1"/>
    Log log;

    public QTest () {
        super();
        state = -1;
        log = Log.getLog(Q2.LOGGER_NAME, "qtest");           <co xml:id="CO7-2"/>
        log.info ("constructor");
    }
    public void init () {
        log.info("init");
        state = STARTING;
    }
    public void start() {
        log.info ("start");
        state = STARTED;
        new Thread(this).start();
    }
    public void stop () {
        log.info ("stop");
        state = STOPPING;
    }
    public void destroy () {
        log.info ("destroy");
        state = STOPPED;
    }
    public void setTickInterval (long tickInterval) {
        this.tickInterval = tickInterval;
    }
    public long getTickInterval () {
        return tickInterval;
    }
    public void run () {
        for (int tickCount=0; running (); tickCount++) {
            log.info ("tick " + tickCount);
            ISOUtil.sleep (tickInterval);
        }
    }
    public int getState () {
        return state;
    }
    public String getStateAsString () {
        return state &gt;= 0 ? stateString[state] : "Unknown";
    }

    private boolean running() {
        return state == QBean.STARTING || state == QBean.STARTED;
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO7-1">
<para>tickInterval is a custom attribute of this QBean</para>
</callout>
<callout arearefs="CO7-2">
<para>in this example, we use the general purpose Q2 logger</para>
</callout>
</calloutlist>
<bridgehead xml:id="_building_qtest" renderas="sect3">Building QTest</bridgehead>
<simpara>The easiest way to play with jPOS is to use the <link xl:href="https://github.com/jpos/jPOS-template">jPOS Template</link> project.</simpara>
<simpara>Open a terminal (or Command window if you&#8217;re on Windows), move to a temporary
directory and type:</simpara>
<screen>git clone git@github.com:jpos/jPOS-template.git qtest

---[ output should look like this ]---
Cloning into 'qtest'...
remote: Counting objects: 165, done.
remote: Compressing objects: 100% (70/70), done.
remote: Total 165 (delta 82), reused 162 (delta 81)
Receiving objects: 100% (165/165), 87.34 KiB | 101 KiB/s, done.
Resolving deltas: 100% (82/82), done.</screen>
<simpara>Then <literal>cd</literal> to your newly created <literal>qtest</literal> directory and try:</simpara>
<screen>mkdir -p src/main/java/org/jpos/qtest</screen>
<simpara>Copy and paste the previous code in a file named <literal>QTest.java</literal>.</simpara>
<tip>
<simpara>For your convenience, you can download the sources for <literal>QTest</literal>
and <literal>QTestMBean</literal> classes from <link xl:href="http://us.jpos.org/examples/qtest-1.0.0.jar">jPOS examples</link>.</simpara>
</tip>
<simpara>Now create an XML file, (let&#8217;s call it <literal>90_qtest.xml</literal>) like this in the <literal>src/dist/deploy</literal> directory:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qbean name='qtest' class='org.jpos.qtest.QTest' /&gt;</programlisting>
<simpara>Now run <literal>gradle installApp</literal> or its handy abbreviation <literal>gradle iA</literal>
(see <xref linkend="building"/> for additional information about how to run Gradle or
 its wrapper <literal>gradlew</literal> or <literal>gradlew.bat</literal>).</simpara>
<note>
<simpara>If you have <literal>Gradle</literal> installed, you should be able to run the
previous command. Otherwise, there&#8217;s a handy <literal>gradlew</literal>
(and <literal>gradelw.bat</literal> if you&#8217;re on Windows).</simpara>
</note>
<simpara>This is not going to work, but it&#8217;s worth to run it and see the error
so you can understand how Q2 loads its QBeans, which are actually
<link xl:href="http://docs.oracle.com/javase/tutorial/jmx/mbeans/">JMX MBeans</link>.</simpara>
<simpara>The <literal>gradle installApp</literal> command should have created a jPOS application
in the <literal>build/install/qtest</literal> directory, so you can navigate there
(<literal>cd buildl/install/qtest</literal>) and call <literal>bin/q2</literal> (or <literal>bin\q2.bat</literal> if
you are on Windows).</simpara>
<tip>
<simpara>If you don&#8217;t want to navigate to the <literal>build/install/qtest</literal> directory,
you can call <literal>gradle run</literal> in the top level directory of the project
or module. This is of course a bad idea for production as you would
be loading Gradle in memory for no reason.</simpara>
</tip>
<simpara>After running it, you should see output like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;log realm="Q2.system" at="Sun Oct 20 16:16:47 UYST 2013.61"&gt;
 &lt;warn&gt;
  Tidying build/install/qtest/deploy/90_qtest.xml out of the            <co xml:id="CO8-1"/>
  way, by adding .BAD
 &lt;/warn&gt;
&lt;/log&gt;

&lt;log realm="Q2.system" at="Sun Oct 20 16:16:47 UYST 2013.62" lifespan="5ms"&gt;
 &lt;info&gt;
  deploy: /private/tmp/test/qtest/build/install/qtest/deploy/90_qtest.xml
  &lt;exception name="MBean class org.jpos.test.QTest does not implement   <co xml:id="CO8-2"/>
DynamicMBean, and neither follows the Standard MBean conventions
(javax.management.NotCompliantMBeanException: Class org.jpos.test.QTest
is not a JMX compliant Standard MBean) ...
  ...
  ...
 &lt;/info&gt;
&lt;/log&gt;</programlisting>
<calloutlist>
<callout arearefs="CO8-1">
<para>Q2 detects that there&#8217;s a problem with this QBean. In order to
prevent the problem from happening again, it renames it to an
extension other than <literal>.xml</literal>, and as an eye-catcher, it calls it
<literal>.BAD</literal>.</para>
</callout>
<callout arearefs="CO8-2">
<para>The reason for the error is shown below: <literal>QTest</literal> is a not compliant
MBean and can&#8217;t be loaded+.</para>
</callout>
</calloutlist>
<simpara>Q2 uses a JMX MbeanServer to create instances of QBeans, and JMX expects
to pick some information about these classes using and interface named
after the class name and ending with <literal>MBean</literal>.</simpara>
<simpara>So if we are loading a class called <literal>org.jpos.test.QTest</literal>, the JMX MBeanServer
will attempt to load an interface called <literal>org.jpos.test.QTestMBean</literal> first,
if it&#8217;s not there, it won&#8217;t load your QBean.</simpara>
<simpara>Now let&#8217;s create that simple MBean file and place it in
<literal>src/main/java/org/jpos/test/QTestMBean.java</literal>.
It looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">package org.jpos.qtest;

import org.jpos.q2.QBean;

public interface QTestMBean extends QBean {
    public void setTickInterval(long tickInterval) ;
    public long getTickInterval() ;
}</programlisting>
<simpara>In addition, we need to change our <literal>QTest</literal> so that it <literal>implements QTestMBean</literal>.
Because <literal>QTestMBean</literal> extends <literal>QBean</literal>, we can change:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class QTest implements QBean, Runnable {
 ...
 ...
}</programlisting>
<simpara>so that it reads</simpara>
<programlisting language="java" linenumbering="unnumbered">public class QTest implements QTestMBean, Runnable {
 ...
 ...
}</programlisting>
<simpara>Now if you run <literal>build/install/qtest/bin/q2</literal> you&#8217;ll see messages like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;log realm="qtest" at="Sun Oct 20 16:51:27 UYST 2013.28"&gt;
  &lt;info&gt;
    init
  &lt;/info&gt;
&lt;/log&gt;
&lt;log realm="qtest" at="Sun Oct 20 16:51:27 UYST 2013.35"&gt;
  &lt;info&gt;
    start
  &lt;/info&gt;
&lt;/log&gt;
&lt;log realm="qtest" at="Sun Oct 20 16:51:27 UYST 2013.37" lifespan="1ms"&gt;
  &lt;info&gt;
    tick 0
  &lt;/info&gt;
&lt;/log&gt;
...
...
&lt;log realm="qtest" at="Sun Oct 20 16:51:28 UYST 2013.38"&gt;
  &lt;info&gt;
    tick 1
  &lt;/info&gt;
&lt;/log&gt;
...
...
&lt;log realm="qtest" at="Sun Oct 20 16:51:29 UYST 2013.40"&gt;
  &lt;info&gt;
    tick 2
  &lt;/info&gt;
&lt;/log&gt;</programlisting>
<simpara>Approximately every second we see a <emphasis>tick</emphasis> message, issues by our little
<literal>run()</literal> method:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public void run () {
        for (int tickCount=0; running (); tickCount++) {
            log.info ("tick " + tickCount);
            ISOUtil.sleep (tickInterval);
        }
    }</programlisting>
<simpara>While Q2 is running and <emphasis>ticking</emphasis>, you can launch <literal>jconsole</literal>, connect
to the running process and navigate to the <literal>QTest</literal> QBean attributes to
see the <literal>tickInterval</literal>. You are free to change it to another value and
that will change the behavior of the running QTest QBean.</simpara>
<simpara>The screen will look something like this:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/qtest_interval_jconsole.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>QTest/jConsole</phrase></textobject>
</inlinemediaobject></simpara>
<note>
<simpara>If you are running Q2 using the <literal>gradle run</literal> tasks, you&#8217;ll find out
you won&#8217;t get to see the Q2 MBean under the MBeans tabs, you&#8217;ll see
just the system MBeans.</simpara>
<simpara>The reason for this is that <literal>com.sun.management.jmxremote</literal> option
is not set by default. If you&#8217;re running the <literal>bin/q2</literal> script, there&#8217;s
a <literal>-Dcom.sun.management.jmxremote</literal> in the JVM invocation and that&#8217;s the
reason the Q2 MBeans can be managed.</simpara>
</note>
<bridgehead xml:id="_push_configuration_setting_qbean_attributes" renderas="sect3">PUSH configuration - Setting QBean attributes</bridgehead>
<simpara>In the same way you can use <literal>jconsole</literal> to tweak the QBean attributes
defined in the MBean, you can use the XML <emphasis>attr</emphasis> element in the
QBean descriptor. Q2 will use the MBeanServer to send them via JMX.</simpara>
<simpara>So you can change the <literal>90_qtest.xml</literal> file (in the <literal>src/dist/deploy</literal>)
directory to look like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qbean name='qtest' class='org.jpos.qtest.QTest'&gt;
  &lt;attr name="tickInterval" type="java.lang.Long"&gt;5000&lt;/attr&gt;
&lt;/qbean&gt;</programlisting>
<tip>
<simpara>If no <emphasis>type</emphasis> attribute, the default is <emphasis>java.lang.String</emphasis>.
<literal>java.lang.Long</literal> can be abbreviated as just <literal>long</literal>, same goes
for <literal>int</literal> (<literal>java.lang.Integer) and +boolean</literal> (<literal>java.lang.Boolean</literal>)</simpara>
</tip>
<bridgehead xml:id="_pull_configuration_implementing_configurable" renderas="sect3">PULL configuration - implementing Configurable</bridgehead>
<simpara>Pushing configuration using attributes provides a lot of runtime
flexibility, but requires a lot of boilerplate code with the MBean
interfaces. Sometimes it&#8217;s easier to just implement the very simple
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/core/Configurable.html">Configurable</link>
interface and adding a few child <literal>property</literal> elements in the QBean
descriptor.</simpara>
<simpara>Let&#8217;s change our QTest class to read like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">package org.jpos.test;

import org.jpos.core.Configurable;
import org.jpos.core.Configuration;
import org.jpos.iso.ISOUtil;
import org.jpos.q2.Q2;
import org.jpos.q2.QBean;
import org.jpos.util.Log;

public class QTest implements QTestMBean, Runnable, Configurable {          <co xml:id="CO9-1"/>
    volatile int state;
    long tickInterval = 1000;
    Log log;
    boolean debug;                                                          <co xml:id="CO9-2"/>

    public QTest () {
        super();
        state = -1;
        log = Log.getLog(Q2.LOGGER_NAME, "qtest");
        log ("constructor");
    }
    public void init () {
        log ("init");
        state = STARTING;
    }
    public void start() {
        log ("start");
        state = STARTED;
        new Thread(this).start();
    }
    public void stop () {
        log ("stop");
        state = STOPPING;
    }
    public void destroy () {
        log ("destroy");
        state = STOPPED;
    }
    public void setTickInterval (long tickInterval) {
        this.tickInterval = tickInterval;
    }
    public long getTickInterval () {
        return tickInterval;
    }
    public void run () {
        for (int tickCount=0; running (); tickCount++) {
            log.info ("tick " + tickCount);
            ISOUtil.sleep (tickInterval);
        }
    }
    public int getState () {
        return state;
    }
    public String getStateAsString () {
        return state &gt;= 0 ? stateString[state] : "Unknown";
    }
    public void setConfiguration (Configuration cfg) {                      <co xml:id="CO9-3"/>
        debug = cfg.getBoolean("debug", true);
    }

    private boolean running() {
        return state == QBean.STARTING || state == QBean.STARTED;
    }
    private void log (String message) {
        if (debug)                                                          <co xml:id="CO9-4"/>
            log (message);
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO9-1">
<para>Implement <literal>Configurable</literal></para>
</callout>
<callout arearefs="CO9-2">
<para>add a new <emphasis>debug</emphasis> boolean</para>
</callout>
<callout arearefs="CO9-3">
<para>Actual implementation of the <literal>Configurable</literal> interface, picks the <literal>debug</literal>
property from the XML configuration, defaulting to <literal>true</literal></para>
</callout>
<callout arearefs="CO9-4">
<para>Honor the debug property.</para>
</callout>
</calloutlist>
<simpara>Now the <literal>src/dist/deploy/90_qtest.xml</literal> file would look like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qbean name='qtest' class='org.jpos.test.QTest'&gt;
  &lt;property name="debug" value="false" /&gt;
&lt;/qbean&gt;</programlisting>
<simpara>If you want to set your properties in a separate file, you could
<literal>&lt;property file="xxx" /&gt; instead of +&lt;property name="xx" value="yy" /&gt;</literal>,
i.e:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qbean name='qtest' class='org.jpos.test.QTest'&gt;
  &lt;property file="cfg/myconfig.cfg" /&gt;
&lt;/qbean&gt;</programlisting>
<simpara>and then add a file <literal>src/dist/cfg/myconfig.cfg</literal>, e.g.:</simpara>
<screen>debug=false</screen>
<tip>
<simpara>If the file name ends in <literal>.yml</literal>, Q2 handles it as a YAML file.</simpara>
</tip>
<simpara>The files in the <literal>src/dist</literal> directory get copied to <literal>build/install</literal> when
we call <literal>gradle installApp</literal> or to the <literal>build/distributions</literal> when we call
<literal>gradle dist</literal> and are subject to property expansion.</simpara>
<simpara>So if instead of writing <literal>debug=false</literal>, you put <literal>debug=@debug@</literal> (same goes if you use <literal>&lt;property name="debug" value="@debug@" /&gt;</literal>), and you add a compile-time
property called <literal>debug</literal> to your compile <emphasis>target</emphasis>, Gradle will propertly
replace it when copying it to the destination directory.</simpara>
<simpara>In order to test this lets change the file in <literal>src/dist/deploy/90_qtest.xml</literal>
to read like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qbean name='qtest' class='org.jpos.test.QTest'&gt;
  &lt;property name="debug" value="@debug@" /&gt;
&lt;/qbean&gt;</programlisting>
<simpara>And add a top level file called <literal>devel.properties</literal> with a line like this:</simpara>
<screen>debug=yes</screen>
<tip>
<simpara>Yes, Q2 understand <emphasis>yes</emphasis> and <emphasis>no</emphasis> in addition to <emphasis>true</emphasis> and <emphasis>false</emphasis></simpara>
</tip>
<simpara>When you call <literal>gradle installApp</literal>, the destination file in
<literal>build/install/qtest/deploy/90_qtest.xml</literal> will have a <literal>yes</literal> instead of
the <literal>@debug@</literal> token.</simpara>
<simpara><literal>devel</literal> is the default Gradle target defined by jPOS and that&#8217;s the
reason it reads the <literal>devel.properties</literal> file. But you can override the
target using the <literal>-Ptarget=xxx</literal> parameter, so you can for example
create a file called <literal>prod.properties</literal> where <literal>debug=no</literal> and then
call <literal>gradle -Ptarget=prod clean installApp</literal>.</simpara>
<note>
<simpara>Please note we&#8217;ve added <literal>clean</literal> as part of the build, reason is because
the source file <literal>src/dist/deploy/90_qtest.xml</literal> didn&#8217;t change, and the
destination file <literal>build/install/qtest/deploy/90_qtest.xml</literal> was created
in the previous step (with the default <literal>devel</literal> target), Gradle assumes
the file is up-to-date and do not attempt to re-generate it.</simpara>
</note>
<tip>
<simpara>If you prefer to have more control over the XML inside your QBeans,
like the one we use in the ChannelAdaptor, QMUX or the TransactionManager
where we have child elements with their own hierarchy (like <emphasis>filters</emphasis>,
<emphasis>participants</emphasis>, <emphasis>queues</emphasis>), you can implement <literal>org.jpos.core.XmlConfigurable</literal>
instead of <literal>Configuration</literal> so that instead of a flat <literal>Configuration</literal>
object, you receive an <literal>org.jdom.Element</literal> that you can use to interpret
your own configuration.</simpara>
</tip>
<bridgehead xml:id="_honoring_the_logger_and_realm_attributes" renderas="sect3">Honoring the <emphasis>logger</emphasis> and <emphasis>realm</emphasis> attributes</bridgehead>
<simpara>Q2 uses reflection to find out if a QBean has a method with the
following signature: <literal>void setLogger (String loggerName)</literal>, and
and optional <literal>void setRealm (String realm)</literal>.</simpara>
<simpara>We can take advantage of that feature by adding
the following code to our QTest file:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public void setLogger (String loggerName) {
        log = Log.getLog (loggerName, getClass().getName());
        setModified (true);
    }
    public void setRealm (String realm) {
        if (log != null)
            log.setRealm (realm);
    }</programlisting>
<tip>
<simpara>If you are starting to get worried about the large number
of options you have when implementing a QBean, don&#8217;t worry,
there&#8217;s a handy support class called <literal>QBeanSupport</literal> that you
can extend in order to take advantage of all these features
without having to write a lot of boilerplate code. We&#8217;ll show
you how to use it shortly, but if you want to understand how
Q2 works, we suggest you follow this lengthly step-by-step
explanation.</simpara>
</tip>
<bridgehead xml:id="_getting_a_reference_to_the_q2_server" renderas="sect3">Getting a reference to the Q2 server</bridgehead>
<simpara>If your QBean needs a reference to the Q2 server, it can implement the
<literal>setServer(Q2 server)</literal> method. Q2 will push a reference to itself at
configuration file.</simpara>
<bridgehead xml:id="_getting_a_reference_to_the_xml_element_representing_the_qbean_descriptor" renderas="sect3">Getting a reference to the XML element representing the QBean descriptor</bridgehead>
<simpara>If your QBean has a method with the signature <literal>void setPersist(Element e)</literal>,
Q2 will push the Element representing the QBean descriptor. This feature
allows a QBean to implement the <literal>QPersist</literal> interface, that looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface QPersist {
    public Element getPersist ();
    public boolean isModified ();
}</programlisting>
<simpara>If your <literal>QBean</literal> implements <literal>QPersist</literal> and its <literal>isModified()</literal>
returns <literal>true</literal>, then Q2 will call its <literal>getPersist()</literal> to get a new
QBean descriptor and will store it in the <literal>deploy</literal> directory.</simpara>
<tip>
<simpara>This feature is rarely used in jPOS applications, but it&#8217;s there just
in case you want to experiment with it. In our previous <literal>jconsole</literal> example,
a change to the <literal>tickInterval</literal> done via JMX could be stored in the
<literal>90_qtest.xml</literal> file automatically, so it can be honored on the next
restart.</simpara>
</tip>
<note>
<simpara>The name <emphasis>persist</emphasis> here is a really bad name, something like
<literal>getXmlDescriptor()</literal> could have been better.</simpara>
</note>
</section>
<section xml:id="qbean_support">
<title>QBeanSupport</title>
<simpara>All the details described in our first implementation of <literal>QTest</literal> can be
simplified by just extending <link xl:href="https://github.com/jpos/jPOS/blob/master/jpos/src/main/java/org/jpos/q2/QBeanSupport.java">QBeanSupport</link>.</simpara>
<simpara><literal>QBeanSupport</literal> implement the <literal>QBean</literal> life-cycle methods <literal>init()</literal>, <literal>start()</literal>,
<literal>stop()</literal> and <literal>destroy()</literal> and call the protected:</simpara>
<itemizedlist>
<listitem>
<simpara>initService</simpara>
</listitem>
<listitem>
<simpara>startService</simpara>
</listitem>
<listitem>
<simpara>stopService</simpara>
</listitem>
<listitem>
<simpara>destroyService</simpara>
</listitem>
</itemizedlist>
<simpara>providing suitable default implementations for those. These methods are
implemented like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public void init () {
        if (state == -1) {
            setModified (false);
            try {
                initService();
                state = QBean.STOPPED;
            } catch (Throwable t) {
                log.warn ("init", t);
            }
        }
    }

    public synchronized void start() {
        if (state != QBean.DESTROYED &amp;&amp;
            state != QBean.STOPPED   &amp;&amp;
            state != QBean.FAILED)
           return;

        this.state = QBean.STARTING;

        try {
           startService();
        } catch (Throwable t) {
           state = QBean.FAILED;
           log.warn ("start", t);
           return;
        }
        state = QBean.STARTED;
    }

    public synchronized void stop () {
        if (state != QBean.STARTED)
           return;
        state = QBean.STOPPING;
        try {
           stopService();
        } catch (Throwable t) {
           state = QBean.FAILED;
           log.warn ("stop", t);
           return;
        }
        state = QBean.STOPPED;
    }

    public void destroy () {
        if (state == QBean.DESTROYED)
           return;
        if (state != QBean.STOPPED)
           stop();

        if (scheduledThreadPoolExecutor != null) {
            scheduledThreadPoolExecutor.shutdown();
            scheduledThreadPoolExecutor = null;
        }
        try {
           destroyService();
        }
        catch (Throwable t) {
           log.warn ("destroy", t);
        }
        state = QBean.DESTROYED;
    }</programlisting>
<simpara>You can see that they track and validate the state of the QBean,
catch exceptions providing reasonable logging, etc.</simpara>
<simpara>In addition, <literal>QBeanSupport</literal> implements <literal>Configurable</literal> and exposes
a <literal>public Configuration getConfiguration()</literal> method. It has a <literal>setServer(Q2)</literal>
method so your implementation can call <literal>getServer()</literal> to get a reference
to the Q2 system.</simpara>
<simpara>It also implements a <literal>boolean running()</literal> method so that your QBean
can check if the QBean is still running and get out of a running loop.</simpara>
<simpara><literal>QBeanSupport</literal> provides a handy <literal>QBeanSupportMBean</literal> so if your QBean
does not expose any JMX attribute, you don&#8217;t even have to write an
<literal>xxxMBean</literal> interface.</simpara>
<simpara>Our <literal>Qtest</literal> implementation could look like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">package org.jpos.test;

import org.jpos.iso.ISOUtil;
import org.jpos.q2.QBeanSupport;

public class QTest extends QBeanSupport implements Runnable {
    @Override
    protected void startService() {
        new Thread(this).start();
    }
    public void run () {
        for (int tickCount=0; running (); tickCount++) {
            log.info ("tick " + tickCount);
            ISOUtil.sleep (cfg.getLong("tickInterval", 1000L));   <co xml:id="CO10-1"/>
        }
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO10-1">
<para>In this case, we are pulling the tickInterval from a <emphasis>property</emphasis> with
a default to 1 second. We can off course add a <literal>tickInterval</literal>
attribute and expose it in a <literal>QTestMBean</literal> interface as described in
the previous section.</para>
</callout>
</calloutlist>
</section>
<section xml:id="dynamic_classloading">
<title>Dynamic classloading</title>
<simpara>In most applications, the business logic and packagers are available in
the classpath, but there are situations where you need to apply a hot
patch such as adding a new field packager, or an ISO filter, so we
have provided this dynamic class loading capabilities.</simpara>
<simpara>If you know OSGi you can laugh as much as we do with our limited
poor-man implementation, it has many drawbacks that we&#8217;ll explain
below, but if you need to apply a hot patch until you can bounce the
system and restart with a new build, you can appreciate that our
dynamic classloading has some use.</simpara>
<simpara>In addition to the <literal>deploy</literal> directory that Q2 monitors to see changes
in the deployed services, it also monitors the timestamp of the
<literal>deploy/lib</literal> directory, and if changed, it scans all jars in there
and add them to the URL classloader of the MBeanServer, used by
Q2 to instantiate its QBeans.</simpara>
<tip>
<simpara>The previous paragraph basically tells you all you need to know about
jPOS' Q2 dynamic classloading. If you read it again, and understand
every word, then you can skip to the next section. If you have doubts,
we&#8217;ll try to clarify them below.</simpara>
</tip>
<simpara>Let&#8217;s try a simple example. If you start Q2 in say the <literal>/opt/local/jpos</literal>
directory, it will be monitoring the <literal>/opt/local/jpos/deploy</literal> directory
for QBean descriptors and the <literal>/opt/local/jpos/deploy/lib</literal> for jars
to be added to the classpath.</simpara>
<simpara>At start up the output will look like this:</simpara>
<screen>&lt;log realm="Q2.system"&gt;
  &lt;info&gt;
    Q2 started, deployDir=/opt/local/jpos/deploy
    ...
    ...
  &lt;/info&gt;
&lt;/log&gt;</screen>
<simpara>If while Q2 is running you create a <literal>lib</literal> directory inside <literal>deploy</literal>,
you&#8217;ll see a message like this:</simpara>
<screen>&lt;log realm="Q2.system"&gt;
  &lt;info&gt;
    new classloader [58f0fa12] has been created
  &lt;/info&gt;
&lt;/log&gt;</screen>
<simpara>If you then place a jar inside that new <literal>lib</literal> directory, <emphasis role="strong">and you touch</emphasis>
<literal>lib</literal> directory so that it changes its timestamp, you&#8217;ll see once again
the message indicating that a new classloader has been created, but this
time, it will contain your new jar.</simpara>
<note>
<simpara>If the <literal>deploy/lib</literal> directory is available, with jars in it,
at Q2 start up time, it will of course be picked up.</simpara>
</note>
<simpara>The <emphasis>and you touch</emphasis> part mentioned above is important, because Q2 doesn&#8217;t
monitor the jars inside the lib directory, it monitors the timestamp
of the <literal>deploy/lib</literal> directory itself. This gives us some kind of poor
man ability to deploy several jars in an atomic way (to manually solve
dependencies).</simpara>
<simpara>So now that the new jar is available in the classpath, you can deploy
your QBean by adding its xml QBean descriptor in the <literal>deploy</literal> dir.</simpara>
<bridgehead xml:id="_dynamically_deploying_qtest" renderas="sect3">Dynamically deploying QTest</bridgehead>
<simpara>If you&#8217;ve followed the instructions in <xref linkend="qtest"/>, you can copy
<literal>build/libs/qtest-1.0.0.jar</literal> generated using <literal>gradle jar</literal> into
another jPOS Q2 system (i.e. you could use the default jPOS distro
clone) and follow the previous instructions to run it.</simpara>
<simpara>In addition to that, Q2 support remote dynamic classloading, so instead
of placing your jar in the <literal>deploy/lib</literal>, you could load it from a remote
URL.</simpara>
<simpara>For your convenience, we&#8217;ve placed a compiled version of qtest in the
following URL: <literal><link xl:href="http://us.jpos.org/private/qtest-1.0.0.jar">http://us.jpos.org/private/qtest-1.0.0.jar</link></literal>, so you
can deploy in any Q2 system the following QBean:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qbean name='qtest' class='org.jpos.qtest.QTest' logger='Q2'&gt;
  &lt;classpath&gt;
    &lt;url&gt;http://us.jpos.org/examples/qtest-1.0.0.jar&lt;/url&gt;
  &lt;/classpath&gt;
&lt;/qbean&gt;</programlisting>
<simpara>A QBean can download its supporting classes from multiple URLs, the
previous example could read:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qbean name='qtest' class='org.jpos.qtest.QTest' logger='Q2'&gt;
  &lt;classpath&gt;
    &lt;url&gt;http://us.jpos.org/examples/qtest-1.0.0.jar&lt;/url&gt;
    &lt;url&gt;http://myhost.mydomain.com/another-dependency.jar&lt;/url&gt;
    ...
  &lt;/classpath&gt;
&lt;/qbean&gt;</programlisting>
<tip>
<simpara>jPOS applications are usually mission critical and highly
sensitive, so in most situations, it&#8217;s not a very good idea to
download the implementation from remote sites.</simpara>
<simpara>But on a local DMZ where you have many nodes using the same code,
it can come very handy to use this feature and download code from
a local artifact server.</simpara>
</tip>
</section>
</chapter>
<chapter xml:id="_q2_jpos_services">
<title>Q2 jPOS Services</title>
<simpara>Before Q2, in the old QSP days, we had a limited set of services
that were migrated to Q2, usually using <emphasis>adaptors</emphasis>.</simpara>
<simpara>So the old QSP <literal>channel</literal> has now the corresponding <literal>channel-adaptor</literal> service,
<literal>dirpoll</literal> has a <literal>dirpoll-adaptor</literal>, the <literal>security</literal> module has a
<literal>SMAdaptor</literal> and <literal>KeyStoreAdaptor</literal> and so on.</simpara>
<simpara>We document in this chapter these adaptors, along with new services that
have been implemented only in Q2.</simpara>
<section xml:id="channel_adaptor">
<title>ChannelAdaptor</title>
<simpara>When jPOS acts as client from a TCP/IP standpoint, you&#8217;d most likely use
the <literal>ChannelAdaptor</literal> service to manage the low level socket connection.</simpara>
<simpara>The <literal>ChannelAdaptor</literal> uses the Space to communicate with other jPOS
components, basically through two <emphasis>Space queues</emphasis>, one for <emphasis role="strong">input</emphasis>
and the other one for <emphasis role="strong">output</emphasis>.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/channel_adaptor.png"/>
</imageobject>
<textobject><phrase>ChannelAdaptor</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The <emphasis>in</emphasis> and <emphasis>out</emphasis> naming convention is easy to remember if
we think of them as <emphasis role="strong">seen from the component&#8217;s perspective</emphasis>.</simpara>
<simpara>So ChannelAdaptor is monitoring its input (<emphasis>in</emphasis>) queue for messages
that are to be sent to the remote host, and places messages received
from the remote host in its output (<emphasis>out</emphasis>) queue.</simpara>
<tip>
<simpara>Most of the time, you won&#8217;t have to deal with these queues,
you&#8217;ll just deal with the API provided by higher level components
like <emphasis role="strong">QMUX</emphasis>.</simpara>
</tip>
<section xml:id="_qbean_descriptor">
<title>QBean descriptor</title>
<simpara>As described in <xref linkend="running_Q2"/>, Q2 sorts the XML descriptors
available in the <literal>deploy</literal> directory alphabetically, as an easy
way to orderly start services.</simpara>
<simpara>We usually use the prefix <emphasis role="strong">10_</emphasis> for channels, so that when
other components (such as MUXes that use the prefix <emphasis>20_</emphasis>) start,
they can use them right away on the first attempt.</simpara>
<simpara>So a reasonable name for a channel descriptor can be something like
<literal>10_xxx_channel.xml</literal>.</simpara>
<screen>&lt;channel-adaptor name='your-channel' logger="Q2"&gt;         <co xml:id="CO11-1"/>
 &lt;channel class="org.jpos.iso.channel.NACChannel"
       packager="org.jpos.iso.packager.GenericPackager"   <co xml:id="CO11-2"/>
       header="6000000000"&gt;                               <co xml:id="CO11-3"/>
  &lt;property name="packager-config"                        <co xml:id="CO11-4"/>
           value="jar:packager/iso87binary.xml" /&gt;
  &lt;property name="host" value="127.0.0.1" /&gt;              <co xml:id="CO11-5"/>
  &lt;property name="port" value="8001" /&gt;
  &lt;property name="timeout" value="300000" /&gt;              <co xml:id="CO11-6"/>
  &lt;filter                                                 <co xml:id="CO11-7"/>
      class="org.jpos.iso.filter.YourIncomingFilter"
      direction="incoming" /&gt;
  &lt;filter
      class="org.jpos.iso.filter.YourOutgoingFilter"
      direction="outgoing" /&gt;
 &lt;/channel&gt;
 &lt;in&gt;your-channel-send&lt;/in&gt;                               <co xml:id="CO11-8"/>
 &lt;out&gt;your-channel-receive&lt;/out&gt;                          <co xml:id="CO11-9"/>
 &lt;reconnect-delay&gt;10000&lt;/reconnect-delay&gt;                 <co xml:id="CO11-10"/>
&lt;/channel-adaptor&gt;</screen>
<calloutlist>
<callout arearefs="CO11-1">
<para>The element name <literal>channel-adaptor</literal> is defined in <literal>QFactory.properties</literal>
(see <xref linkend="writing_first_script"/>) and implies that the class to
be instantiated is <literal>org.jpos.q2.iso.ChannelAdaptor</literal>. You can
of course use another root element name and add the <literal>class</literal>
attribute if you wish.</para>
</callout>
<callout arearefs="CO11-2">
<para>In this example we use the <literal>GenericPackager</literal> which is the most
flexible one, but of course, you can use any other custom
packager or some of the stock packagers such as <literal>XMLPackager</literal>
or <literal>XML2003Packager</literal>. For a complete list of available
packagers see <link xl:href="https://github.com/jpos/jPOS/tree/master/jpos/src/main/java/org/jpos/iso/packager">https://github.com/jpos/jPOS/tree/master/jpos/src/main/java/org/jpos/iso/packager</link></para>
</callout>
<callout arearefs="CO11-3">
<para>Although not defined in the <literal>ISOChannel</literal> interface, most channels
have a <literal>setHeader(String)</literal> method. If the <literal>header</literal> attribute is
present in the child <literal>channel</literal> element, ChannelAdaptor will use
reflection to call it. How this string is interpreted is specific
to each channel implementation, in this case, <literal>NACChannel</literal> assumes
it&#8217;s getting an hex string.</para>
</callout>
<callout arearefs="CO11-4">
<para>The <literal>Configuration</literal> object is available to the packager, provided
it implements the <literal>Configurable</literal> interface as it is the case of
the <literal>GenericPackager</literal>.</para>
</callout>
<callout arearefs="CO11-5">
<para>The <literal>Configuration</literal> object is also available to the channel
implementation (in this case <literal>NACChannel</literal> which happens to
implement the <literal>Configurable</literal> interface). The host and port
properties in this case are self explanatory, they point
to the remote host.</para>
</callout>
<callout arearefs="CO11-6">
<para>Channel level timeout in milliseconds. If the channel does not
receive any traffic in the configured timeout, it will disconnect.
Having a channel level timeout as described here is
<emphasis role="strong">highly recommended</emphasis>.</para>
</callout>
<callout arearefs="CO11-7">
<para>The <literal>channel</literal> element can have multiple optional <literal>filter</literal>
child elements (see <xref linkend="isofilter"/>). The <literal>direction</literal> attribute
is optional, if not present (or if its value is <literal>both</literal>),
the filter is configured to process both incoming as well
as outgoing messages.</para>
</callout>
<callout arearefs="CO11-8">
<para>Space queue used to receive messages to be transmitted to the
remote endpoint.</para>
</callout>
<callout arearefs="CO11-9">
<para>Messages received from the remote endpoint are placed in
this queue.</para>
</callout>
<callout arearefs="CO11-10">
<para>If the connection to the remote host breaks, ChannelAdaptor
    will try to reconnect after a reasonable delay, expressed
    in millis. If this element is not present, a default of
    10 seconds (10000ms) will be used.
=== SSL connections</para>
</callout>
</calloutlist>
<simpara>Most channel implementations accept a socket factory, that can be
configured by adding the properties <literal>socketFactory</literal> with additional
optional configuration properties required by its implementation.</simpara>
<simpara>In case of the provided <literal>org.jpos.iso.SunJSSESocketFactory</literal>, the additional
properties are <literal>storepassword</literal>, <literal>keypassword</literal> and <literal>keystore</literal>.</simpara>
<simpara>The configuration would look like this:</simpara>
<screen> &lt;property name="socketFactory" value="org.jpos.iso.GenericSSLSocketFactory" /&gt;
 &lt;property name="storepassword" value="password" /&gt;
 &lt;property name="keypassword"   value="password" /&gt;
 &lt;property name="keystore" value="cfg/mykeystore.ks" /&gt;</screen>
<tip>
<simpara>Please note that these properties are specific to the channel, so they go
inside the <emphasis>channel</emphasis> element, not the outer <emphasis>channel-adaptor</emphasis> element.</simpara>
</tip>
</section>
<section xml:id="_handling_alternate_connections">
<title>Handling alternate connections</title>
<simpara>This is not a feature of the ChannelAdaptor but a feature of BaseChannel,
a support class inherited by most channel implementations (but not all of
them, so please check). Channel implementations extending BaseChannel can
take advantage of the <literal>alternate-host</literal> with its companion <literal>alternate-port</literal>
configuration property. There can be many of those, but the number of
instances have to match (i.e. if you have 4 <literal>alternate-host</literal> definitions,
you need to have 4 <literal>alternate-port</literal> definitions).</simpara>
<simpara>When ChannelAdaptor calls the <literal>connect</literal> method in the underlying channel,
BaseChannel will attempt a connection to the main host/port. If that
fails, it will attempt the alternate hosts list.</simpara>
<simpara>The configuration looks like this:</simpara>
<screen>&lt;channel-adaptor name='your-channel' logger="Q2"&gt;
 &lt;channel class="org.jpos.iso.channel.NACChannel"
    ....
    ....
    &lt;property name="alternate-host" value="192.168.1.2" /&gt;
    &lt;property name="alternate-host" value="192.168.1.3" /&gt;
    &lt;property name="alternate-host" value="192.168.1.4" /&gt;
    &lt;property name="alternate-host" value="192.168.1.5" /&gt;
    &lt;property name="alternate-port" value="1000" /&gt;
    &lt;property name="alternate-port" value="1000" /&gt;
    &lt;property name="alternate-port" value="1000" /&gt;
    &lt;property name="alternate-port" value="1000" /&gt;
    ....
    ....
 &lt;/channel&gt;
&lt;/channel-adaptor&gt;</screen>
<tip>
<simpara>Same as with the previous SSL socket factory, these properties are
specific to the channel, so they go inside the <emphasis>channel</emphasis> element, not
the outer <emphasis>channel-adaptor</emphasis> element.</simpara>
</tip>
</section>
<section xml:id="_channel_timeout_keep_alive_connection_timeout">
<title>Channel timeout, keep-alive, connection-timeout</title>
<simpara>We strongly recommend that you add a channel-level timeout (expressed in
milliseconds). There are many situations where a network connection can
go wrong (i.e. an intermediate firewall may timeout an inactive socket
connection without notify the endpoint). If you know that your link has
to have traffic at least say every minute (i.e. because you&#8217;re sending
network management 800-class messages back and forth), we recommend that
you set a timeout for say 70 or 80 seconds.</simpara>
<simpara>You can increase that value, but making it very big will have a negative impact
in your application that will learn that a channel is not usable only by the
time it needs to send a real authorization message, causing a reconnection
at that time, instead of ahead of time, while it was idle.</simpara>
<simpara>Setting the keep-alive (<literal>true/false</literal>) would set the low level <literal>SO_KEEPALIVE</literal>
flag at the socket level for situations where no network management messages
are exchanged.</simpara>
<simpara>The <literal>connection-timeout</literal> property can be used to set a smaller timeout at
connect time, this is useful when combined with the <literal>alternate-host</literal> and
<literal>alternate-port</literal> set of properties.</simpara>
<screen>&lt;channel-adaptor name='your-channel' logger="Q2"&gt;
 &lt;channel class="org.jpos.iso.channel.NACChannel"
    ....
    ....
    &lt;property name="connection-timeout" value="15000" /&gt;  &lt;!-- 15 seconds --&gt;
    &lt;property name="timeout" value="300000" /&gt;            &lt;!-- five minutes --&gt;
    &lt;property name="keep-alive" value="true" /&gt;
    ....
    ....
 &lt;/channel&gt;
&lt;/channel-adaptor&gt;</screen>
</section>
</section>
<section xml:id="one_shot_channel_adaptor">
<title>OneShotChannelAdaptor</title>
<simpara>Most host-to-host ISO-8583 links use persistent connections, and that&#8217;s the
reason we have to multiplex the messages using a MUX, but for situations
where the host expects a single transaction per socket connection, we
have the <literal>OneShotChannelAdaptor</literal>.</simpara>
<simpara>The configuration and behavior is very similar to the <literal>ChannelAdaptor</literal> (see <xref linkend="channel_adaptor"/>),
you just need to change the class name in the qbean descriptor.</simpara>
<simpara>It supports the following attributes:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>OneShotChannelAdaptor Attributes.</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="66.6667*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Attribute</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>in</simpara></entry>
<entry align="left" valign="top"><simpara>Input queue</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>out</simpara></entry>
<entry align="left" valign="top"><simpara>Output queue</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>space</simpara></entry>
<entry align="left" valign="top"><simpara>Optional space name, defaults to system&#8217;s default space</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>max-connections</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum number of simultaneous connections to the remote host, defaults to 1</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>max-connect-attempts</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum number of connections attempts for a single transaction, defaults to 15</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<section xml:id="_qbean_descriptor_2">
<title>QBean descriptor</title>
<screen>&lt;qbean name='your-channel' logger="Q2"&gt;
  class="org.jpos.q2.iso.OneShotChannelAdaptor"           <co xml:id="CO12-1"/>
 &lt;channel class="org.jpos.iso.channel.NACChannel"
       packager="org.jpos.iso.packager.GenericPackager"
       header="6000000000"&gt;
  &lt;property name="packager-config"
           value="jar:packager/iso87binary.xml" /&gt;
  &lt;property name="host" value="127.0.0.1" /&gt;
  &lt;property name="port" value="8001" /&gt;
  &lt;filter
      class="org.jpos.iso.filter.YourIncomingFilter"
      direction="incoming" /&gt;
  &lt;filter
      class="org.jpos.iso.filter.YourOutgoingFilter"
      direction="outgoing" /&gt;
 &lt;/channel&gt;
 &lt;in&gt;your-channel-send&lt;/in&gt;                               <co xml:id="CO12-2"/>
 &lt;out&gt;your-channel-receive&lt;/out&gt;                          <co xml:id="CO12-3"/>
 &lt;max-connections&gt;5&lt;/max-connections&gt;                     <co xml:id="CO12-4"/>
 &lt;max-connect-attempts&gt;3&lt;/max-connect-attempts&gt;           <co xml:id="CO12-5"/>
&lt;/qbean&gt;</screen>
<calloutlist>
<callout arearefs="CO12-1">
<para>Please note we specify a class here.</para>
</callout>
<callout arearefs="CO12-2">
<para>Space queue used to receive messages to be transmitted to the
remote endpoint.</para>
</callout>
<callout arearefs="CO12-3">
<para>Messages received from the remote endpoint are placed in
this queue.</para>
</callout>
<callout arearefs="CO12-4">
<para>Overrides default max-connections (currently 1)</para>
</callout>
<callout arearefs="CO12-5">
<para>Overrides default max-connect-attempts (currently 15)</para>
</callout>
</calloutlist>
<tip>
<simpara>In addition to <literal>org.jpos.q2.iso.OneShotChannelAdaptor</literal> there&#8217;s
a new experimental <literal>org.jpos.q2.iso.OneShotChannelAdaptorMK2</literal> with
the same functionality and a new implementation.</simpara>
</tip>
</section>
</section>
<section xml:id="qmux">
<title>QMUX</title>
<simpara><emphasis role="strong">QMUX</emphasis> is a modern and very simple, yet powerful, Q2 service
that implements the
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/iso/MUX.html">MUX</link>
interface as described in <xref linkend="multiplexing_with_mux"/>.</simpara>
<tip>
<simpara>Users of the old <emphasis role="strong">ISOMUX</emphasis>, which is still available in the
<literal>compat_1_5_2</literal> module are encouraged to upgrade to this new
service.</simpara>
</tip>
<simpara>QMUX uses the Space in order to communicate with the underlying channels; this
strategy brings into play a whole new set of deployment options, including the
ability to multiplex several channels for redundancy/load-balancing. These
channels doesn&#8217;t even have to run on the same machine. They could use
distributed/remote space implementations. The new space-based code doesn&#8217;t
require an extra thread, something very useful in systems where a large number
of MUXes are required.</simpara>
<section xml:id="_qbean_descriptor_3">
<title>QBean descriptor</title>
<simpara>A QMUX configuration looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;mux class="org.jpos.q2.iso.QMUX" logger="Q2" name="mymux"&gt;
 &lt;in&gt;your-channel-receive&lt;/in&gt;                               <co xml:id="CO13-1"/>
 &lt;out&gt;your-channel-send&lt;/out&gt;                                <co xml:id="CO13-2"/>
 &lt;ready&gt;your-channel.ready&lt;/ready&gt;                           <co xml:id="CO13-3"/>
&lt;/mux&gt;</programlisting>
<calloutlist>
<callout arearefs="CO13-1">
<para>The MUX <literal>&lt;in&gt;</literal> queue has to be named after the ChannelAdaptor&#8217;s <literal>&lt;out&gt;</literal>
queue.</para>
</callout>
<callout arearefs="CO13-2">
<para>In the same way, the MUX&#8217;s <literal>&lt;out&gt;</literal> queue needs to match the
ChannelAdaptor&#8217;s <literal>&lt;in&gt;</literal> queue.</para>
</callout>
<callout arearefs="CO13-3">
<para>In order to provide a usable <literal>MUX.isConnected()</literal> method, the MUX needs to
have a way to know if the underlying channel, loosely connected through
the <literal>in/out</literal> queues is actually connected. The channel adaptor sets an
entry in the space named after the channel&#8217;s name with the extension
<literal>.ready</literal> as true when connected, so the optional <literal>ready</literal> element
has to match that name. If a <literal>&lt;ready&gt;</literal> element isn&#8217;t present,
<literal>MUX.isConnected()</literal> will always return true.</para>
</callout>
</calloutlist>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/qmux.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>QMUX</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>QMUX is registered in the NameRegistrar under the name provided in the qbean
configuration file using the <literal>"mux."</literal> prefix, ("mux.mymux" in our example)
so that other components can get a reference, cast it to MUX and use its:</simpara>
<simpara>In order to handle messages arriving to QMUX that do not match a response
QMUX is waiting for, we can attach one or more <literal>ISORequestListeners</literal>.</simpara>
<simpara>The XML configuration looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;mux class="org.jpos.q2.iso.QMUX" logger="Q2" name="mymux"&gt;
 &lt;in&gt;your-channel-receive&lt;/in&gt;
 &lt;out&gt;your-channel-send&lt;/out&gt;
 &lt;ready&gt;your-channel.ready&lt;/ready&gt;
 &lt;request-listener class="my.request.listener" logger="Q2" realm="myrealm"&gt;
  &lt;property name="myproperty" value="abc" /&gt;
  &lt;property name="myotherproperty" value="xyz" /&gt;
  &lt;property file="cfg/myprop.cfg" /&gt;
 &lt;/request-listener&gt;
&lt;/mux&gt;</programlisting>
<simpara>As an alternative (or in addition to the request listeners), we can
define an <literal>unhandled</literal> queue. If messages arrive to QMUX and QMUX isn&#8217;t
waiting for it, it gets placed in the <literal>unhandled</literal> queue.</simpara>
<simpara>The configuration looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;mux class="org.jpos.q2.iso.QMUX" logger="Q2" name="mymux"&gt;
 &lt;in&gt;your-channel-receive&lt;/in&gt;
 &lt;out&gt;your-channel-send&lt;/out&gt;
 &lt;ready&gt;your-channel.ready&lt;/ready&gt;
 &lt;unhandled&gt;myunhandledqueue&lt;/unhandled&gt;
&lt;/mux&gt;</programlisting>
<note>
<simpara>In order for this mechanism to work, a separate jPOS service
should be waiting for messages arriving to the <literal>unhandled</literal> queue.</simpara>
<simpara>In order to prevent a situation where a QMUX is configured to push
messages to an <literal>unhandled</literal> queue and no service is listening to
those messages, a 120 seconds timeout is used. So messages will
be present for just 120 seconds. This little protection is intended
to avoid out of memory issues.</simpara>
</note>
</section>
<section xml:id="_mti_mapping_and_default_key">
<title>MTI mapping and default key</title>
<simpara>QMUX use the MTI as well as fields <emphasis>41</emphasis> and <emphasis>11</emphasis> as its default key.</simpara>
<simpara>That default can be changed using the <literal><emphasis>&lt;key&gt;&#8230;&#8203;&lt;/key&gt;</emphasis></literal> elements in
the QMUX configuration, i.e.:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;mux class="org.jpos.q2.iso.QMUX" logger="Q2" name="mymux"&gt;
 &lt;key&gt;42 41 11&lt;/key&gt;                                             <co xml:id="CO14-1"/>
 &lt;key mti="0800"&gt;41&lt;/key&gt;                                        <co xml:id="CO14-2"/>
 &lt;in&gt;your-channel-receive&lt;/in&gt;
 &lt;out&gt;your-channel-send&lt;/out&gt;
 &lt;ready&gt;your-channel.ready&lt;/ready&gt;
 &lt;unhandled&gt;myunhandledqueue&lt;/unhandled&gt;
&lt;/mux&gt;</programlisting>
<calloutlist>
<callout arearefs="CO14-1">
<para>overrides default key.</para>
</callout>
<callout arearefs="CO14-2">
<para>overrides default key for 0800 messages.</para>
</callout>
</calloutlist>
<simpara>In addition to the fields defined in the <literal><emphasis>&lt;key&gt;</emphasis></literal> element, QMUX maps each
digit of the MTI to use as a key part in order to avoid mixing for instance
a response for a 100-class message such as a <literal>0100</literal> with a reversal
response. The reason for this additional mapping is because most reversals
share the same STAN (field 11) with the original authorization.</simpara>
<simpara>Each of the three digits of the MTI gets mapped using the following
default values:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>0123456789</literal></simpara>
</listitem>
<listitem>
<simpara><literal>0123456789</literal></simpara>
</listitem>
<listitem>
<simpara><literal>0022446789</literal></simpara>
</listitem>
</itemizedlist>
<simpara>The value <literal>0123456789</literal> means no special handling is required, a
value of <emphasis>0</emphasis> in the first position of the MTI i.e. the first <emphasis>0</emphasis>
in a <emphasis>0100</emphasis> message) will expect a <emphasis>0</emphasis> in that very same position
in the response. The first position represents the ISO-8583 version
number (see <xref linkend="iso8583"/>), so if we send a 1987 message, we expect
a 1987 response.</simpara>
<simpara>Same goes for the second position, if we send a <emphasis>0100</emphasis> we expect a <emphasis>0110</emphasis>,
and that&#8217;s what the <emphasis><literal>0123456789</literal></emphasis> mapping does, it actually takes no
action.</simpara>
<simpara>For the third position, we use the default value <literal>0022446789</literal>.
That means that a <emphasis>1</emphasis> in the third position (i.e. a <emphasis>0110</emphasis>) will
be considered a <emphasis>0</emphasis> when creating the MTI key part, so that a
<emphasis>0110</emphasis> response will match the original <emphasis>0100</emphasis>.</simpara>
<simpara>These mappings can be changed using the <literal><emphasis>&lt;mtimapping&gt;</emphasis></literal> element
in the QMUX configuration. The default values would be represented
as:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;mux class="org.jpos.q2.iso.QMUX" logger="Q2" name="mymux"&gt;
 &lt;mtimapping&gt;0123456789 0123456789 0022446789&lt;/mtimapping&gt;
 ...
 ...
&lt;/mux&gt;</programlisting>
</section>
</section>
<section xml:id="qserver">
<title>QServer</title>
<simpara><emphasis role="strong">QServer</emphasis> is an adapter around <literal>ISOServer</literal> (see <xref linkend="isoserver"/>) that
interacts with other Q2 components, such as QMUX, using the Space
by defining <literal>in</literal> and <literal>out</literal> queues, pretty much like the <literal>ChannelAdaptor</literal>
does.</simpara>
<simpara>Despite the fact that QServer will act as a server from a TCP/IP
standpoint, and it will listen to a configurable port, it can
still be used to initiate transactions to the remote endpoint.</simpara>
<simpara>When acting as a server (from a transaction standpoint), the
QServer is typically configured to forward transactions to
a set of request listeners, but that&#8217;s not mandatory. It is
possible to use <literal>in/out</literal> Space based queues and <emphasis role="strong">connect</emphasis>
QServer to other components, such as QMUX (see <xref linkend="qmux"/>).</simpara>
<section xml:id="_qbean_descriptor_4">
<title>QBean descriptor</title>
<simpara>A QServer configuration looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qserver name="xml-server" logger="Q2"&gt;                      <co xml:id="CO15-1"/>
  &lt;attr name="port" type="java.lang.Integer"&gt;8000&lt;/attr&gt;     <co xml:id="CO15-2"/>
  &lt;channel name="xml.channel"
           class="org.jpos.iso.channel.XMLChannel"
           packager="org.jpos.iso.packager.XMLPackager"&gt;
  &lt;/channel&gt;
  &lt;request-listener class="my.request.Listener" logger="Q2"&gt;
    &lt;property name="my-property" value="ABC" /&gt;
    &lt;property name="my-other-property" value="XYZ" /&gt;
  &lt;/request-listener&gt;
&lt;/qserver&gt;</programlisting>
<calloutlist>
<callout arearefs="CO15-1">
<para><literal>qserver</literal> is defined in <literal>QFactory.properties</literal> and defaults
to class <literal>org.jpos.q2.iso.QServer</literal></para>
</callout>
<callout arearefs="CO15-2">
<para><literal>port</literal> is a JMX attribute honored by <literal>QServer</literal>. Other configuration
options are pulled using a <literal>Configuration</literal> object.</para>
</callout>
</calloutlist>
<note>
<simpara>The <literal>qserver</literal> element has been recently added to QFactory (&gt;1.9.7);
when running older versions, the QBean descriptor has to include
the <literal>class="org.jpos.q2.iso.QServer"</literal> attribute.</simpara>
</note>
<simpara>QServer is registered in the <literal>NameRegistrar</literal> under the name provided in
the qbean descriptor (<emphasis role="strong">"xml-server"</emphasis> in the previous example). In addition,
the underlying <literal>ISOServer</literal>&#8201;&#8212;&#8201;instantiated by <literal>QServer</literal>&#8201;&#8212;&#8201;will register itself
with the <literal>NameRegistrar</literal> using a prefix <literal>"server."</literal>, so in the previous
example, <literal>xml-server</literal> will be a reference to the <literal>QServer</literal> object,
and <literal>server.xml-server</literal> will have a reference to the <literal>ISOServer</literal> object.</simpara>
<simpara>The Channel definition used by <literal>QServer</literal> is the same as the one
used by the <literal>ChannelAdaptor</literal>, where you can configure SSL support,
packager-level logging, etc. Please read <xref linkend="channel_adaptor"/> for
details.</simpara>
<simpara>The request listeners are the same as those used by <literal>QMUX</literal>
(see <xref linkend="qmux"/> for details). A <literal>QServer</literal> using a request
listener would look like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;server name="jcard-server" class="org.jpos.q2.iso.QServer" logger="Q2"&gt;
  &lt;attr name="port" type="java.lang.Integer"&gt;8001&lt;/attr&gt;
  &lt;channel name="jcard.channel"
           class="org.jpos.iso.channel.CSChannel"
           packager="org.jpos.iso.packager.GenericPackager" logger="Q2"&gt;
    &lt;property name="packager-config" value="cfg/jcard.xml" /&gt;
    &lt;property name="timeout" value="300000" /&gt;
  &lt;/channel&gt;
  &lt;request-listener class="org.jpos.jcard.Dispatcher" logger="Q2"
                    realm="incoming-request-listener"&gt;
   &lt;property name="prefix"  value="org.jpos.jcard.Incoming_" /&gt;
   &lt;property name="timeout" value="60000" /&gt;
   &lt;property name="space"   value="tspace:default" /&gt;
   &lt;property name="queue"   value="JCARD.TXN" /&gt;
   &lt;property name="station" value="JCARD" /&gt;
  &lt;/request-listener&gt;
&lt;/server&gt;</programlisting>
<tip>
<simpara>You can of course define multiple request listeners, but we typically
have just one that pushes the messages to the TransactionManager where
the business logic can be implemented.</simpara>
</tip>
<simpara>In situations where the system needs to initiate transactions to the
remote host, <literal>in</literal> and <literal>out</literal> queues can be configured like in
the <literal>ChannelAdaptor</literal>. These names (<literal>in/out</literal>) are seen from <literal>QServer&#8217;s</literal>
perspective. Because a QServer can accept multiple simultaneous connections in
different sockets, an outgoing message needs to select which socket to use. When using
this <literal>in/out</literal> communication queues, QServer selects the latest
socket (using the <literal>ISOServer.getLastConnectedISOChannel())</literal> method. It is also possible to use
<literal>send-request</literal> property to send messages to all connected clients in round-robin fashion.
(see <link xl:href="http://jpos.org/doc/javadoc/org/jpos/q2/iso/QServer.html">QServer</link>).</simpara>
<simpara>The configuration looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qserver name="jcard-server"  logger="Q2"&gt;
  &lt;attr name="port" type="java.lang.Integer"&gt;8001&lt;/attr&gt;
  ...
  ...
  &lt;in&gt;your-server-receive&lt;/in&gt;
  &lt;out&gt;your-server-send&lt;/out&gt;
  &lt;ready&gt;your-server.ready&lt;/ready&gt;
  &lt;!--&lt;send-request&gt;LAST&lt;/send-request&gt;--&gt; &lt;!--default last connected --&gt;
  &lt;send-request&gt;RR&lt;/send-request&gt; &lt;!-- round-robin --&gt;
&lt;/qserver&gt;</programlisting>
<simpara><literal>QServer</literal> can accept multiple simultaneous sockets (default 100) that
can be configured using the JMX attributes <literal>minSessions</literal> and <literal>maxSessions</literal>,
i.e:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;attr name="minSessions" type="java.lang.Integer"&gt;10&lt;/attr&gt;
  &lt;attr name="maxSessions" type="java.lang.Integer"&gt;250&lt;/attr&gt;</programlisting>
<simpara>In addition, it can check the client&#8217;s IP address against <emphasis role="strong">"allow"</emphasis>
and <emphasis role="strong">"deny"</emphasis> IP addresses (including suffix wildcards) and drop the
connection if it&#8217;s not one of the allowed IP addresses. Here&#8217;s an example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  ...
  ...
  &lt;property name="allow" value="192.168.1.1" /&gt; <co xml:id="CO16-1"/>
  &lt;property name="allow" value="192.168.1.2" /&gt;
  &lt;property name="allow" value="10.0.0.10" /&gt;
  &lt;property name="deny"  value="10.0.*" /&gt;      <co xml:id="CO16-2"/>
  ...
  ...</programlisting>
<calloutlist>
<callout arearefs="CO16-1">
<para>The first three IPs are <emphasis>explicitly allowed</emphasis>, even though the third one&#8230;&#8203;</para>
</callout>
<callout arearefs="CO16-2">
<para>&#8230;&#8203;belongs to an IP range that is denied.</para>
</callout>
</calloutlist>
<simpara>Some considerations:</simpara>
<itemizedlist>
<listitem>
<simpara>Explicit IPs (i.e., those without wildcards) will be checked and honored first.
Then, the wildcard expressions will be checked, starting with the wildcard <literal>"deny"</literal> set,
and following with the wildcard <literal>"allow"</literal> set.</simpara>
</listitem>
<listitem>
<simpara>If only <literal>"allow"</literal> expressions are used, the default policy will be to <emphasis>deny unmatching</emphasis> IPs.</simpara>
</listitem>
<listitem>
<simpara>If only <literal>"deny"</literal> expressions are used, the default policy will be to <emphasis>allow unmatching</emphasis> IPs.</simpara>
</listitem>
<listitem>
<simpara>For <emphasis>mixed</emphasis> permissions (both, <literal>"allow"</literal> and <literal>"deny"</literal> present), the default policy will be to
<emphasis>deny unmatching</emphasis> IPs.</simpara>
</listitem>
<listitem>
<simpara>Use caution when using mixed permissions and wildcards. Due to the order of evaluation and
default policies, some combinations may, at best, be redundant or unnecessary. At worst, they may
make no sense at all (even denying connections from valid IPs).</simpara>
</listitem>
</itemizedlist>
<warning>
<simpara>The IP validation via the <literal>allow</literal> and <literal>deny</literal> set of properties,
while very handy, should not to be used as a replacement
for proper firewall rules.</simpara>
</warning>
</section>
</section>
<section xml:id="logger-adaptor">
<title>LoggerAdaptor</title>
<simpara>This service provides an easy way of declaring a logger (see <xref linkend="logger"/>) for the application. It creates a <literal>Logger</literal> instance and regiters it in <literal>NameRegistrar,</literal> so it can be referenced from other deploy descriptors or code.</simpara>
<simpara>As mentioned in <xref linkend="running_Q2"/>, a default logger is created if no <literal>00_logger.xml</literal> is present. That is the simplest logger definition, with the exception of one that has no log listener at all.</simpara>
<simpara>Let&#8217;s revisit it:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;logger name="Q2"&gt; <co xml:id="CO17-1"/>
    &lt;log-listener class="org.jpos.util.SimpleLogListener" /&gt; <co xml:id="CO17-2"/>
&lt;/logger&gt;</programlisting>
<calloutlist>
<callout arearefs="CO17-1">
<para>In absence of a <literal>class</literal> attributes <literal>Q2</literal> maps <literal>logger</literal> root elements to <literal>org.jpos.q2.qbean.LoggerAdaptor</literal>, <literal>QFactory</literal> takes the mapping from the resource <link xl:href="https://github.com/jpos/jPOS/blob/master/jpos/src/main/resources/org/jpos/q2/QFactory.properties#L1"><literal>QFactory.properties</literal></link></para>
</callout>
<callout arearefs="CO17-2">
<para>This is the simplest <literal>LogListener</literal> definition you can see, it just dumps all events to <literal>System.out</literal>, more details in the next subsection.</para>
</callout>
</calloutlist>
<simpara>The following subsections mention some log listeners included in the jPOS distribution. They just describe the items that can be configured by deploy descriptors, but some of them have additional capabilities that can be configured programmatically. Or less commonly used properties that can be read from the source code or javadoc.</simpara>
<section xml:id="_simpleloglistener">
<title>SimpleLogListener</title>
<simpara>This log listener dumps all events to standard output.</simpara>
<simpara>It can have an inner <literal>writer</literal> element that can modify how the elements are written to the output stream. See <link xl:href="https://github.com/jpos/jPOS/blob/master/jpos/src/main/java/org/jpos/util/MappingLogEventWriter.java#L42"><literal>MappingLogEventWriter.java</literal></link> for an example.</simpara>
</section>
<section xml:id="_rotateloglistener">
<title>RotateLogListener</title>
<simpara>This log listener writes output to a rotating file. It extends <literal>SimpleLogListener</literal>, so it inherits its configuration capabilities plus the ones needed to configure its specific purpose.</simpara>
<simpara>Its configuration looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;log-listener class="org.jpos.util.RotateLogListener"&gt;
    &lt;property name="file" value="log/q2.log" /&gt;     <co xml:id="CO18-1"/>
    &lt;property name="window" value="86400" /&gt;        <co xml:id="CO18-2"/>
    &lt;property name="copies" value="90" /&gt;           <co xml:id="CO18-3"/>
    &lt;property name="maxsize" value="100000000" /&gt;   <co xml:id="CO18-4"/>
    &lt;proeprty name="rotate-on-startup" value="false"/&gt; <co xml:id="CO18-5"/>
  &lt;/log-listener&gt;</programlisting>
<calloutlist>
<callout arearefs="CO18-1">
<para>The location base path, where it will write the output.</para>
</callout>
<callout arearefs="CO18-2">
<para>How often to rotate in seconds, defaults to <literal>0</literal> which has a special meaning of never to rotate by time.</para>
</callout>
<callout arearefs="CO18-3">
<para>How many copies to maintain, defaults to <literal>0</literal> which has a special meaning of maintaining a single copy.</para>
</callout>
<callout arearefs="CO18-4">
<para>Maximum size in bytes it lets the log file to grow. If the log file becomes greater than that, it automatically rotates it.</para>
</callout>
<callout arearefs="CO18-5">
<para>Automatically rotate on start up?, defaults to false.</para>
</callout>
</calloutlist>
<simpara>The rotation procedure goes by renaming each copy by increasing its suffix, and <literal>.1</literal> is appended to the base file, the one given by the <literal>file</literal> property. When one copy reaches the <literal>maxsize</literal> limit it is eliminated.</simpara>
<important>
<simpara>The <literal>RotateLogListener</literal> tracks the window, it is not based in the file modification timestamp, so if the application restarts, the time rests and the rotation procedure does not happen until the window time passes since then. Unless of course <literal>rotate-on-startup</literal> is set to <literal>true</literal> and in that case it rotates immediately.</simpara>
</important>
</section>
<section xml:id="_dailyloglistener">
<title>DailyLogListener</title>
<simpara>Rotates the log files daily or ata a given rudimentary schedule, with the ability of compressing old logs. It also extends <literal>RotateLogListener</literal>, so it shares some of its properties, and some other have slightly different meaning.</simpara>
<simpara>As usual, we illustrate the usage by example. For properties commented as optional, the example shows its default values.</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;log-listener class="org.jpos.util.DailyLogListener"&gt;
    &lt;property name="window" value="86400" /&gt;                &lt;!-- optional, defaults to one day --&gt;
    &lt;property name="prefix" value="log/q2" /&gt;               &lt;!-- mandatory --&gt;
    &lt;property name="suffix" value=".log"/&gt;                  &lt;!-- optional --&gt;
    &lt;property name="date-format" value="-yyyy-MM-dd-HH"/&gt;   &lt;!-- optional --&gt;
    &lt;property name="compression-format" value="gzip"/&gt;      &lt;!-- optional --&gt; <co xml:id="CO19-1"/>
    &lt;property name="compressed-suffix" value=".gz"/&gt;        &lt;!-- optional --&gt; <co xml:id="CO19-2"/>
    &lt;property name="maxsize" value="-1"/&gt;                   &lt;!-- optional --&gt; <co xml:id="CO19-3"/>
    &lt;property name="compression-buffer-size" value="131072"/&gt;   &lt;!--optional --&gt; <co xml:id="CO19-4"/>
    &lt;property name="first-rotate-time" value="00:00:00"/&gt;   &lt;!-- optional --&gt; <co xml:id="CO19-5"/>
    &lt;property name="first-rotate-date" value="current date"/&gt;      &lt;!-- optional --&gt;
    &lt;property name="maxage" value="0"/&gt;                     &lt;!-- optional --&gt; <co xml:id="CO19-6"/>
    &lt;property name="delete-regex" value=".."/&gt;              &lt;!-- optional --&gt; <co xml:id="CO19-7"/>
  &lt;/log-listener&gt;
&lt;/logger&gt;</programlisting>
<calloutlist>
<callout arearefs="CO19-1">
<para>Valid values: <literal>gzip</literal>, <literal>zip</literal> and none.</para>
</callout>
<callout arearefs="CO19-2">
<para>Defaults to <literal>.zip</literal> for zip, <literal>.gz</literal> for gzip, and nothing for no compression.</para>
</callout>
<callout arearefs="CO19-3">
<para>Almost equals to <literal>RotateLogListener</literal>, except for <literal>0</literal> (the default) or negative values mean no limit. If the size exceeds this value the file is compressed, and
successive copies will have ".(count)" appended before the suffix.
Unlike <literal>RotateLogListener</literal> older copies have lower numbers.</para>
</callout>
<callout arearefs="CO19-4">
<para>Low level parameter, which determines the size of the
buffer used to read from the uncompressed file, defaults to
128*1024 = 128 KB. Use bigger values in machines with a lot of
memory and if the application produces big log files in the given window.</para>
</callout>
<callout arearefs="CO19-5">
<para><literal>first-rotate-time</literal> and <literal>first-rotate-date</literal> determines the first rotation,
successive rotations will take place when determined by this two
parameters plus multiples of window, the defaults are 00:00:00 and today
and the formats are HH:mm:ss and yyyy-MM-dd respectively. The later only makes sense if you want to rotate on a period greater (and multiple of) a day, like weekly or monthly.</para>
</callout>
<callout arearefs="CO19-6">
<para>Max age of log files, the log listener deletes files older than this property in seconds. It calculates the age from file attributes in the file system and deletes all that match a delete regular expression.</para>
</callout>
<callout arearefs="CO19-7">
<para>Regular expression that files need to match to be deleted by age. The default is the concatenation of:</para>
<itemizedlist>
<listitem>
<simpara><literal>^</literal>, match from the start</simpara>
</listitem>
<listitem>
<simpara>The filename part of the prefix, <literal>q2</literal> in the example.</simpara>
</listitem>
<listitem>
<simpara><literal>.+</literal> one or more characters.</simpara>
</listitem>
<listitem>
<simpara>suffix, in the example <literal>.log</literal></simpara>
</listitem>
<listitem>
<simpara>compressed suffix</simpara>
</listitem>
<listitem>
<simpara><literal>$</literal> must end with the suffix.</simpara>
<simpara>It only deletes files in the same directory as the base log file.</simpara>
</listitem>
</itemizedlist>
</callout>
</calloutlist>
</section>
<section xml:id="ProtectedLogListener">
<title>ProtectedLogListener</title>
<simpara>A filter log listener that protects the content of sensitive data, it does not actually log anything to a file o stream but just modify the log events, for the next log listener in line.</simpara>
<simpara>Since it doesn&#8217;t make sense to be used on its own, in the example we show how it is meant to be used in combination with output log listeners. Properties not set, default to empty string, i.e. empty set of fields. Subelements can be protected as well by passing them in the path form, e.g. <literal>49.2</literal></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;logger name="Q2"&gt;
  &lt;log-listener class="org.jpos.util.SimpleLogListener"/&gt;       <co xml:id="CO20-1"/>
  &lt;log-listener class="org.jpos.util.ProtectedLogListener"&gt;
    &lt;property name="protect" value="2 35 45 49.2 55" /&gt;         <co xml:id="CO20-2"/>
    &lt;property name="wipe"    value="48" /&gt;                      <co xml:id="CO20-3"/>
  &lt;/log-listener&gt;
  &lt;log-listener class="org.jpos.util.RotateLogListener"&gt;        <co xml:id="CO20-4"/>
    &lt;property name="file" value="log/q2.log" /&gt;
    &lt;property name="window" value="86400" /&gt;
    &lt;property name="copies" value="5" /&gt;
    &lt;property name="maxsize" value="1000000" /&gt;
  &lt;/log-listener&gt;
&lt;/logger&gt;</programlisting>
<calloutlist>
<callout arearefs="CO20-1">
<para>Standard output isn&#8217;t protected because it is placed before the <literal>ProtectedLogListener</literal>.</para>
</callout>
<callout arearefs="CO20-2">
<para>Fields to protect, separated by spaces, its sensitive parts are repleced by underscores (<literal>_</literal>), <link xl:href="https://github.com/jpos/jPOS/blob/master/jpos/src/main/java/org/jpos/iso/ISOUtil.java#L903"><literal>ISOUtil.protect()</literal></link> determines which positions need to be replaced, for example:<?asciidoc-br?>
<literal>"40000101010001"</literal> is converted to <literal>"400001____0001"</literal>.<?asciidoc-br?>
<literal>"40000101010001=020128375"</literal> is converted to <literal>"400001____0001=0201_____"</literal>.<?asciidoc-br?>
<literal>"40000101010001D020128375" is converted to "400001____0001D0201_____"</literal>.<?asciidoc-br?>
<literal>"123"</literal> is converted to <literal>"___"</literal>.</para>
</callout>
<callout arearefs="CO20-3">
<para>Fields to wipe out, they are just replaced by constants, <literal>[WIPE]</literal> replaces a string field, and bytes <literal>AA55AA55</literal> (hex representation) replaces any other kind of field, including composite fields but designed to replace binary ones.</para>
</callout>
<callout arearefs="CO20-4">
<para>Files written by the <literal>RotateLogListener</literal> will have all given fields protected, since it is after the <literal>ProtectedLogListener</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="_fsdprotectedloglistener">
<title>FSDProtectedLogListener</title>
<simpara>This log listener performs the same task as <literal>ProtectedLogListener</literal> but for <literal>FSDMsg</literal> and <literal>FSDISOMsg</literal> instances. And since its usage is the same, we just focus on its configuration part.</simpara>
<simpara>In this case the fields reference <literal>FSDMsg</literal> fields, and for <literal>FSDISOMsg</literal> instances its inner <literal>FSDMsg</literal> fields.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;log-listener class="org.jpos.util.FSDProtectedLogListener"&gt;
    &lt;property name="protect" value="2 35 pan track2" /&gt;             <co xml:id="CO21-1"/>
    &lt;property name="wipe"    value="pin 52" /&gt;                      <co xml:id="CO21-2"/>
    &lt;property name="truncate" value="field1:100 field2:50" /&gt;       <co xml:id="CO21-3"/>
&lt;/log-listener&gt;</programlisting>
<calloutlist>
<callout arearefs="CO21-1">
<para>Fields to protect, see <xref linkend="ProtectedLogListener"/> for more details.</para>
</callout>
<callout arearefs="CO21-2">
<para>Fields to wipe out.</para>
</callout>
<callout arearefs="CO21-3">
<para>In addition, this log listener also can truncate fields, this property specifies the fields and the lengths to which the log listener will truncate them separated by a colon.</para>
</callout>
</calloutlist>
</section>
<section xml:id="_sysloglistener">
<title>SysLogListener</title>
<simpara>The <literal>SysLoglistener</literal> sends the events to the system log concentrator (aka syslog), see <link xl:href="https://www.ietf.org/rfc/rfc3164.txt">https://www.ietf.org/rfc/rfc3164.txt</link>.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;log-listener class="org.jpos.util.SysLogListener"&gt;
    &lt;property name="facility" value="16" /&gt;         <co xml:id="CO22-1"/>
    &lt;property name="severity" value="6" /&gt;          <co xml:id="CO22-2"/>

    &lt;property name="host" value="localhost"/&gt;       <co xml:id="CO22-3"/>
    &lt;property name="port" value="514"/&gt;             <co xml:id="CO22-4"/>

    &lt;property name="tags" value="audit, syslog" /&gt;  <co xml:id="CO22-5"/>
    &lt;property name="prefix" value="[jPOS]" /&gt;       <co xml:id="CO22-6"/>

    &lt;property name="syslog.facility" value="21" /&gt;  <co xml:id="CO22-7"/>
    &lt;property name="syslog.severity" value="5" /&gt;

    &lt;property name="audit.facility" value="21" /&gt;
    &lt;property name="audit.severity" value="4" /&gt;
&lt;/log-listener&gt;</programlisting>
<calloutlist>
<callout arearefs="CO22-1">
<para>Default facility, used if it is not defined for a tag. Optional, defaults to <literal>16</literal>, local use 0.</para>
</callout>
<callout arearefs="CO22-2">
<para>Default severity, used if it is not defined for a tag. Optional, defaults to <literal>6</literal>, Informational.</para>
</callout>
<callout arearefs="CO22-3">
<para>Host to send the log events to. Optional, defaults to <literal>localhost</literal>.</para>
</callout>
<callout arearefs="CO22-4">
<para>Port to connect to send the log events on the host. Optional, defaults to 514.</para>
</callout>
<callout arearefs="CO22-5">
<para>The log listener will only send the log events with its tags listed here. Optional, defaults to <literal>"audit, syslog"</literal>.</para>
</callout>
<callout arearefs="CO22-6">
<para>An optional prefix to prepend to the message to be sent, if not defined, nothing is prepended.</para>
</callout>
<callout arearefs="CO22-7">
<para>Each tag can be mapped to a different facility and severity.</para>
</callout>
</calloutlist>
</section>
<section xml:id="_realmlogfilter">
<title>RealmLogFilter</title>
<simpara>Filters LogEvents by their realm.</simpara>
<simpara>RealmLogFilter is a filter for log events, as with the protected log listeners it should be defined <emphasis>before</emphasis> other standard LogListeners such as SimpleLogListener or RotateLogListener that write the output to the place we want to avoid logging filtered events.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;log-listener class="org.jpos.util.RealmLogFilter"&gt;
    &lt;property name="dump-interval" value="60000"/&gt;      <co xml:id="CO23-1"/>
    &lt;enabled&gt;                                           <co xml:id="CO23-2"/>
        Q2.system
        my-realm
    &lt;/enabled&gt;
&lt;/log-listener&gt;</programlisting>
<calloutlist>
<callout arearefs="CO23-1">
<para>Those realms that had events but were filtered will be saved. These are logged at an  interval defined by the <literal>dump-interval</literal> property in a tag. Once logged, these filtered realms are reset. This property is optional and it defautls to <literal>0</literal> which means never to log missed realms.</para>
</callout>
<callout arearefs="CO23-2">
<para>If <literal>enabled</literal> tag is present, then the log listener will filter all realms not defined there. If this tag is present the <literal>disabled</literal> tag is ignroed. In this example only log events with realms <literal>Q2.system</literal> or <literal>my-realm</literal> are going to be passed on to the next log listener.</para>
</callout>
</calloutlist>
<programlisting language="xml" linenumbering="unnumbered">&lt;log-listener class="org.jpos.util.RealmLogFilter"&gt;
    &lt;disabled&gt;                                          <co xml:id="CO24-1"/>
        filtered-realm-1
        filtered-realm-2
    &lt;/disabled&gt;
&lt;/log-listener&gt;</programlisting>
<calloutlist>
<callout arearefs="CO24-1">
<para>If <literal>enabled</literal> tag is not present and <literal>disabled</literal> tag is, then only events with realms matching one of the defined here are filtered out, and all the other are passed to the next log listener. In this example it would not pass log events with realm <literal>filtered-realm-1</literal> or <literal>fitlered-realm-2</literal> to the next log listener.</para>
</callout>
</calloutlist>
</section>
</section>
</chapter>
<chapter xml:id="_transactionmanager">
<title>TransactionManager</title>
<simpara>The TransactionManager (also called <emphasis>TM</emphasis> in this document) is just another Q2
Service, but it is such an important component in most jPOS based applications
that it stands out, deserving its own chapter.</simpara>
<simpara>jPOS is typically used to implement mission-critical applications that
have to carefully deal with error conditions.</simpara>
<simpara>When you access a web page and a transient network error occurs,
you just hit the <emphasis role="strong">reload</emphasis> button on your browser. By contrast, a complex
financial transaction involves a lot of activities such as contacting remote
hosts, notifying risk management systems, placing holds in cardholder&#8217;s credit
accounts, database logging, etc.</simpara>
<simpara>So, if something goes wrong or your system just dies due to a power failure,
it&#8217;s more complicated than simply hitting the <emphasis role="strong">reload</emphasis> button: you have to reverse
the impact of whatever actions had been taken up to the failure point.</simpara>
<simpara>The <literal>org.jpos.transaction</literal> package - along with the Q2-based <emphasis role="strong">TransactionManager</emphasis>
implementation - provides a framework and set of components that can assist dealing
with the previous scenario. This combination also fosters code reuse and
<emphasis>componentization</emphasis>.</simpara>
<note>
<simpara>This doesn&#8217;t mean a jPOS based application needs to use the TransactionManager.
It&#8217;s proven, it&#8217;s fast, it&#8217;s reliable, we are aware of use cases where the TM is used to
process millions of transactions per day, we @jposconsulting use it in most of
our applications, but it&#8217;s up to you to use it or not.</simpara>
</note>
<simpara>The key class is the
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/transaction/TransactionParticipant.html">TransactionParticipant</link>
that exposes the following interface:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface TransactionParticipant extends TransactionConstants {
        public int  prepare (long id, Serializable context);
        public void commit  (long id, Serializable context);
        public void abort   (long id, Serializable context);
    }


   // the TransactionConstants interface provides the following definitions:

    public interface TransactionConstants {
        public static final int ABORTED  = 0;
        public static final int PREPARED = 1;
        public static final int RETRY    = 2;
        public static final int PAUSE    = 4;
        public static final int NO_JOIN  = 0x40;
        public static final int READONLY = 0x80;
    }</programlisting>
<note>
<simpara>As of jPOS 2.1.0 the <literal>commit</literal> and <literal>abort</literal> methods have default
implementations so they don&#8217;t have to be called in situations
where <literal>prepare</literal> returns the <literal>NO_JOIN</literal> modifier.</simpara>
</note>
<simpara>The TransactionManager implementation <emphasis>drives</emphasis> the transaction by calling all of its
participants' <literal>prepare</literal> method. If all of them return <literal>PREPARED</literal> (indicating that
they are ready to proceed with the transaction), then the transaction moves
to the <emphasis>COMMITTING</emphasis> phase, at which point the TransactionManager will call all of the
participants' <literal>commit</literal> method.</simpara>
<simpara>If one of the participants' <literal>prepare</literal> method returns <literal>ABORTED</literal>, then the transaction
moves into an <emphasis>ABORTING</emphasis> phase, and all the participants previously called to get
prepared will get a call to their <literal>abort</literal> method.</simpara>
<section xml:id="_transactionconstants">
<title>TransactionConstants</title>
<table frame="all" rowsep="1" colsep="1">
<title>TransactionConstants</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="22.2222*"/>
<colspec colname="col_2" colwidth="11.1111*"/>
<colspec colname="col_3" colwidth="66.6667*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Value</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>ABORTED</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>The participant is not prepared. Transaction should be aborted.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PREPARED</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>The participant is prepared to commit the transaction, provided
  all other participants down the list return PREPARED too.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>RETRY</simpara></entry>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>The transaction will be retried after a short period of time
  defined by the <literal>retry-timeout</literal> TransactionManager
  property (which defaults to 5 seconds).
  This can be used in situations where a transient error has been
  detected (such as a link down situation or a transient database issue).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PAUSE</simpara></entry>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>The transaction will be paused and will be resumed
in the following situations:</simpara>
<simpara>a) Some external thread calls <literal>resume</literal> in the transaction&#8217;s Context
  (provided the Context implements the <literal>Pausable</literal> interface)</simpara>
<simpara>b) A timeout specified by the Context&#8217;s Pausable interface occurs</simpara>
<simpara>c) A default timeout specified by the TransactionManager&#8217;s <literal>pause-timeout</literal> property
  (which defaults to five minutes)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>NO_JOIN</simpara></entry>
<entry align="left" valign="top"><simpara>0x40</simpara></entry>
<entry align="left" valign="top"><simpara>This modifier is a hint to the TransactionManager to let it know
  that it is not required to call this participant&#8217;s
  <literal>commit</literal> or <literal>abort</literal> methods once the committing or aborting
  phase of the transaction is reached.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>READONLY</simpara></entry>
<entry align="left" valign="top"><simpara>0x80</simpara></entry>
<entry align="left" valign="top"><simpara>This modifier is a hint to the TransactionManager to let it know
  that this participant has not modified any persistent information
  in the context, so saving a snapshot of the context is not required.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>FAIL</simpara></entry>
<entry align="left" valign="top"><simpara>0xC0</simpara></entry>
<entry align="left" valign="top"><simpara>Handy constant equals to <literal>ABORTED | READONLY | NO_JOIN</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<simpara>Despite the fact that a participant may indicate that it doesn&#8217;t want to
JOIN a given transaction (by using the <literal>NO_JOIN</literal> run-time modifier),
under certain recovery situations the TransactionManager
may still call its <literal>commit</literal> or <literal>abort</literal> method, so the participant developer
should be prepared to receive a <literal>commit</literal> or <literal>abort</literal> call for an
unknown transaction. The code should check the <literal>long id</literal>
and / or <literal>Serializable context</literal> in order to figure out what to do. That
said, most participants returning <literal>NO_JOIN</literal> actually have empty <literal>commit()</literal>
and <literal>abort()</literal> callbacks.</simpara>
</note>
</section>
<section xml:id="_transaction_context">
<title>Transaction Context</title>
<simpara>The only constraint imposed on a Context implementation is that it has
to implement the <literal>java.io.Serializable</literal> interface. That&#8217;s
because the TransactionManager has to write <literal>snapshots</literal>
of it at different check points.</simpara>
<simpara>You can use any <literal>Serializable</literal> object, either a
custom object such as an application-specific <emphasis>Bean</emphasis>,
or a general-purpose object such as a <literal>java.util.Map</literal>
implementation (e.g., a <literal>Hashmap</literal>).</simpara>
<simpara>But we found it very useful to use a general-purpose context holding
two maps, a regular (persistent) map and a transient one, so that
one can store serializable data that can be automatically persisted
by the TransactionManager (for recovery purposes) as well as <emphasis>live</emphasis>
references (such as a TCP/IP socket or a JDBC connection).</simpara>
<simpara>So there&#8217;s a general purpose
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/transaction/Context.html">Context</link>
reference implementation that in addition implements the
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/transaction/Pausable.html">Pausable</link>
interface, required if you plan to use transaction continuations (<literal>PAUSE</literal>
modifier).</simpara>
<simpara>This Context reference implementation has two kind of <emphasis>put</emphasis> operations:</simpara>
<programlisting language="java" linenumbering="unnumbered">     public void put (Object key, Object value)</programlisting>
<simpara>and</simpara>
<programlisting language="java" linenumbering="unnumbered">     public void put (Object key, Object value, boolean persist)</programlisting>
<simpara>When using the latter, if <literal>persist == true</literal>, then the object can
get automatically persisted by the TransactionManager (if configured to
do so, using the <literal>persistent-space</literal> property).</simpara>
</section>
<section xml:id="_context_recovery_interface">
<title>Context Recovery Interface</title>
<simpara>In the previous section, we described a Transaction Context holding two maps: a
<emphasis>transient</emphasis> map and a <emphasis>persistent</emphasis> one.</simpara>
<simpara>In situations where the TransactionManager dies (e.g., during a power failure), a transaction could
have been in its preparing, committing or aborting phase.</simpara>
<simpara>Either the commit or abort methods will be called on all participants, but
before that happens, the TransactionManager gives the developer the
opportunity to let the participants know that we are not dealing with a
normal commit/abort but a recovery situation.</simpara>
<simpara>The developer may choose to implement the
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/transaction/ContextRecovery.html">ContextRecovery</link>
interface:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface ContextRecovery {
    public Serializable recover (long id, Serializable context, boolean commit); <co xml:id="CO25-1"/>
}</programlisting>
<calloutlist>
<callout arearefs="CO25-1">
<para>the <literal>commit</literal> boolean parameter indicates whether the transaction is going to commit or abort.</para>
</callout>
</calloutlist>
<simpara>The TransactionManager provides the opportunity to build up the transient part
of the Context (e.g., re-establishing a JDBC connection, re-fetching a database
record based on some persistent ID number , etc.).</simpara>
<tip>
<simpara>While many participants can implement this interface, it is reasonable to have a single
one, similar to the initial <literal>PrepareContext</literal>, that can put a recovery flag in the Context,
re-establish JDBC connections, etc.</simpara>
</tip>
</section>
<section xml:id="_assembly_line">
<title>Assembly Line</title>
<simpara>It&#8217;s easier to understand the TM if we imagine an <emphasis role="strong">assembly line</emphasis>.</simpara>
<simpara>Here is an example of a typical transaction (in this case taken from
the jCard system):</simpara>
<simpara>The TransactionManager encourages and allows developers to write reusable
and configurable components called <emphasis>Participants</emphasis>. Here is a short
description of a typical Balance Inquiry transaction, splitted into many
small (easy to develop, easy to reuse, easy to maintain) participants:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>AssemblyLine</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="27.2727*"/>
<colspec colname="col_2" colwidth="72.7273*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>PrepareContext</simpara></entry>
<entry align="left" valign="top"><simpara>We prepare the context with some handy objects, such
 as a transaction <literal>TIMESTAMP</literal>, a <literal>Profiler</literal> and optional
 user specific data required by all participants down
 the execution line.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CheckVersion</simpara></entry>
<entry align="left" valign="top"><simpara>We usually receive messages using a specific version. In this case,
 jCard uses the <link xl:href="http://jpos.org/doc/jPOS-CMF.pdf">jPOS-CMF</link> which
 has a specific field indicating the interchange version. This participant
 just check that and early aborts the transaction if it doesn&#8217;t match our
 expectations</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Open</simpara></entry>
<entry align="left" valign="top"><simpara>If version is OK, we probably want to log the message in a database.
 The <literal>Open</literal> participant gets a JDBC connection and starts a JDBC Transaction.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Switch</simpara></entry>
<entry align="left" valign="top"><simpara>We&#8217;ll explain later the <literal>GroupSelectors</literal> that allows us to put together
 groups of participants in the XML configuration. In this example, the
 selector returns a String with the following content:
    <literal>"balanceinquiry prepareresponse logit close sendresponse"</literal>
 indicating that the TM needs to execute the participants defined
 in those groups.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CheckFields</simpara></entry>
<entry align="left" valign="top"><simpara>Different transactions require the presence of different ISO8583 fields
 in the incoming message. Some are mandatory, some are optional, this
 reusable participant takes care of that. For example, in the case of
 a balance inquiry, we want to make sure that we have fields that allows
 us to identify the card, transaction amount, etc.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CreateTranLog</simpara></entry>
<entry align="left" valign="top"><simpara>If we reach this participant it means the incoming message is kinda OK,
 it has the proper version, it has the required mandatory fields, so we
 create a TranLog record. This is specific to jCard, but your implementation
 is likely to require some kind of transaction log record.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CheckCard</simpara></entry>
<entry align="left" valign="top"><simpara>In order to compute the balance of a given account, we first need to locate
 the card. This involves getting the card by different means, could be track1
 data, track2 data, token, etc. The <literal>CheckCard</literal> participant takes care of that,
 and will place a handy Card object in the Context using a well known constant
 name (in the case of jCard, that constant is called <literal>CARD</literal> and is defined in
 the <literal>org.jpos.ee.Constants</literal> interface, but you can define it elsewhere, probably
 in an <literal>enum</literal>).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CheckTerminal</simpara></entry>
<entry align="left" valign="top"><simpara>We need to check that the client terminal is valid, active, and perhaps check
 its capabilities in order to provide responses in different formats (i.e. for
 printing purposes)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CheckAcquirer</simpara></entry>
<entry align="left" valign="top"><simpara>We need to know the acquirer, perhaps to validate fees involved in this
 transaction.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>SelectAccount</simpara></entry>
<entry align="left" valign="top"><simpara>We know the Card, so we know the CardHolder, depending on the transaction type
 and processing code, we may choose a different account (i.e. checking versus
 saving)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ComputeBalances</simpara></entry>
<entry align="left" valign="top"><simpara>Now we know the account, so we compute its balances (available, accounting)
 and place it in the Context</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PrepareResponse</simpara></entry>
<entry align="left" valign="top"><simpara>We have the balances in the Context in <literal>BigDecimal</literal> objects under well
 known contant keys (i.e. <literal>AVAILABLE_BALANCE</literal>, <literal>ACCOUNTING_BALANCE</literal>), but
 we need to place those in the ISO8583 response, probably in field 54 (additional
 amounts).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LogIt</simpara></entry>
<entry align="left" valign="top"><simpara>Remember we&#8217;ve created a <literal>TranLog</literal> record in the <literal>CreateTranLog</literal> participant above,
 now we need to pick some of the data we have been gathering in the Context and
 place it there, so that it gets persisted in a database row.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Close</simpara></entry>
<entry align="left" valign="top"><simpara>Before we send a response, we need to commit the JDBC transaction and return the
 JDBC session to the pool.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>SendResponse</simpara></entry>
<entry align="left" valign="top"><simpara>Now we send the response back to the network</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ProtectDebugInfo</simpara></entry>
<entry align="left" valign="top"><simpara>The following participant (<emphasis>Debug</emphasis>) dumps the Context&#8217;s content to the jPOS log,
 something very useful for debugging purposes, but there&#8217;s some sensitive data
 in the Context, so this little participant take care of masking it.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Debug</simpara></entry>
<entry align="left" valign="top"><simpara>Dumps the Context to the jPOS log.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Here is the sample log:</simpara>
<screen>     prepare: org.jpos.jcard.PrepareContext NO_JOIN
     prepare: org.jpos.jcard.CheckVersion READONLY NO_JOIN
     prepare: org.jpos.transaction.Open READONLY NO_JOIN
     prepare: org.jpos.jcard.Switch READONLY NO_JOIN
    selector: balanceinquiry prepareresponse logit close sendresponse
     prepare: org.jpos.jcard.CheckFields NO_JOIN
     prepare: org.jpos.jcard.CreateTranLog NO_JOIN
     prepare: org.jpos.jcard.CheckCard NO_JOIN
     prepare: org.jpos.jcard.CheckTerminal NO_JOIN
     prepare: org.jpos.jcard.CheckAcquirer NO_JOIN
     prepare: org.jpos.jcard.SelectAccount NO_JOIN
     prepare: org.jpos.jcard.ComputeBalances NO_JOIN
     prepare: org.jpos.jcard.PrepareResponse NO_JOIN
     prepare: org.jpos.jcard.LogIt READONLY NO_JOIN
     prepare: org.jpos.transaction.Close READONLY
     prepare: org.jpos.jcard.SendResponse READONLY
     prepare: org.jpos.jcard.ProtectDebugInfo READONLY
     prepare: org.jpos.transaction.Debug READONLY
      commit: org.jpos.transaction.Close
      commit: org.jpos.jcard.SendResponse
      commit: org.jpos.jcard.ProtectDebugInfo
      commit: org.jpos.transaction.Debug</screen>
<simpara>In a blue sky scenario like the previous one, the TM calls all participant&#8217;s
<literal>prepare</literal> method, which return PREPARED, and then the <literal>commit</literal> method on
those that have joined the transaction (by not returning the <literal>NO_JOIN</literal>
modifier).</simpara>
<simpara>Here is a diagram for a situation where all participants return just <literal>PREPARED</literal>
(meaning they DO want to join the transaction, so commit gets called).</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/tm_prepared.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>PREPARED</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>When a participant adds the <literal>NO_JOIN</literal> modifier (by returning
<literal>PREPARED | NO_JOIN</literal>), then the TM skips calling that participant&#8217;s
<literal>commit</literal> method as shown in the following diagram.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/tm_no_join.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>PREPARED | NO_JOIN</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>If a participant returns <literal>ABORT</literal>, then the TM calls the <literal>abort</literal> operation
in those participants already called that where <literal>PREPARED</literal> and did not return
the <literal>NO_JOIN</literal> modifier so that they can take corrective action if required.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/tm_abort.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>ABORTED</phrase></textobject>
</inlinemediaobject></simpara>
</section>
<section xml:id="_abortparticipant">
<title>AbortParticipant</title>
<simpara>Imagine you have a list of participants that define a transaction, for example:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>ValidateMessage</literal> (sanity checks)</simpara>
</listitem>
<listitem>
<simpara><literal>FetchData</literal> (i.e. get Terminal/Merchant info from database)</simpara>
</listitem>
<listitem>
<simpara><literal>QueryRemoteHost</literal></simpara>
</listitem>
<listitem>
<simpara><literal>LogTransaction</literal></simpara>
</listitem>
<listitem>
<simpara><literal>SendResponse</literal></simpara>
</listitem>
</itemizedlist>
<simpara>If everything goes okay and all participants return <literal>PREPARED</literal>, then you&#8217;ll have
no problem reaching the last set of participants. By contrast, if for some
reason a given participant fails (e.g., imagine <literal>FetchData</literal> fails), then the
remaining participants down the list (in our example, FetchData through
<literal>SendResponse</literal>) won&#8217;t get called because the transaction manager will initiate
the aborting procedure (which will call abort(id,context) only on the
previously-called participants, i.e., only on ValidateMessage in our example).</simpara>
<simpara>In the previous example, while it&#8217;s okay to ignore a call to the
<literal>QueryRemoteHost</literal> participant, you may still want to send a response
back to the client, or even log the transaction, so you do want to call
<literal>SendResponse</literal>.</simpara>
<simpara>The
<link xl:href="http://jpos.org/doc/javadoc/org/jpos/transaction/AbortParticipant.html">AbortParticipant</link>
is designed to solve this problem:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface AbortParticipant extends TransactionParticipant {
    public int  prepareForAbort (long id, Serializable context);
}</programlisting>
<simpara>Participants implementing the <literal>AbortParticipant</literal> will get called even if the transaction
is bound to abort.</simpara>
<tip>
<simpara>If we use this technique to implement a <literal>SendResponse</literal> participant, as an additional
protection it is a good idea to verify that we are not approving a transaction.</simpara>
</tip>
<note>
<simpara>As of jPOS 2.1.0 the <literal>prepareForAbort</literal> has a default implementation that
calls the TransactionParticipant&#8217;s <literal>prepare</literal> method.</simpara>
</note>
<simpara>If you see the previous diagram, when participant 3 returns <literal>ABORTED</literal>, the last
participant doesn&#8217;t get called. If participant number four implements this
<literal>AbortParticipant</literal> interface, the diagram would look like this:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/tm_abort_participant.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>AbortParticipant</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>At <literal>prepareForAbort()</literal> time, returning <literal>PREPARED</literal>, or <literal>ABORTED</literal>, is quite the same.
A <literal>PREPARED</literal> wouldn’t affect the flow of the transaction, it’s still in its <literal>ABORT</literal> track.
But the <literal>NO_JOIN</literal> modifier could be useful if you’re doing nothing in your <literal>abort()</literal> callback.
It’s an indication to the TM that it doesn’t need to call abort.
The difference is minimal, calling a dummy <literal>abort()</literal> method that does nothing is quite fast,
but the TM still needs to register that it needs to call that participant, and it records histograms, profiler, etc.
So <literal>NO_JOIN</literal> is a good thing to consider returning.</simpara>
</section>
<section xml:id="_groupselector">
<title>GroupSelector</title>
<simpara>Having a configuration like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;txnmgr ...&gt;
   &lt;participant A /&gt;
   &lt;participant B /&gt;
   &lt;participant C /&gt;
   &lt;participant D /&gt;
   ...
  &lt;/txnmgr&gt;</programlisting>
<simpara>may be good for some small applications, but you risk ending up having to
configure multiple transaction managers for different classes of transactions
(e.g., network management, authorization, draft capture, etc.) or add
complexity to participants in order to operate or do nothing depending
on the transation type.</simpara>
<simpara>In order to simplify the TransactionManager configuration, we&#8217;ve added a very
simple interface called <literal>GroupSelector</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public interface GroupSelector extends TransactionParticipant {
        public String select (long id, Serializable context);
    }</programlisting>
<simpara>A participant implementing the <literal>GroupSelector</literal> interface can modify the flow of
a transaction by returning a space-separated list of group names (or can
specify <emphasis>null</emphasis> to signify no action).</simpara>
<simpara>Our Q2-based TransactionManager reference implementation supports this
interface and lets you design your own configuration file with a structure
like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;txnmgr ...&gt;
   &lt;participant A /&gt;
   &lt;participant B /&gt;
   ...
   ...
   &lt;group name="GroupA"&gt;
    &lt;participant A /&gt;
    &lt;participant B /&gt;
    &lt;participant C /&gt;
   &lt;/group&gt;
   &lt;group name="GroupB"&gt;
    &lt;participant J /&gt;
    &lt;participant K /&gt;
    &lt;participant L /&gt;
   &lt;/group&gt;
   &lt;group name="GroupC"&gt;
    &lt;participant X /&gt;
    &lt;participant Y /&gt;
    &lt;participant Z /&gt;
   &lt;/group&gt;
   ...
   ...
  &lt;/txnmgr&gt;</programlisting>
<example>
<title>Sample GroupSelector implementation</title>
<programlisting language="java" linenumbering="unnumbered">    public class Switch implements GroupSelector {
        public int  prepare (long id, Serializable context) {
            return PREPARED | READONLY | NO_JOIN;
        }
        public void commit   (long id, Serializable context) { }
        public void abort    (long id, Serializable context) { }
        public String select (long id, Serializable context) {
            try {
                ISOMsg m = (ISOMsg) ((Context)context).get (ISOMSG);
                String groups = cfg.get (m.getMTI(), null);
                return groups;
            } catch (Exception e) {
                warn (e);
                return null;
            }
        }
    }</programlisting>
</example>
<simpara>By using the <literal>Switch</literal> presented in the previous example, you can write a
TransactionManager configuration file like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   ...
   ...
   &lt;participant class="org.jpos.my.Switch" logger="Q2"&gt;
    &lt;property name="0100" value="Authorization Response Log" /&gt;
    &lt;property name="0200" value="Financial Response Log" /&gt;
    &lt;property name="0220" value="Notification Response Log" /&gt;
    &lt;property name="0221" value="Notification Response Log" /&gt;
    &lt;property name="0420" value="Reversal Response Log" /&gt;
    &lt;property name="0421" value="Reversal Response Log" /&gt;
    &lt;property name="0500" value="BatchManagement Response Log" /&gt;
    &lt;property name="0421" value="Reversal Response Log" /&gt;
    &lt;property name="0800" value="NetworkManagement Response Log" /&gt;
   &lt;/participant&gt;
   ...
   ...
   &lt;group name="Financial"&gt;
    &lt;participant class="com.my.company.CheckRequiredFields"&gt;
     &lt;property name="fields" value="0,3,4,17,49,32,41,43,37,PAN,AMOUNT" /&gt;
    &lt;/participant&gt;
    &lt;participant class="com.my.company.CheckCurrency" /&gt;
    ...
    ...
   &lt;/group&gt;

   &lt;group name="Reversal"&gt;
    ...
    ...
   &lt;/group&gt;
   ...
   ...</programlisting>
<simpara>Using the previous approach, the application can be designed using small
reusable participants. Moreover, using XML entity expansion, the resulting
configuration file can be very readable.</simpara>
<simpara>We have found it very useful to have very small participants to perform tasks
like: Debug the context; introduce Delays (during testing); Open  and Close
O/R mapping sessions, etc.</simpara>
</section>
<section xml:id="_transactionmanager_implementation">
<title>TransactionManager implementation</title>
<simpara>The <literal>TransactionManager</literal> is a jPOS Service that monitors a Space queue waiting
for transactions to be processed. These transactions are expected to be any
<literal>Serializable</literal> object, but in most jPOS applications those are actually
<literal>org.jpos.transaction.Context</literal> objects.</simpara>
<simpara>The following image shows a typical scenario:</simpara>
<itemizedlist>
<listitem>
<simpara>A QServer (or a QMUX) receives a message and delegate its handling to an <literal>ISORequestListener</literal>
implementation</simpara>
</listitem>
<listitem>
<simpara>The <literal>ISORequestListener</literal> creates an instance of a <literal>Context</literal>, puts there some information relevant
to the transaction (such as a reference to the received <literal>ISOMsg</literal> and the originating <literal>ISOSource</literal>)
and place it in a well known space, using a well known <literal>key</literal>. We use the space as a <emphasis>queue</emphasis>
so we call it <emphasis>queue</emphasis>, but it&#8217;s just a regular entry in the space under a well known name.</simpara>
</listitem>
<listitem>
<simpara>The <literal>TransactionManager</literal> picks the entry from the space (using a regular <literal>in</literal> operation)
and runs the previously described two-phase commit protocol on the configured participants.</simpara>
</listitem>
</itemizedlist>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/tm_example.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>TransactionManager Example</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Each participant is instantiated and configured just once by the TransactionManager at
init time, they use the <emphasis>Flyweight pattern</emphasis>, but the TransactionManager uses several
simultaneous sessions to handle transactions.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/tm_sessions.png" contentwidth="400px"/>
</imageobject>
<textobject><phrase>TransactionManager Sessions</phrase></textobject>
</inlinemediaobject></simpara>
<important>
<simpara>In the previous paragraph we mention that the TransactionManager uses the
<emphasis>Flyweight pattern</emphasis>.  It is extremely important to understand the pattern
before implementing participants. Each participant is instantiated once, but
multiple sessions can run simultaneously. In addition, sessions can be paused
and continued. All session information must be stored in the Context, which the
transaction manager appropriately sets before calling a participant, but <emphasis role="strong">never
ever</emphasis> in member variables.</simpara>
</important>
<tip>
<simpara>Participants usually don&#8217;t need a reference to their TransactionManager.
If required, the participant can implement a method:</simpara>
<simpara><literal>setTransactionManager(TransactionManager tm)</literal></simpara>
<simpara>that will get called once at initialization time using reflection.</simpara>
</tip>
<section xml:id="_tm_use_of_spaces">
<title>TM use of spaces</title>
<simpara>The TransactionManager uses 3 different spaces for operation.</simpara>
<simpara>We see in the previous diagram that the producer (depicted as <emphasis>client</emphasis> in the
image) places entries in a Space, to be consumed by the TransactionManager.</simpara>
<simpara>This can be the general purpose <emphasis>default</emphasis> space (<literal>tspace:default</literal>), but in
high demanding environments, it is possible to define a separate space,
defined as <literal>input-space</literal>.</simpara>
<simpara>Internally, it also needs a transient space to keep track of the in-flight
transactions. Again, if not specified, the TransactionManager will use
<literal>tspace:default</literal>, but it is possible to configure a separate space for
that using the <literal>space</literal> property in the XML configuration file.</simpara>
<simpara>For recovery purposes, a persistent space (defined with the property
<literal>persistent-space</literal>) is required, i.e.: <literal>je:XXXX</literal> (XXXX being the name
of the space). But taking snapshots to disk reduces the TM speed by
probably an order of magnitude, and many applications that use the
TransactionManager don&#8217;t take advantage of its recovery features,
this space defaults to an internal space.</simpara>
</section>
<section xml:id="_configuration">
<title>Configuration</title>
<simpara>The TransactionManager is implemented by <literal>org.jpos.transaction.TransactionManager</literal>
but <literal>QFactory.properties</literal> defines a couple of handy names for it:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>txnmgr</literal>, or</simpara>
</listitem>
<listitem>
<simpara><literal>transaction-manager</literal></simpara>
</listitem>
</itemizedlist>
<simpara>So a TM configuration can look like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;txnmgr name="myTM" logger="Q2" realm="TM"&gt;
  &lt;property name="queue" value="myTMQueue" /&gt;
  ...
  ...
&lt;/txnmgr&gt;</programlisting>
<simpara>or</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;transaction-manager name="myTM" logger="Q2" realm="TM"&gt;
  &lt;property name="queue" value="myTMQueue" /&gt;
  ...
  ...
&lt;/transaction-manager&gt;</programlisting>
<note>
<simpara>The <literal>name</literal> attribute is not technically required, if ommitted, the transaction manager would
get registered in the <literal>NameRegistrar</literal> using its root-element name (i.e.: <literal>txnmgr</literal> or
<literal>transaction-manager</literal> depending on your configuration). But if you are deploying more than
one TM in the same Q2 instance, the second one would get a <literal>duplicate name</literal> error, and your
XML QBean descriptor would get renamed to <literal>.DUP</literal>. Using the <literal>name</literal> attribute with unique
names solves the problem.</simpara>
</note>
<simpara>The TM requires a mandatory property (<literal>queue</literal>) and honors some optional ones,
which have sensible defaults.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">queue</emphasis><?asciidoc-br?>
This is the Space-based <emphasis>queue</emphasis> where the TM looks for transactions to be processed.
As described above, these transactions are actually <literal>Serializable</literal> objects, typically
an instance of <literal>org.jpos.transaction.Context</literal>. This is a mandatary property.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">input-space</emphasis><?asciidoc-br?>
This is the Space where the TransactionManager&#8217;s sessions wait for transactions
to be queued. It defaults to the default space returned by <literal>SpaceFactory.getSpace()</literal>
that is currently set to <literal>tspace:default</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">space</emphasis><?asciidoc-br?>
Space used by the TransactionManager to handle in-flight transactions. The TM uses
a Space-based circular queue. This Space also uses the system&#8217;s default, but
in high load systems it is reasonable to consider using a unique space for
each TransactionManager.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">persistent-space</emphasis><?asciidoc-br?>
If the application takes advantage of crash recovery features, a persistent
space has to be defined. It can be any persistent space, such as <literal>jdbm</literal> or
the more robust <literal>je</literal> based spaces (i.e. <literal>je:mytm:/path/to/mytm</literal>).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">recover</emphasis><?asciidoc-br?>
When the TransactionManager starts, it checks the persistent space for
in-flight transactions from a previous run. If this feature is not being
used, it is recommended to set <literal>recover</literal> to false (although it doesn&#8217;t hurt
to keep it on in most situations).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">debug</emphasis><?asciidoc-br?>
If true, the TransactionManager logs a small report after each transaction
indicating which participants took place. The log looks like this:</simpara>
</listitem>
</itemizedlist>
<programlisting language="xml" linenumbering="unnumbered">  &lt;debug&gt;
    txnmgr-1:2
            prepare: org.jpos.jcard.PrepareContext NO_JOIN
            prepare: org.jpos.jcard.CheckVersion READONLY NO_JOIN
            prepare: org.jpos.transaction.Open READONLY NO_JOIN
            prepare: org.jpos.jcard.Switch READONLY NO_JOIN
      groupSelector: notsupported prepareresponse close sendresponse
            prepare: org.jpos.jcard.NotSupported NO_JOIN
            prepare: org.jpos.jcard.PrepareResponse NO_JOIN
            prepare: org.jpos.transaction.Close READONLY
            prepare: org.jpos.jcard.SendResponse READONLY
            prepare: org.jpos.jcard.ProtectDebugInfo READONLY
            prepare: org.jpos.transaction.Debug READONLY
             commit: org.jpos.transaction.Close
             commit: org.jpos.jcard.SendResponse
             commit: org.jpos.jcard.ProtectDebugInfo
             commit: org.jpos.transaction.Debug
    head=3, tail=3, outstanding=0, active-sessions=2/2, tps=0, peak=0,
    avg=0.00, elapsed=22ms
  &lt;/debug&gt;</programlisting>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">profiler</emphasis><?asciidoc-br?>
If the profiler property is set to true, in addition to the debug output, the
TransactionManager records the time consumed by each participant callback.
Setting profiler to <literal>true</literal> also sets <literal>debug</literal> to true automatically.</simpara>
</listitem>
</itemizedlist>
<simpara>This adds the following information to the log</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;debug&gt;
    ....
    ....
    &lt;profiler&gt;
      prepare: org.jpos.jcard.PrepareContext [0.0/0.0]
      prepare: org.jpos.jcard.CheckVersion [0.0/0.0]
      prepare: org.jpos.transaction.Open [0.5/0.6]
      prepare: org.jpos.jcard.Switch [0.0/0.6]
      prepare: org.jpos.jcard.NotSupported [0.1/0.7]
      prepare: org.jpos.jcard.PrepareResponse [5.8/6.6]
      prepare: org.jpos.transaction.Close [0.0/6.6]
      prepare: org.jpos.jcard.SendResponse [0.0/6.6]
      prepare: org.jpos.jcard.ProtectDebugInfo [0.0/6.7]
      prepare: org.jpos.transaction.Debug [0.0/6.7]
       commit: org.jpos.transaction.Close [1.0/7.7]
       commit: org.jpos.jcard.SendResponse [4.3/12.0]
       commit: org.jpos.jcard.ProtectDebugInfo [0.2/12.3]
       commit: org.jpos.transaction.Debug [9.3/21.7]
      end [22.8/22.8]
    &lt;/profiler&gt;
  &lt;/debug&gt;</programlisting>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">sessions</emphasis><?asciidoc-br?>
Defines the number of simultaneous sessions (Threads) used to process transactions.
Defaults to one. It is recommended to keep the <literal>sessions</literal> property within a
reasonable value commensurate the number of CPU cores of the system. A
large number here just slows down the capacity of the system.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">max-sessions</emphasis><?asciidoc-br?>
In order to deal with occasional traffic spikes (sometimes caused by small
network glitches), the TransactionManager can temporarily increase the
number of sessions. This property defines that maximum. It defaults to
the value set for <literal>sessions</literal>. For obvious reasons, <literal>max-sessions</literal> can&#8217;t
be less than <literal>sessions</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">max-active-sessions</emphasis><?asciidoc-br?>
When using the TransactionManager <emphasis>continuations</emphasis> feature (where the prepare callback
returns <literal>PAUSE</literal> modifier), it is possible that a small number of sessions
can process a large number of in-flight transactions. Those transactions
may place in the <literal>Context</literal> references to live objects such as JDBC
sessions. In order to place a cap on the number of in-flight transactions
to avoid exhausting resources (for example a JDBC pool), this
<literal>max-active-sessions</literal> property can be set.
The default is 0, which means no limit is imposed.</simpara>
</listitem>
</itemizedlist>
<tip>
<simpara>If you&#8217;re <emphasis>pausing</emphasis> your transactions, please read the previous paragraph
multiple times and make sure you understand it.</simpara>
</tip>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">call-selector-on-abort</emphasis><?asciidoc-br?>
The transaction manager calls the <literal>prepare</literal> method, and then, if the participant
implements the <literal>GroupSelector</literal> interface, it calls its <literal>select</literal> method, regardless
of the result of the <literal>prepare</literal> call. While in practice that&#8217;s a reasonable and
useful behavior, it can be argued that technically, the TM shouldn&#8217;t call <literal>select</literal>
if the transaction is bound to abort. We have provided this configuration parameter
that can be set to <literal>false</literal> in order to enable that behavior.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_transactionstatuslistener">
<title>TransactionStatusListener</title>
<simpara>It is possible to monitor a TransactionManager by adding a <literal>TransactionListener</literal></simpara>
<simpara>The interface is very simple:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface TransactionStatusListener extends EventListener {
    public void update (TransactionStatusEvent e);
}</programlisting>
<itemizedlist>
<listitem>
<simpara>see <link xl:href="http://jpos.org/doc/javadoc/org/jpos/transaction/TransactionStatusListener.html">TransactionStatusListener</link> and</simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://jpos.org/doc/javadoc/org/jpos/transaction/TransactionStatusEvent.html">TransactionStatusEvent</link></simpara>
</listitem>
</itemizedlist>
<simpara>A <literal>TransactionStatusListener</literal> can be either added dynamically (using the
<literal>TransactionManager.addListener(TransactionStatusListener)</literal> method) or using
XML configuration like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;transaction-manager name="myTM" logger="Q2" realm="TM"&gt;
  ...
  ...
  &lt;status-listener class="your.transaction.Listener" /&gt;
  ...
  ...
&lt;/transaction-manager&gt;</programlisting>
<tip>
<simpara>standard logger, realm, and properties can be used.</simpara>
</tip>
<note>
<simpara>Calls to the transaction status listener are synchronous, the implementation
is expected to return really fast.</simpara>
</note>
<simpara>The <literal>TMMON</literal> CLI command (see <xref linkend="cli_commands"/>) is an example of a <literal>TransactionStatusListener</literal> interface
and so is the <literal>org.jpos.transaction.gui.TMMonitor</literal> implementation.</simpara>
</section>
</section>
<section xml:id="_transaction_participants">
<title>Transaction Participants</title>
<simpara>jPOS comes with some general purpose transaction participant implementations that
can be used as-is or used as a reference to write your own.</simpara>
<tip>
<simpara>The <literal>&lt;participant ...&gt;</literal> element supports an optional <literal>enabled</literal> attribute
that can be used disable participants at runtime. The <literal>enabled</literal> value can
either be 'yes/no/true/false` or a list of environment names (i.e.: <literal>prod, staging</literal>).</simpara>
</tip>
<section xml:id="_switch_participant">
<title>Switch participant</title>
<simpara>The <literal>org.jpos.transaction.participant.Switch</literal> is a general
purpose <literal>GroupSelector</literal> that uses a context entry&#8217;s
value to return a set of groups picked from a standard <literal>Configuration</literal>.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Switch participant Configuration Properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>txnname</simpara></entry>
<entry align="left" valign="top"><simpara>Context entry to use as key</simpara></entry>
<entry align="left" valign="top"><simpara><literal>TXNNAME</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>unknown</simpara></entry>
<entry align="left" valign="top"><simpara>Set of groups to be used on not found</simpara></entry>
<entry align="left" valign="top"><simpara>""</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Here is a sample configuration taken from jCard:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;participant class="org.jpos.transaction.participant.Switch"
      logger="Q2" realm="Switch"&gt;
  &lt;property name="100.30"
           value="balanceinquiry prepareresponse logit close sendresponse" /&gt;
  &lt;property name="100.30.182"
           value="customer-balanceinquiry prepareresponse logit close sendresponse" /&gt;
  &lt;property name="100.00"
           value="authorization prepareresponse logit close sendresponse" /&gt;
  &lt;property name="100.02"
           value="auth-void prepareresponse logit close sendresponse" /&gt;
  &lt;property name="100.20"
           value="refund prepareresponse logit close sendresponse" /&gt;
  &lt;property name="100.22"
           value="refund-void prepareresponse logit close sendresponse" /&gt;
  &lt;property name="100.00.201"
           value="auth-adjustment prepareresponse logit close sendresponse" /&gt;
   ...
   ...</programlisting>
<simpara>A previous participant puts in the context under the key <literal>TXNNAME</literal> data taken from
the request ISOMsg (i.e. MTI, processing code, function code).</simpara>
</section>
<section xml:id="_checkfields_participant">
<title>CheckFields participant</title>
<simpara>The <literal>org.jpos.transaction.participant.CheckFields</literal> is a general
participant that can be used to check for mandatory as well as
optional fields present in the context.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>CheckFields Configuration Properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>request</simpara></entry>
<entry align="left" valign="top"><simpara>Name of the ISOMsg to be checked</simpara></entry>
<entry align="left" valign="top"><simpara><literal>REQUEST</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Here is a sample configuration:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;participant class="org.jpos.transaction.participant.CheckFields" logger="Q2"&gt;
   &lt;property name="mandatory" value="PCODE,TRANSMISSION_TIMESTAMP,11,12,AMOUNT,CARD,41" /&gt;
   &lt;property name="optional"  value="15,17,21,22,24,32,37,42,43,46,60,63,62,111,113" /&gt;
   ...
   ...
&lt;/participant&gt;</programlisting>
<simpara>The <literal>CheckFields</literal> handle standard numeric fields performing minimum validations (i.e. <literal>7,11,12,35</literal>),
it just checks for presence of those fields, but it handle some special names that are relevant to
most jPOS applications, specially those dealing with <link xl:href="http://jpos.org/doc/jPOS-CMF.pdf">jPOS-CMF</link>.</simpara>
<simpara>In those situations, <literal>CheckFields</literal> performs additional parsing, validation, and places in the
Context handy objects that other participants can use.</simpara>
<simpara>For example, if we use the name <literal>CARD</literal>, then <literal>CheckFields</literal> participant tries to get us a <literal>Card</literal>
object taking it from either fields 2 and 14 (manual entry) as well as 35 (track2) or 45 (track1).
In addition, it verifies that track1 and track2 are valid, and matches the PAN and EXP values
present in fields 2 and 14 (if available).</simpara>
<simpara>The complete list of special names are:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>PCODE</literal> - parses the processing code.</simpara>
</listitem>
<listitem>
<simpara><literal>CARD</literal>  - creates a <literal>org.jpos.core.Card</literal> Object.</simpara>
</listitem>
<listitem>
<simpara><literal>TID</literal>   - Terminal ID picked from field 41.</simpara>
</listitem>
<listitem>
<simpara><literal>MID</literal>   - Merchant ID picked from field 42.</simpara>
</listitem>
<listitem>
<simpara><literal>TRANSMISSION_TIMESTAMP</literal> - creates a Date object picked from field 7 (ISO-8583 v2003 format).</simpara>
</listitem>
<listitem>
<simpara><literal>TRANSACTION_TIMESTAMP</literal> - creates a Date object picked from field 12 (ISO-8583 v2003 format).</simpara>
</listitem>
<listitem>
<simpara><literal>POS_DATA_CODE</literal> - create a POSDataCode from field 22.</simpara>
</listitem>
<listitem>
<simpara><literal>CAPTURE_DATE</literal> - date object picked from field 17</simpara>
</listitem>
<listitem>
<simpara><literal>AMOUNT</literal> - picks <literal>ISOAmount</literal> from either field 4 or 5. If field 5 is available, then <literal>AMOUNT</literal> holds the content of field 5 (settlement amount)
while field 4 gets stored in another Context variable called <literal>LOCAL_AMOUNT</literal> (ISO-8583 v2003 format).</simpara>
</listitem>
<listitem>
<simpara><literal>ORIGINAL_DATA_ELEMENTS</literal> parses original MTI, STAN and TIMESTAMP from field 56 (ISO-8583 v2003 format).</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_selectdestination">
<title>SelectDestination</title>
<simpara><literal>org.jpos.transaction.participant.SelectDestination</literal> can be used to select
the proper destination for a given message based on BIN, extended BIN or
full or partial PAN number.</simpara>
<simpara>Sample configuration:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;participant class="org.jpos.transaction.participant.SelectDestination"&gt;
  &lt;endpoint destination="MyMux"&gt;
     4                          <co xml:id="CO26-1"/>
     5..7                       <co xml:id="CO26-2"/>
     32..35                     <co xml:id="CO26-3"/>
     366666                     <co xml:id="CO26-4"/>
     366667
     5111111111111111           <co xml:id="CO26-5"/>
  &lt;/endpoint&gt;
  &lt;endpoint destination="AnotherMux"&gt;
     ...
     ...
  &lt;/endpoint&gt;
  &lt;regexp destination="VISA"&gt;   <co xml:id="CO26-6"/>
    ^4[\d]{15}?$
   &lt;/regexp&gt;
 &lt;/participant&gt;</programlisting>
<calloutlist>
<callout arearefs="CO26-1">
<para>All cards starting with 4 go to this destination</para>
</callout>
<callout arearefs="CO26-2">
<para>Cards starting with 5, 6 or 7</para>
</callout>
<callout arearefs="CO26-3">
<para>Cards starting with 32, 33, 34 or 35</para>
</callout>
<callout arearefs="CO26-4">
<para>Only cards starging with BIN 366666</para>
</callout>
<callout arearefs="CO26-5">
<para>Full PAN matching</para>
</callout>
<callout arearefs="CO26-6">
<para>Regular expression based matching (takes priority over the endpoint number matching)</para>
</callout>
</calloutlist>
<simpara>These BIN or BIN ranges have 1 to 19 digits. More specific ranges (more digits)
get priority over less specific ones.</simpara>
<simpara>If the Context has a <literal>DESTINATION</literal> entry already, and this participant finds an
endpoint in its routing tables, then that <literal>DESTINATION</literal> will be overridden. On the
other hand, if <literal>DESTINATION</literal> is not present in the context, and this participant
doesn&#8217;t find a route <emphasis role="strong">and</emphasis> there&#8217;s a <literal>default-destination</literal> property present in
the configuration, then the <literal>default-destination</literal> will be set.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>SelectDestination Configuration Properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>request</simpara></entry>
<entry align="left" valign="top"><simpara>ISOMsg used to derive destination</simpara></entry>
<entry align="left" valign="top"><simpara><literal>REQUEST</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>destination</simpara></entry>
<entry align="left" valign="top"><simpara>Destination Context variable</simpara></entry>
<entry align="left" valign="top"><simpara><literal>DESTINATION</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>default-destination</simpara></entry>
<entry align="left" valign="top"><simpara>If no routing found, route to this destination</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ignore-luhn</simpara></entry>
<entry align="left" valign="top"><simpara>Set to <literal>true</literal> to lift LUHN validation</simpara></entry>
<entry align="left" valign="top"><simpara><literal>false</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>fail</simpara></entry>
<entry align="left" valign="top"><simpara>Set to <literal>true</literal> to fail if no route found</simpara></entry>
<entry align="left" valign="top"><simpara><literal>false</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><literal>SelectDestination</literal> may place CMF failure messages in the Context, i.e.:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">INVALID_CARD_OR_CARDHOLDER_NUMBER</emphasis> when Card is present but invalid.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">ROUTING_ERROR</emphasis> when no route could be found.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_queryhost">
<title>QueryHost</title>
<simpara><literal>org.jpos.transaction.participant.QueryHost</literal> can be used to send an ISOMsg
to a remote host using a MUX and wait for a response.</simpara>
<simpara>It can operate in synchronous mode (waits a given timeout for a response to
arrive) or use TransactionManager&#8217;s <emphasis>continuations</emphasis> (default) to actually
<literal>PAUSE</literal> the transaction until a response arrives.</simpara>
<simpara>It provides sensible defaults up to the point that it can be easily
configured without any property, i.e.:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;participant class="org.jpos.transaction.participant.QueryHost"/&gt;</programlisting>
<table frame="all" rowsep="1" colsep="1">
<title>QueryHost Configuration Properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>request</simpara></entry>
<entry align="left" valign="top"><simpara>ISOMsg to be transmitted</simpara></entry>
<entry align="left" valign="top"><simpara><literal>REQUEST</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>response</simpara></entry>
<entry align="left" valign="top"><simpara>Response object</simpara></entry>
<entry align="left" valign="top"><simpara><literal>RESPONSE</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>destination</simpara></entry>
<entry align="left" valign="top"><simpara>Destination MUX</simpara></entry>
<entry align="left" valign="top"><simpara><literal>DESTINATION</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>timeout</simpara></entry>
<entry align="left" valign="top"><simpara>Time to wait for response in milliseconds</simpara></entry>
<entry align="left" valign="top"><simpara>30000</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>wait-timeout</simpara></entry>
<entry align="left" valign="top"><simpara>Time to wait for connection in case MUX is disconnected in milliseconds</simpara></entry>
<entry align="left" valign="top"><simpara>12000</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>continuations</simpara></entry>
<entry align="left" valign="top"><simpara>Set to false in order to operate in sync mode</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><literal>QueryHost</literal> may place CMF failure messages in the Context, i.e.:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">MISCONFIGURED_ENDPOINT</emphasis> when Context doesn&#8217;t have a <literal>DESTINATION</literal> object or the destination MUX is not available in the <literal>NameRegistrar</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">INVALID_REQUEST</emphasis> if <literal>REQUEST</literal> is not in the context</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">HOST_UNREACHABLE</emphasis> if MUX can not connect to the host or a response is not provided within the specified timeout</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">SYSTEM_ERROR</emphasis> on ISOException</simpara>
</listitem>
</itemizedlist>
<simpara>A MUX/Server can have a request listener like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;request-listener class="org.jpos.iso.IncomingListener" logger="Q2"&gt;
  &lt;property name="queue"     value="TXNMGR" /&gt;
  &lt;property name="ctx.DESTINATION"  value="MYMUX" /&gt;
 &lt;/request-listener&gt;</programlisting>
<simpara>Then a TransactionManager can be configured like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;txnmgr class="org.jpos.transaction.TransactionManager" logger="Q2"&gt;
  &lt;property name="queue" value="TXNMGR"/&gt;
  &lt;property name="sessions" value="2"/&gt;
  &lt;property name="max-sessions" value="128"/&gt;
  &lt;property name="debug" value="true"/&gt;

  &lt;participant class="org.jpos.transaction.participant.QueryHost"/&gt;
  &lt;participant class="org.jpos.transaction.participant.SendResponse"/&gt;
 &lt;/txnmgr&gt;</programlisting>
<simpara>In the previous example <literal>IncomingListener</literal> will create a context and set the
<literal>SOURCE</literal>, <literal>REQUEST</literal> and <literal>DESTINATION</literal> variables. Those will be queued through
a Space to the <literal>TXNMGR</literal> queue. The TransactionManager will query the remote host
using a MUX called <literal>MYMUX</literal> (the <literal>NameRegistrar</literal> will show <literal>mux.MYMUX</literal>) and the
response (if present) should be placed in the context under the name <literal>RESPONSE</literal>.</simpara>
<simpara><literal>SendResponse</literal> participant will pick that information to provide a response.</simpara>
<note>
<simpara>The previous was an ideal situation where we get a response. In a real world application,
a small participant sitting before <literal>SendResponse</literal> would analyze <literal>ctx.getResult()</literal> for failures
and set the appropriate response.</simpara>
</note>
</section>
<section xml:id="_sendresponse">
<title>SendResponse</title>
<simpara>The <literal>org.jpos.transaction.participant.SendResponse</literal> can be used
to provide responses to a given source. It looks for a <literal>SOURCE</literal>
property and a <literal>RESPONSE</literal> property in the Context and if both
are present, and the source is connected, it sends back the response.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>SendResponse Configuration Properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>source</simpara></entry>
<entry align="left" valign="top"><simpara><literal>ISOSource</literal> used to send back the response</simpara></entry>
<entry align="left" valign="top"><simpara><literal>SOURCE</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>request</simpara></entry>
<entry align="left" valign="top"><simpara>The request <literal>ISOMsg</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>REQUEST</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>response</simpara></entry>
<entry align="left" valign="top"><simpara>A response <literal>ISOMsg</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>RESPONSE</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>header-strategy</simpara></entry>
<entry align="left" valign="top"><simpara>Header handling</simpara></entry>
<entry align="left" valign="top"><simpara><literal>PRESERVE_RESPONSE</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The <literal>header-strategy</literal> is used to define how to handle the message&#8217;s header.
It supports the following values:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>PRESERVE_RESPONSE</literal> (default) use the response&#8217;s header</simpara>
</listitem>
<listitem>
<simpara><literal>PRESERVE_ORIGINAL</literal> use the request&#8217;s header</simpara>
</listitem>
<listitem>
<simpara><literal>SET_TO_NULL</literal> ditto - sets the response header to null</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>As a safety net, the <literal>SendResponse</literal> participant verifies that there is
no entry in the Context under the name <literal>TX</literal> (typically used to store a
JDBC/DB transaction). This is an arbitrary convention, we want to make
sure that transactions are committed to disk before actually sending
back responses.</simpara>
</note>
</section>
<section xml:id="_jsparticipant">
<title>JSParticipant</title>
<simpara>The <literal>org.jpos.transaction.participant.JSParticipant</literal> is a handy stock
participant that leverages Java 8 Nashorn.</simpara>
<simpara>Here is a sample invocation:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;participant class="org.jpos.transaction.participant.JSParticipant"
    logger="Q2" realm="js" src='deploy/test.js' /&gt;</programlisting>
<simpara>And here is a sample script:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var K = Java.type("org.jpos.transaction.TransactionConstants");

var prepare = function(id, ctx) {
    var map = ctx.getMap();
    ctx.log ("Prepare has been called");
    ctx.log (map.TIMESTAMP);
    map.NEWPROPERTY='ABC';
    return K.PREPARED;
}

var prepareForAbort = function(id, ctx) {
    ctx.put ("Test", "Test from JS transaction $id");
    ctx.log ("prepareForAbort has been called");
    return K.PREPARED;
}

var commit = function(id, ctx) {
    ctx.log ("Commit has been called");
}

var abort = function(id, ctx) {
    ctx.log ("Abort has been called");
}</programlisting>
</section>
<section xml:id="_pause">
<title>Pause</title>
<simpara>The <literal>org.jpos.transaction.participant.Pause</literal> can be used to slow down
the flow of selected transactions, without consuming TransactionManager&#8217;s
sessions (it pauses the transaction).</simpara>
<simpara>Here is a sample use:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;participant class="org.jpos.transaction.participant.Pause"&gt;
 &lt;property name="timeout" value="5000" /&gt;                       <co xml:id="CO27-1"/>
&lt;/participant&gt;</programlisting>
<calloutlist>
<callout arearefs="CO27-1">
<para>Pauses the transaction for 5 seconds</para>
</callout>
</calloutlist>
<tip>
<simpara>This can be used to slightly delay specific transactions that may
come in bursts (i.e. during a SAF download), such as reversals.</simpara>
</tip>
</section>
</section>
</chapter>
<chapter xml:id="_resultcode">
<title>ResultCode</title>
<simpara>Most jPOS applications need to deal with result codes going and coming
to and from different endpoints.</simpara>
<simpara>A "Card Expired" result code (data element 39) can be <literal>14</literal> for a given
ISO-8583 v1987 endpoint, a <literal>54</literal> in another v87 one and <literal>1001</literal> in a
v2003 link.</simpara>
<simpara>In addition to the 100+ properly defined result codes in the ISO-8583
v2003 spec (used by jPOS Common Message format)<footnote><simpara>jPOS Common Message Format - <link xl:href="http://jpos.org/doc/jPOS-CMF.pdf">http://jpos.org/doc/jPOS-CMF.pdf</link></simpara></footnote>
jPOS as well as user applications need to define and map their own result codes.</simpara>
<simpara><literal>org.jpos.rc</literal> defines two main interfaces:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">IRC</emphasis> (Internal Result Code)</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">RC</emphasis> (Result Code, which represents an external result code)</simpara>
</listitem>
</itemizedlist>
<simpara>The <literal>IRC</literal> interface is very simple, it just holds an integer value:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface IRC {
    int irc();
}</programlisting>
<simpara>and the <literal>RC</literal> looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface RC {
    String rc();
    String display();
}</programlisting>
<simpara>Then we have an <literal>IRCConverter</literal> interface that maps an <literal>IRC</literal> into an <literal>RC</literal></simpara>
<programlisting language="java" linenumbering="unnumbered">public interface IRCConverter {
    RC convert (IRC irc);
    IRC convert (RC rc);
}</programlisting>
<section xml:id="_cmf">
<title>CMF</title>
<simpara><literal>org.jpos.rc.CMF</literal> is an enum that implements <literal>IRC</literal> and defines all jPOS-CMF possible internal result codes,</simpara>
<programlisting language="java" linenumbering="unnumbered">public enum CMF implements IRC {
    // Approved
    APPROVED         (0),
    HONOR_WITH_ID    (1),
    APPROVED_PARTIAL (2),
    APPROVED_VIP     (3),
    APPROVED_UPDATE_TRACK3 (4),
    APPROVED_ISSUER_SPECIFIED_ACCOUNT (5),
    APPROVED_PARTIAL_ISSUER_SPECIFIED_ACCOUNT (6),
    APPROVED_FEES_DISPUTED(8),
    APPROVED_WITH_OVERDRAFT(9),
    APPROVED_CUSTOMER_REACTIVATED(10),
    APPROVED_TERMINAL_UNABLE_TO_PROCESS_ONLINE(11),
    APPROVED_OFFLINE (12),
    APPROVED_OFFLINE_REFERRAL (13),

    // Denied Authorization
    DO_NOT_HONOUR(1000),
    EXPIRED (1001),
    SUSPECTED_FRAUD(1002),
    CONTACT_ACQUIRER(1003),
    RESTRICTED_CARD(1004),
    CONTACT_ACQUIRER_SECURITY(1005),
    MAX_PIN_TRIES_EXCEEDED(1006),
    REFER_TO_ISSUER(1007),
    REFER_TO_ISSUER_SPECIAL(1008),
    INVALID_CARD_ACCEPTOR(1009),
    ...
    ...
    GENERAL_DECLINE(9999),

    // jPOS specific result code
    JPOS(10000),

    // User specific result code
    USER(90000);
    ...
    ...
}</programlisting>
<tip>
<simpara>See <link xl:href="https://github.com/jpos/jPOS/blob/master/jpos/src/main/java/org/jpos/rc/CMF.java">CMF.java at Github</link>
for an up-to-date list of possible CMF IRCs.</simpara>
</tip>
<simpara>The standard <literal>CMF</literal> enum defines two special result codes, <literal>JPOS</literal> (with an irc
value 10000) and <literal>USER</literal> (with an irc value 90000).</simpara>
<simpara>jPOS.org standard applications would use values 10000 to 19999 for its result
codes and we suggest user applications using the jPOS framework to use result codes
90000 to 99999.</simpara>
<simpara>This of course is optional.</simpara>
<simpara>We provide a general purpose converter implementation called <literal>CMFConverter</literal> that has the following
features:</simpara>
<itemizedlist>
<listitem>
<simpara>It provides reasonable IRC-to-RC mapping for all result codes provided in the <literal>CMF</literal> enum</simpara>
</listitem>
<listitem>
<simpara>Default values can be overridden by a result bundle provided in the classpath</simpara>
</listitem>
<listitem>
<simpara>Default values can be overridden by means of a Configuration object (<literal>CMFConverter</literal> implements <literal>Configurable</literal>).</simpara>
</listitem>
</itemizedlist>
<simpara>The <literal>CMFConverter</literal> reads optional override resource bundles in the following locations within the classpath
(the second bundle overrides the first one):</simpara>
<itemizedlist>
<listitem>
<simpara><literal>org/jpos/rc/CMF.properties</literal></simpara>
</listitem>
<listitem>
<simpara><literal>META-INF/org/jpos/rc/CMF.properties</literal></simpara>
</listitem>
</itemizedlist>
<simpara>And then an optional <literal>Configuration</literal> object. The format for those overrides is:</simpara>
<simpara><literal>IRC=RC,DISPLAY</literal>, i.e:</simpara>
<screen linenumbering="unnumbered">9999=ZZZZ,General Decline</screen>
<simpara>This would return <literal>ZZZZ</literal> as the result code instead of <literal>9999</literal> with a display message <literal>General Decline</literal>.</simpara>
</section>
<section xml:id="_result_holder_class">
<title>Result holder class</title>
<simpara>Financial applications typically have to perform a lot of validations,
a typical jPOS application for instance using the Transaction Manager has
participants to check mandatory and optional fields, check the terminal,
the merchant, the card, PIN, etc.</simpara>
<simpara>While certifying these kind of applications we usually detect the first
error and abort. Once the error gets corrected we find there&#8217;s another
error in the next test, and yet another on a third one.</simpara>
<simpara>So instead of early-failing, applications can "collect" result information
in the <literal>Result</literal> object.</simpara>
<simpara>We handle three type of results:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>INFO</literal></simpara>
</listitem>
<listitem>
<simpara><literal>WARN</literal></simpara>
</listitem>
<listitem>
<simpara><literal>FAIL</literal></simpara>
</listitem>
</itemizedlist>
<simpara><literal>INFO</literal> as well as <literal>WARN</literal> won&#8217;t stop a transaction from succedding, while those
results with a <literal>FAIL</literal> type should cause the transaction to fail.</simpara>
<simpara>A <literal>Result</literal> object is typically placed in the Transaction&#8217;s Context which
now has a handy <literal>getResult()</literal> helper method, so a participant can use
code like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">ctx.getResult().fail (CMF.EXPIRED, Caller.info(), "Card expired");</programlisting>
<tip>
<simpara><literal>Caller.info()</literal> is a handy static method available in <literal>org.jpos.util.Caller</literal> class.</simpara>
</tip>
<simpara>In addition to <literal>fail</literal> messages, it is possible to call <literal>warn</literal> or <literal>info</literal>.
Those methods don&#8217;t require an <literal>IRC</literal> parameter.</simpara>
</section>
</chapter>
<appendix xml:id="getting_involved">
<title>Getting involved</title>
<simpara>Most action happens in the <link xl:href="http://groups.google.com/group/jpos-users">jPOS Users</link> mailing list.</simpara>
<simpara>There you&#8217;ll find over a thousand jPOS users and developers sharing useful
information about jPOS and related technology, use cases as well as success
stories.</simpara>
<simpara>There&#8217;s an older <link xl:href="http://tech.groups.yahoo.com/group/jpos-dev">jPOS Developers</link> mailing list that we keep
as read-only reference, we rarely use it for new content.</simpara>
<simpara>The source code is hosted in <link xl:href="http://github.com/jpos/jPOS">Github/jPOS</link>. Commits are automatically
posted on Twitter <link xl:href="https://twitter.com/jposcommits">@jposcommits</link> and the <literal>#jpos</literal> channel in
<literal>irc.freenode.net</literal>.</simpara>
<simpara>There&#8217;s a low traffic <link xl:href="http://jpos.org">jPOS Announcements</link> mailing list and <link xl:href="http://jpos.org/blog">jPOS Blog</link>.</simpara>
<simpara>For additional resources, you can visit the <link xl:href="http://jpos.org/resources">jPOS Resources</link> page.</simpara>
<example>
<title>jPOS Team</title>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/team.jpg" contentwidth="400px"/>
</imageobject>
<textobject><phrase>jPOS Team</phrase></textobject>
</inlinemediaobject></simpara>
</example>
<simpara>See the <link xl:href="https://github.com/jpos/jPOS/blob/master/CREDITS">CREDITS</link> page for
a larger list of contributors. If you feel you belong to that list and you&#8217;re not
there, just drop us an email.</simpara>
<simpara>For significants code contributions to the project, users are required to sign
a standard <link xl:href="https://github.com/jpos/jPOS/blob/master/legal/cla-template.txt">Contributor License Agreement</link>.
For company contributions, an additional
<link xl:href="https://github.com/jpos/jPOS/blob/master/legal/cla-template.txt">Corporate Contributor License Agreement</link>
may be required.</simpara>
<tip>
<simpara>You can find jPOS users online in <literal>irc.freenode.net</literal>, on the <literal>#jpos</literal> channel.
jPOS Consulting office is usually online from 1600 to 2000 GMT.</simpara>
</tip>
</appendix>
<appendix xml:id="appendix_license">
<title>License</title>
<informalexample role="license">
<simpara><emphasis role="strong">GNU AFFERO GENERAL PUBLIC LICENSE</emphasis></simpara>
<simpara>Version 3, 19 November 2007</simpara>
<simpara>Copyright &#169; 2007 Free Software Foundation, Inc.
&lt;<link xl:href="http://fsf.org/">http://fsf.org/</link>&gt; <?asciidoc-br?>
 Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.</simpara>
<simpara><emphasis role="strong">Preamble</emphasis></simpara>
<simpara>The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.</simpara>
<simpara>The licenses for most software and other practical works are designed to
take away your freedom to share and change the works. By contrast, our
General Public Licenses are intended to guarantee your freedom to share
and change all versions of a program&#8212;&#8203;to make sure it remains free
software for all its users.</simpara>
<simpara>When we speak of free software, we are referring to freedom, not price.
Our General Public Licenses are designed to make sure that you have the
freedom to distribute copies of free software (and charge for them if
you wish), that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs, and that you know you can do these things.</simpara>
<simpara>Developers that use our General Public Licenses protect your rights with
two steps: (1) assert copyright on the software, and (2) offer you this
License which gives you legal permission to copy, distribute and/or
modify the software.</simpara>
<simpara>A secondary benefit of defending all users' freedom is that improvements
made in alternate versions of the program, if they receive widespread
use, become available for other developers to incorporate. Many
developers of free software are heartened and encouraged by the
resulting cooperation. However, in the case of software used on network
servers, this result may fail to come about. The GNU General Public
License permits making a modified version and letting the public access
it on a server without ever releasing its source code to the public.</simpara>
<simpara>The GNU Affero General Public License is designed specifically to ensure
that, in such cases, the modified source code becomes available to the
community. It requires the operator of a network server to provide the
source code of the modified version running there to the users of that
server. Therefore, public use of a modified version, on a publicly
accessible server, gives the public access to the source code of the
modified version.</simpara>
<simpara>An older license, called the Affero General Public License and published
by Affero, was designed to accomplish similar goals. This is a different
license, not a version of the Affero GPL, but Affero has released a new
version of the Affero GPL which permits relicensing under this license.</simpara>
<simpara>The precise terms and conditions for copying, distribution and
modification follow.</simpara>
<simpara><emphasis role="strong">TERMS AND CONDITIONS</emphasis></simpara>
<simpara><emphasis role="strong">0. Definitions.</emphasis></simpara>
<simpara>"This License" refers to version 3 of the GNU Affero General Public
License.</simpara>
<simpara>"Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.</simpara>
<simpara>"The Program" refers to any copyrightable work licensed under this
License. Each licensee is addressed as "you". "Licensees" and
"recipients" may be individuals or organizations.</simpara>
<simpara>To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy. The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.</simpara>
<simpara>A "covered work" means either the unmodified Program or a work based on
the Program.</simpara>
<simpara>To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy. Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.</simpara>
<simpara>To "convey" a work means any kind of propagation that enables other
parties to make or receive copies. Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.</simpara>
<simpara>An interactive user interface displays "Appropriate Legal Notices" to
the extent that it includes a convenient and prominently visible feature
that (1) displays an appropriate copyright notice, and (2) tells the
user that there is no warranty for the work (except to the extent that
warranties are provided), that licensees may convey the work under this
License, and how to view a copy of this License. If the interface
presents a list of user commands or options, such as a menu, a prominent
item in the list meets this criterion.</simpara>
<simpara><emphasis role="strong">1. Source Code.</emphasis></simpara>
<simpara>The "source code" for a work means the preferred form of the work for
making modifications to it. "Object code" means any non-source form of a
work.</simpara>
<simpara>A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that is
widely used among developers working in that language.</simpara>
<simpara>The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that Major
Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form. A "Major
Component", in this context, means a major essential component (kernel,
window system, and so on) of the specific operating system (if any) on
which the executable work runs, or a compiler used to produce the work,
or an object code interpreter used to run it.</simpara>
<simpara>The "Corresponding Source" for a work in object code form means all the
source code needed to generate, install, and (for an executable work)
run the object code and to modify the work, including scripts to control
those activities. However, it does not include the work&#8217;s System
Libraries, or general-purpose tools or generally available free programs
which are used unmodified in performing those activities but which are
not part of the work. For example, Corresponding Source includes
interface definition files associated with source files for the work,
and the source code for shared libraries and dynamically linked
subprograms that the work is specifically designed to require, such as
by intimate data communication or control flow between those subprograms
and other parts of the work.</simpara>
<simpara>The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.</simpara>
<simpara>The Corresponding Source for a work in source code form is that same
work.</simpara>
<simpara><emphasis role="strong">2. Basic Permissions.</emphasis></simpara>
<simpara>All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met. This License explicitly affirms your unlimited
permission to run the unmodified Program. The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work. This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.</simpara>
<simpara>You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright. Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.</simpara>
<simpara>Conveying under any other circumstances is permitted solely under the
conditions stated below. Sublicensing is not allowed; section 10 makes
it unnecessary.</simpara>
<simpara><emphasis role="strong">3. Protecting Users' Legal Rights From Anti-Circumvention Law.</emphasis></simpara>
<simpara>No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article 11
of the WIPO copyright treaty adopted on 20 December 1996, or similar
laws prohibiting or restricting circumvention of such measures.</simpara>
<simpara>When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to the
covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work&#8217;s
users, your or third parties' legal rights to forbid circumvention of
technological measures.</simpara>
<simpara><emphasis role="strong">4. Conveying Verbatim Copies.</emphasis></simpara>
<simpara>You may convey verbatim copies of the Program&#8217;s source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice; keep
intact all notices stating that this License and any non-permissive
terms added in accord with section 7 apply to the code; keep intact all
notices of the absence of any warranty; and give all recipients a copy
of this License along with the Program.</simpara>
<simpara>You may charge any price or no price for each copy that you convey, and
you may offer support or warranty protection for a fee.</simpara>
<simpara><emphasis role="strong">5. Conveying Modified Source Versions.</emphasis></simpara>
<simpara>You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the terms
of section 4, provided that you also meet all of these conditions:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>The work must carry prominent notices stating that you modified it,
and giving a relevant date.</simpara>
</listitem>
<listitem>
<simpara>The work must carry prominent notices stating that it is released
under this License and any conditions added under section 7. This
requirement modifies the requirement in section 4 to "keep intact all
notices".</simpara>
</listitem>
<listitem>
<simpara>You must license the entire work, as a whole, under this License to
anyone who comes into possession of a copy. This License will therefore
apply, along with any applicable section 7 additional terms, to the
whole of the work, and all its parts, regardless of how they are
packaged. This License gives no permission to license the work in any
other way, but it does not invalidate such permission if you have
separately received it.</simpara>
</listitem>
<listitem>
<simpara>If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your work need
not make them do so.</simpara>
</listitem>
</orderedlist>
<simpara>A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work, and
which are not combined with it such as to form a larger program, in or
on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not used
to limit the access or legal rights of the compilation&#8217;s users beyond
what the individual works permit. Inclusion of a covered work in an
aggregate does not cause this License to apply to the other parts of the
aggregate.</simpara>
<simpara><emphasis role="strong">6. Conveying Non-Source Forms.</emphasis></simpara>
<simpara>You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium customarily used
for software interchange.</simpara>
</listitem>
<listitem>
<simpara>Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a written
offer, valid for at least three years and valid for as long as you offer
spare parts or customer support for that product model, to give anyone
who possesses the object code either (1) a copy of the Corresponding
Source for all the software in the product that is covered by this
License, on a durable physical medium customarily used for software
interchange, for a price no more than your reasonable cost of physically
performing this conveying of source, or (2) access to copy the
Corresponding Source from a network server at no charge.</simpara>
</listitem>
<listitem>
<simpara>Convey individual copies of the object code with a copy of the
written offer to provide the Corresponding Source. This alternative is
allowed only occasionally and noncommercially, and only if you received
the object code with such an offer, in accord with subsection 6b.</simpara>
</listitem>
<listitem>
<simpara>Convey the object code by offering access from a designated place
(gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge. You need not require recipients to copy the
Corresponding Source along with the object code. If the place to copy
the object code is a network server, the Corresponding Source may be on
a different server (operated by you or a third party) that supports
equivalent copying facilities, provided you maintain clear directions
next to the object code saying where to find the Corresponding Source.
Regardless of what server hosts the Corresponding Source, you remain
obligated to ensure that it is available for as long as needed to
satisfy these requirements.</simpara>
</listitem>
<listitem>
<simpara>Convey the object code using peer-to-peer transmission, provided
you inform other peers where the object code and Corresponding Source of
the work are being offered to the general public at no charge under
subsection 6d.</simpara>
</listitem>
</orderedlist>
<simpara>A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be included
in conveying the object code work.</simpara>
<simpara>A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for
incorporation into a dwelling. In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of coverage.
For a particular product received by a particular user, "normally used"
refers to a typical or common use of that class of product, regardless
of the status of the particular user or of the way in which the
particular user actually uses, or expects or is expected to use, the
product. A product is a consumer product regardless of whether the
product has substantial commercial, industrial or non-consumer uses,
unless such uses represent the only significant mode of use of the
product.</simpara>
<simpara>"Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product
from a modified version of its Corresponding Source. The information
must suffice to ensure that the continued functioning of the modified
object code is in no case prevented or interfered with solely because
modification has been made.</simpara>
<simpara>If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied by
the Installation Information. But this requirement does not apply if
neither you nor any third party retains the ability to install modified
object code on the User Product (for example, the work has been
installed in ROM).</simpara>
<simpara>The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed. Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.</simpara>
<simpara>Corresponding Source conveyed, and Installation Information provided, in
accord with this section must be in a format that is publicly documented
(and with an implementation available to the public in source code
form), and must require no special password or key for unpacking,
reading or copying.</simpara>
<simpara><emphasis role="strong">7. Additional Terms.</emphasis></simpara>
<simpara>"Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law. If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by this
License without regard to the additional permissions.</simpara>
<simpara>When you convey a copy of a covered work, you may at your option remove
any additional permissions from that copy, or from any part of it.
(Additional permissions may be written to require their own removal in
certain cases when you modify the work.) You may place additional
permissions on material, added by you to a covered work, for which you
have or can give appropriate copyright permission.</simpara>
<simpara>Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Disclaiming warranty or limiting liability differently from the
terms of sections 15 and 16 of this License; or</simpara>
</listitem>
<listitem>
<simpara>Requiring preservation of specified reasonable legal notices or
author attributions in that material or in the Appropriate Legal Notices
displayed by works containing it; or</simpara>
</listitem>
<listitem>
<simpara>Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or</simpara>
</listitem>
<listitem>
<simpara>Limiting the use for publicity purposes of names of licensors or
authors of the material; or</simpara>
</listitem>
<listitem>
<simpara>Declining to grant rights under trademark law for use of some trade
names, trademarks, or service marks; or</simpara>
</listitem>
<listitem>
<simpara>Requiring indemnification of licensors and authors of that material
by anyone who conveys the material (or modified versions of it) with
contractual assumptions of liability to the recipient, for any liability
that these contractual assumptions directly impose on those licensors
and authors.</simpara>
</listitem>
</orderedlist>
<simpara>All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10. If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term. If a license document contains a
further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms of
that license document, provided that the further restriction does not
survive such relicensing or conveying.</simpara>
<simpara>If you add terms to a covered work in accord with this section, you must
place, in the relevant source files, a statement of the additional terms
that apply to those files, or a notice indicating where to find the
applicable terms.</simpara>
<simpara>Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the above
requirements apply either way.</simpara>
<simpara><emphasis role="strong">8. Termination.</emphasis></simpara>
<simpara>You may not propagate or modify a covered work except as expressly
provided under this License. Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).</simpara>
<simpara>However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally terminates
your license, and (b) permanently, if the copyright holder fails to
notify you of the violation by some reasonable means prior to 60 days
after the cessation.</simpara>
<simpara>Moreover, your license from a particular copyright holder is reinstated
permanently if the copyright holder notifies you of the violation by
some reasonable means, this is the first time you have received notice
of violation of this License (for any work) from that copyright holder,
and you cure the violation prior to 30 days after your receipt of the
notice.</simpara>
<simpara>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License. If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.</simpara>
<simpara><emphasis role="strong">9. Acceptance Not Required for Having Copies.</emphasis></simpara>
<simpara>You are not required to accept this License in order to receive or run a
copy of the Program. Ancillary propagation of a covered work occurring
solely as a consequence of using peer-to-peer transmission to receive a
copy likewise does not require acceptance. However, nothing other than
this License grants you permission to propagate or modify any covered
work. These actions infringe copyright if you do not accept this
License. Therefore, by modifying or propagating a covered work, you
indicate your acceptance of this License to do so.</simpara>
<simpara><emphasis role="strong">10. Automatic Licensing of Downstream Recipients.</emphasis></simpara>
<simpara>Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License. You are not responsible
for enforcing compliance by third parties with this License.</simpara>
<simpara>An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations. If propagation of a covered work
results from an entity transaction, each party to that transaction who
receives a copy of the work also receives whatever licenses to the work
the party&#8217;s predecessor in interest had or could give under the previous
paragraph, plus a right to possession of the Corresponding Source of the
work from the predecessor in interest, if the predecessor has it or can
get it with reasonable efforts.</simpara>
<simpara>You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License. For example, you may not
impose a license fee, royalty, or other charge for exercise of rights
granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that any
patent claim is infringed by making, using, selling, offering for sale,
or importing the Program or any portion of it.</simpara>
<simpara><emphasis role="strong">11. Patents.</emphasis></simpara>
<simpara>A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based. The work
thus licensed is called the contributor&#8217;s "contributor version".</simpara>
<simpara>A contributor&#8217;s "essential patent claims" are all patent claims owned or
controlled by the contributor, whether already acquired or hereafter
acquired, that would be infringed by some manner, permitted by this
License, of making, using, or selling its contributor version, but do
not include claims that would be infringed only as a consequence of
further modification of the contributor version. For purposes of this
definition, "control" includes the right to grant patent sublicenses in
a manner consistent with the requirements of this License.</simpara>
<simpara>Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor&#8217;s essential patent claims, to make,
use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.</simpara>
<simpara>In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement). To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.</simpara>
<simpara>If you convey a covered work, knowingly relying on a patent license, and
the Corresponding Source of the work is not available for anyone to
copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients. "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient&#8217;s use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.</simpara>
<simpara>If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify or
convey a specific copy of the covered work, then the patent license you
grant is automatically extended to all recipients of the covered work
and works based on it.</simpara>
<simpara>A patent license is "discriminatory" if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License. You may not convey a covered work if you are
a party to an arrangement with a third party that is in the business of
distributing software, under which you make payment to the third party
based on the extent of your activity of conveying the work, and under
which the third party grants, to any of the parties who would receive
the covered work from you, a discriminatory patent license (a) in
connection with copies of the covered work conveyed by you (or copies
made from those copies), or (b) primarily for and in connection with
specific products or compilations that contain the covered work, unless
you entered into that arrangement, or that patent license was granted,
prior to 28 March 2007.</simpara>
<simpara>Nothing in this License shall be construed as excluding or limiting any
implied license or other defenses to infringement that may otherwise be
available to you under applicable patent law.</simpara>
<simpara><emphasis role="strong">12. No Surrender of Others' Freedom.</emphasis></simpara>
<simpara>If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License. If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not convey it at all. For example, if you agree to terms that
obligate you to collect a royalty for further conveying from those to
whom you convey the Program, the only way you could satisfy both those
terms and this License would be to refrain entirely from conveying the
Program.</simpara>
<simpara><emphasis role="strong">13. Remote Network Interaction; Use with the GNU General Public License.</emphasis></simpara>
<simpara>Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software. This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.</simpara>
<simpara>Notwithstanding any other provision of this License, you have permission
to link or combine any covered work with a work licensed under version 3
of the GNU General Public License into a single combined work, and to
convey the resulting work. The terms of this License will continue to
apply to the part which is the covered work, but the work with which it
is combined will remain governed by version 3 of the GNU General Public
License.</simpara>
<simpara><emphasis role="strong">14. Revised Versions of this License.</emphasis></simpara>
<simpara>The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time. Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.</simpara>
<simpara>Each version is given a distinguishing version number. If the Program
specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the option
of following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation. If the
Program does not specify a version number of the GNU Affero General
Public License, you may choose any version ever published by the Free
Software Foundation.</simpara>
<simpara>If the Program specifies that a proxy can decide which future versions
of the GNU Affero General Public License can be used, that proxy&#8217;s
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.</simpara>
<simpara>Later license versions may give you additional or different permissions.
However, no additional obligations are imposed on any author or
copyright holder as a result of your choosing to follow a later version.</simpara>
<simpara><emphasis role="strong">15. Disclaimer of Warranty.</emphasis></simpara>
<simpara>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF
THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</simpara>
<simpara><emphasis role="strong">16. Limitation of Liability.</emphasis></simpara>
<simpara>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES
SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE
WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</simpara>
<simpara><emphasis role="strong">17. Interpretation of Sections 15 and 16.</emphasis></simpara>
<simpara>If the disclaimer of warranty and limitation of liability provided above
cannot be given local legal effect according to their terms, reviewing
courts shall apply local law that most closely approximates an absolute
waiver of all civil liability in connection with the Program, unless a
warranty or assumption of liability accompanies a copy of the Program in
return for a fee.</simpara>
<simpara>END OF TERMS AND CONDITIONS</simpara>
<simpara><emphasis role="strong">How to Apply These Terms to Your New Programs</emphasis></simpara>
<simpara>If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.</simpara>
<simpara>To do so, attach the following notices to the program. It is safest to
attach them to the start of each source file to most effectively state
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.</simpara>
<screen>    &lt;one line to give the program's name and a brief idea of what it does.&gt;
    Copyright (C) &lt;year&gt;  &lt;name of author&gt;

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</screen>
<simpara>Also add information on how to contact you by electronic and paper mail.</simpara>
<simpara>If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source. For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code. There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.</simpara>
<simpara>You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary. For more information on this, and how to apply and follow the
GNU AGPL, see
&lt;<link xl:href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</link>&gt;.</simpara>
</informalexample>
</appendix>
</book>